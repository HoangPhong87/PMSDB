@using ProjectManagementSystem.Common
@using ProjectManagementSystem.Resources
@model ProjectManagementSystem.ViewModels.PMS06002.PMS06002ActualWorkRegistModel

@{
    ViewBag.Title = "稼働実績入力";
}

@Scripts.Render("~/bundles/dragOn")

<script type="text/javascript" charset="utf-8">
    $(function () {
        //check if this is Safari on windows, fix size of table header
        if (!!navigator.userAgent.match('Safari/534.57.2')) {
            $('th.projectName, th.phase').css('height', 23.5);
        }

        $('.div-container-content').dragOn();
        $('.div-container-contents').dragOn();

        if ($('.tbl-first').find('tr').length == 0) {
            $('.div-container-content').css("overflow-y", "hidden");
        }
        //Message definition
        var confirmMsg = '@Messages.E005';
        var okMsg = '@string.Format(Messages.I004, "稼働実績", "の更新に成功")';

        $(document).ready(function () {
            SetTargetTime(parseInt($('input[name="target_year"]').val()), parseInt($('input[name="target_month"]').val()));

            var currentdate = new Date();

            var currentMonth = currentdate.getMonth() + 1;
            if (currentMonth < 10) {
                currentMonth = '0' + currentMonth;
            }

            var currentDay = currentdate.getDate();
            if (currentDay < 10) {
                currentDay = '0' + currentDay;
            }

            var today = currentdate.getFullYear() + "/" + currentMonth + "/" + currentDay;
            if ($('table tr.resultActualRow td[id="' + today + '"]').length > 0) {
                var x = $('table tr.resultActualRow td[id="' + today + '"]').offset();
                $('.div-container-contents').scrollLeft(128 * (currentDay - 1));
            }

            updateTotalWorkInMonth();
        });

        // JS class represent the MemberActualWorkDetail entity class
        function MemberActualWorkDetail(user_sys_id, actual_work_year, actual_work_month, actual_work_date, detail_no, project_sys_id, phase_id, actual_work_time) {
            this.user_sys_id = user_sys_id;
            this.actual_work_year = actual_work_year;
            this.actual_work_month = actual_work_month;
            this.actual_work_date = actual_work_date;
            this.detail_no = detail_no;
            this.project_sys_id = project_sys_id;
            this.phase_id = phase_id;
            this.actual_work_time = actual_work_time;
        }

        // JS class represent the MemberActualWork entity class
        function MemberActualWork(user_sys_id, actual_work_year, actual_work_month, total_actual_work) {
            this.user_sys_id = user_sys_id;
            this.actual_work_year = actual_work_year;
            this.actual_work_month = actual_work_month;
            this.total_actual_work = total_actual_work;
        }

        // JS class represent the AttendanceRecord entity class
        function AttendanceRecord(user_sys_id, actual_work_year, actual_work_month, actual_work_date, work_start_time, work_end_time, rest_time, allowed_cost_time, attendance_type_id, remarks) {
            this.user_sys_id = user_sys_id;
            this.actual_work_year = actual_work_year;
            this.actual_work_month = actual_work_month;
            this.actual_work_date = actual_work_date;
            this.work_start_time = work_start_time;
            this.work_end_time = work_end_time;
            this.rest_time = rest_time;
            this.allowed_cost_time = allowed_cost_time;
            this.attendance_type_id = attendance_type_id;
            this.remarks = remarks;
        }

        // construct the list of data(MemberActualWorkDetail) object to be sent to server
        function buildDataListMemberActualWorkDetail() {
            var user_sys_id = parseInt(@Model.user_sys_id);
            var month = parseInt(@Model.target_month);
            var year = parseInt(@Model.target_year);

            var dataList = new Array();

            $(".tbl-container-content tbody tr.tr-work-time").each(function (row) {
                var project_sys_id = $(this).attr('project_sys_id');
                var phase_id = $(this).attr('phase_id');
                $("td", $(this)).each(function (col) {
                    var actual_work_date = col + 1;
                    var actual_work_time = $("input.timeValue", $(this)).val();
                    var isChanged = $(this).children("input.timeValue").attr("ischanged") == '1' ? true : false;

                    if (isChanged) {
                        var workDetail = new MemberActualWorkDetail(
                            user_sys_id,
                            year,
                            month,
                            actual_work_date,
                            0,  //detail_no,
                            project_sys_id,
                            phase_id,
                            actual_work_time);
                        dataList.push(workDetail);
                    }
                });
            });

            return dataList;
        }

        // construct the list of data(AttendanceRecord) object to be sent to server
        function buildDataListAttendanceRecord() {
            var user_sys_id = parseInt(@Model.user_sys_id);
            var month = parseInt(@Model.target_month);
            var year = parseInt(@Model.target_year);

            var dataList = new Array();

            $(".tbl-container-content  tr.tr-start-time").each(function (row) {
                $("td", $(this)).each(function (col) {
                    var actual_work_date = col + 1;

                    var tdStartTimes = $(".tbl-container-content  tr.tr-start-time td");
                    var tdEndTimes = $(".tbl-container-content  tr.tr-end-time td");
                    var tdRestTimes = $(".tbl-container-content  tr.tr-rest-time td");
                    var tdAllowedCostTime = $(".tbl-container-content  tr.tr-allowed-cost-time td");
                    var tdAttendTypes = $(".tbl-container-content  tr.tr-attend-type td");

                    var work_start_time = $(tdStartTimes[col]).children('.start_time').val();
                    var isChangeWordkStartTime = $(tdStartTimes[col]).children('.start_time').attr('ischanged') == '1' ? true : false;
                    var work_end_time = $(tdEndTimes[col]).children('.end_time').val();
                    var isChangeWorkEndTime = $(tdEndTimes[col]).children('.end_time').attr('ischanged') == '1' ? true : false;
                    var rest_time = $(tdRestTimes[col]).children('.rest_time').val();
                    var isChangRestTime = $(tdRestTimes[col]).children('.rest_time').attr('ischanged') == '1' ? true : false;
                    var allowed_cost_time = $(tdAllowedCostTime[col]).children('.allowed_cost_time').val();
                    var isChangAllowedCostTime = $(tdAllowedCostTime[col]).children('.allowed_cost_time').attr('ischanged') == '1' ? true : false;
                    var attendance_type_id = $(tdAttendTypes[col]).children('select').val();
                    var isChangeAttendance_type = $(tdAttendTypes[col]).children('.attendance_type').attr('ischanged') == '1' ? true : false;

                    if (isChangeWordkStartTime || isChangeWorkEndTime || isChangRestTime || isChangAllowedCostTime || isChangeAttendance_type) {
                        var attendanceRecord = new AttendanceRecord(
                            user_sys_id,
                            year,
                            month,
                            actual_work_date,
                            work_start_time,
                            work_end_time,
                            rest_time,
                            allowed_cost_time,
                            attendance_type_id,
                            null);
                        dataList.push(attendanceRecord);
                    }
                });
            });

            return dataList;
        }

        // construct the list of data(MemberActualWork) object to be sent to server
        function buildDataMemberActualWork(dataListMemberActualWorkDetail, dataListAttendanceRecord) {
            var user_sys_id = parseInt(@Model.user_sys_id);
            var month = parseInt(@Model.target_month);
            var year = parseInt(@Model.target_year);

            var memberActualWork = null;

            if (dataListMemberActualWorkDetail.length > 0 || dataListAttendanceRecord.length > 0) {

                memberActualWork = new MemberActualWork(
                    user_sys_id,
                    year,
                    month,
                    0);
            }

            return memberActualWork;
        }

        //Update the total work time in month
        function updateTotalWorkInMonth() {
            var total = 0.0;
            $(".tbl-container-content  tr.resultRow td input.tempTime").each(function (i) {
                var totalTimeArr = $(this).val().split(':');
                var totalTime = parseInt(totalTimeArr[0]) + parseInt(totalTimeArr[1]) / 60.0;

                total += parseFloat(totalTime);
            });

            var hour = formatNumber(Math.floor(total));
            var min = formatNumber(Math.round((total - Math.floor(total)) * 60));

            $("#totalWorkInMonth").html(hour + ':' + min + 'h');
        }

        //Validate user data before send it to server
        function validateData() {
            //Check for invalid values
            var errorColumn = new Array();
            $(".tbl-container-content  tr:not(.resultRow):not(.resultActualRow):not(.tr-attend-type)").each(function (i) {
                $("td", $(this)).each(function (day) {
                    if ($("input.hour", $(this)).length > 0 && $("input.minute", $(this)).length > 0) {
                        var hour = $("input.hour", $(this)).val() == "" ? "00" : $("input.hour", $(this)).val();
                        var minute = $("input.minute", $(this)).val() == "" ? "00" : $("input.minute", $(this)).val();
                        if (hour == "" || minute == "" || isNaN(hour) || isNaN(minute) || parseInt(minute) >= 60) {
                            errorColumn.push(day);
                            return;
                        }
                    }
                });
            });

            if (errorColumn.length > 0) {
                //Display error message
                var msgBody = "の稼働時間に誤りがあります";
                var month = parseInt(@Model.target_month);

                var messages = "<ul>";
                for (var i = 0; i < errorColumn.length; i++) {
                    messages += "<li>" + month + "/" + (errorColumn[i] + 1) + msgBody + "</li>";
                }
                messages += "</ul>";

                $("#errorMsg").html(messages);
                return false;
            }

            return true;
        }

        function validateTotalTime() {
            var invalidMess = [];
            var total_actual_work_time = 0;
            $(".tbl-container-content tbody tr.tr-work-time").each(function (row) {
                $("td", $(this)).each(function (col) {
                    total_actual_work_time += parseFloat($("input.timeValue", $(this)).val());
                });
            });
            if (total_actual_work_time > '@Constant.TOTAL_ACTUAL_WORK_TIME') {
                invalidMess.push("@string.Format(Messages.E041)");
            }
            return invalidMess;
        }

        function submitData(dataListMemberActualWorkDetail, dataMemberActualWork, dataListAttendanceRecord, regist_type) {
            var dataToSend = JSON.stringify({
                dataListMemberActualWorkDetail: dataListMemberActualWorkDetail,
                dataMemberActualWork: dataMemberActualWork,
                dataListAttendanceRecord: dataListAttendanceRecord,
                regist_type: regist_type
            });

            $.ajax({
                type: "POST",
                url: '@Url.Action("UpdateActualWorkDetail", "PMS06002")',
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: dataToSend,
                success: function (result) {
                    $("#errorMsg").html("");
                    if (typeof (result) == 'object') {
                        PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.INFORMATION'), "@string.Format(Messages.I004, "稼働実績", "登録")");
                        updateTotalWorkInMonth();
                        $('label[for="UpdateInfo_last_update_date"]').text(result.last_update_date);
                        $('label[for="UpdateInfo_last_update_person"]').text(result.last_update_person);
                        $('label[for="UpdateInfo_last_update_person"]').attr('title', result.last_update_person);
                        if ($('label[for="UpdateInfo_insert_date"]').text() == ' ' && $('label[for="UpdateInfo_insert_person"]').text() == ' ') {
                            $('label[for="UpdateInfo_insert_date"]').text(result.last_update_date);
                            $('label[for="UpdateInfo_insert_person"]').text(result.last_update_person);
                            $('label[for="UpdateInfo_insert_person"]').attr('title', result.last_update_person);
                        }

                        $('input[type="hidden"]').attr('ischanged', '0');
                    }
                    else if (result == 'E015') {
                        PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.WARNING'), '@string.Format(Messages.E015, "稼働実績", "登録")');
                    }
                    else {
                        PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.WARNING'), '@string.Format(Messages.E045, "稼働実績情報")', '/PMS06002/Detail');
                    }

                },
                error: function (error) {
                    if (error.status == 419) {
                        //419: Authentication Timeout
                        window.location.href = '/PMS01001/Login/timeout';
                    }
                }
            });
        }

        //Send data to server to update
        $("button#btnUpdate").click(function () {
            if ($('input[id="regist_type"]').val() == '0') {
                return false;
            }

            if (!validateData()) {
                return false;
            }

            var invalidMess = validateTotalTime();
            if (invalidMess.length > 0) {
                PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.WARNING'), invalidMess);
                return false;
            }

            if (PMS.utility.IsAuthenticateTimeout('@string.Format(Messages.I006)', '') == 0) {
                return;
            }

            var dataListMemberActualWorkDetail = buildDataListMemberActualWorkDetail();
            var dataListAttendanceRecord = buildDataListAttendanceRecord();
            var dataMemberActualWork = buildDataMemberActualWork(dataListMemberActualWorkDetail, dataListAttendanceRecord);
            var regist_type = $('input[id="regist_type"]').val();

            if (dataListMemberActualWorkDetail.length == 0 && dataListAttendanceRecord.length == 0 && dataMemberActualWork == null) {
                PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.WARNING'), '@Messages.E043');
                return;
            }

            PMS.utility.showSubmitConfirmDialog(confirmMsg, null, null, function (action) {
                if (action) {
                    //reset the flag
                    $("input.isChanged", $(this)).val('0');
                    $('input[class="isChangedRegist"]').val('0');
                    submitData(dataListMemberActualWorkDetail, dataMemberActualWork, dataListAttendanceRecord, regist_type);
                    BootstrapDialog.closeAll();
                }
            });
        });

        $('button#btnBack').click(function () {
            var prevPage = '@HttpContext.Current.Session[Constant.SESSION_TRANSITION_DESTINATION]';
            if (prevPage.indexOf('AssignmentByUser') >= 0)
                window.location.href = prevPage;
            else {
                $('#frmBackToDetail').submit();
            }
        });
    });

    function formatNumberTime(x) {
        if (x == "" || x == 0)
            return "00";
        else if (x >= 10 || x <= -10) {
            return x;
        } else if (x < 10 && x > 0) {
            return '0' + x;
        } else if (x < 0 && x > -10) {
            return '-0' + x * (-1);
        }
    }

    function openFileOption() {
        $("#fileCSV").click();
    };

    $(document).off('#fileCSV');
    $(document).on('change', '#fileCSV', function () {
        var result = PMS.utility.getDataByAjax('/Common/CheckTimeOut', null);

        if (result == null)
            return;

        var file = $('#fileCSV').val();
        if (file == '') {
            return;
        }
        var sFileExtension = file.split('.')[file.split('.').length - 1].toLowerCase();
        if (sFileExtension !== 'csv') {
            PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.WARNING'), '@string.Format(Messages.E046)');
            return;
        }
        submitFile();
    });

    function SetTargetTime(targetYear, targetMonth) {
        if (targetMonth == 0) {
            targetMonth = 12;
            targetYear--;
        }

        if (targetMonth == 13) {
            targetMonth = 1;
            targetYear++;
        }

        if (targetMonth < 10) {
            targetMonth = '0' + targetMonth;
        }
        $('#currentMonth').text(targetYear + '年' + targetMonth + '月');

    }

    $(document).off('select[name="attendance_type"]');
    $(document).on('change', 'select[name="attendance_type"]', function () {
        var index = $(this).attr('tabindex');
        var dataToSend = JSON.stringify({
            attendance_type_id: $(this).val()
        });
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetAdjustmentTime", "PMS06002")',
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            data: dataToSend,
            success: function (result) {
                $('.ui-dialog *').remove();
                $("#errorMsg").html("");
                if (typeof (result) == 'object') {
                    $("tr.tr-allowed-cost-time td").each(function () {
                        if ($(this).children('input.allowed_cost_time_hour').attr('tabindex') === index && $(this).children('input.allowed_cost_time_minute').attr('tabindex') === index) {
                            $(this).children('input.allowed_cost_time_hour').attr('value', result['hour']);
                            $(this).children('input.allowed_cost_time_minute').attr('value', result['minute']);
                            $(this).children('input.allowed_cost_time_hour').val(result['hour']);
                            $(this).children('input.allowed_cost_time_minute').val(result['minute']);
                            $(this).children('input.allowed_cost_time').attr('value', result['time']);
                        }
                    });
                }
            },
            error: function (error) {
                $('.ui-dialog *').remove();

                if (error.status == 419) { //419: Authentication Timeout
                    window.location.href = '/PMS01001/Login/timeout';
                } else if (error.status == 420) { // out of date license
                    window.location.href = '/ErrorOutOfDate';
                }
                else {
                    window.location.href = '/Error';
                }
            }
        });
    });

    function submitFile() {
        var formdata = new FormData(); //FormData object
        var fileInput = document.getElementById('fileCSV');

        if (fileInput.files.length == 0) {
            return;
        }

        //Iterating through each files selected in fileInput
        for (i = 0; i < fileInput.files.length; i++) {
            //Appending each file to FormData object
            formdata.append(fileInput.files[i].name, fileInput.files[i]);
        }

        formdata.append('employee_no', $('input[name="employee_no"]').val());
        formdata.append('month', $('input[name="target_month"]').val());
        formdata.append('year', $('input[name="target_year"]').val());

        //Creating an XMLHttpRequest and sending
        var xhr = new XMLHttpRequest();
        xhr.open('POST', '/PMS06002/CheckImportCSV');
        xhr.send(formdata);
        xhr.onload = function (data) {
            $('#fileCSV').val('');

            var res = JSON.parse(xhr.responseText);
            if (typeof (res) == 'string') // has error
                PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.WARNING'), res);
            else { // rebind data
                PMS.utility.showSubmitConfirmDialog("@Messages.I008", null, null, function (action) {
                    if (action) {
                        for (var row in res) {
                            var rowData = res[row];
                            var date = new Date(rowData['3']).getDate();
                            var colum = parseInt(date) - 1;
                            var startTime = rowData['4'].split(':');
                            var endTime = rowData['5'].split(':');
                            var $tdStartTime = $($('.tbl-container-content tr.tr-start-time td')[colum]);
                            var $tdEndTime = $($('.tbl-container-content tr.tr-end-time td')[colum]);
                            var $tdTotalTime = $($('.tbl-container-content tr.resultActualRow td')[colum]);
                            var restTime = $($('.tbl-container-content tr.tr-rest-time td')[colum]).children('.rest_time').val();
                            var start = parseInt(startTime[0]) + parseInt(startTime[1]) / 60.0;
                            var end = parseInt(endTime[0]) + parseInt(endTime[1]) / 60.0;
                            var totalTime = end - start - parseFloat(restTime);

                            $tdStartTime.children('.start_time_hour').val(startTime[0]);
                            $tdStartTime.children('.start_time_minute').val(startTime[1]);
                            $tdStartTime.children('.start_time').val(start);
                            $tdStartTime.children('.start_time').attr('ischanged', '1');

                            $tdEndTime.children('.end_time_hour').val(endTime[0]);
                            $tdEndTime.children('.end_time_minute').val(endTime[1]);
                            $tdEndTime.children('.end_time').val(end);
                            $tdEndTime.children('.end_time').attr('ischanged', '1');

                            totalTime = Math.round(totalTime * 100) / 100;
                            var min_actual = Math.round(Math.floor(totalTime) == 0 && totalTime < 0
                                                ? ((Math.floor(totalTime) + 1) - totalTime) * 60
                                                : (totalTime - Math.floor(totalTime)) * 60);
                            min_actual = min_actual != 0 && totalTime < 0 ? 60 - min_actual : min_actual;

                            var hour_actual = '00';

                            if (min_actual != 0 && totalTime < 0) {
                                hour_actual = Math.floor(totalTime) + 1;
                            } else {
                                hour_actual = Math.floor(totalTime);
                            }

                            var resultHour = (hour_actual == 0 && totalTime < 0 ? '-' + formatNumberTime(hour_actual) : formatNumberTime(hour_actual));
                            var resultMin = formatNumber(min_actual);

                            $tdTotalTime.html(resultHour + '<span> : </span>' + resultMin);
                            $tdTotalTime.append("<input type='hidden' class='actualTime' value='" + resultHour + ':' + resultMin + "' />");
                        }

                        checkRegisterTemp();
                        BootstrapDialog.closeAll();

                        PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.INFORMATION'), "@Messages.E050");
                    }
                });
            }
        }
    }
</script>

<form id="frmBackToDetail" method="POST" action="@Url.Action("Detail","PMS06002")">
    <input type="hidden" name="user_id" value="@Model.user_sys_id" />
    <input type="hidden" name="selected_year" value="@Model.target_year" />
    <input type="hidden" name="selected_month" value="@Model.target_month" />
</form>

<section class="content-header">
    <h1 style="display:inline-block">
        @ViewBag.Title
    </h1>
    @Html.LabelFor(m => m.UserWorkInfo.group_name, @Model.UserWorkInfo.group_name, new { @class = "GroupName longtext1", title = @Model.UserWorkInfo.group_name })
    @Html.LabelFor(m => m.UserWorkInfo.user_name, @Model.UserWorkInfo.user_name, new { @class = "UserName longtext1", title = @Model.UserWorkInfo.user_name })
    <span id="currentMonth" class="bold"></span>
    <div class="search-form">
        <div class="search-condition row none-button-search">
            <div class="col-sm-12 col-sm-first">
                @Html.Label("月稼働時間", new { @class = "bold title-label" })
                <label for="UserWorkInfo_total_work_str" id="totalWorkInMonth"></label>
            </div>
            <div class="col-sm-12">
                <div class="col-sm-3">
                    @Html.Label("", "登録日時", new { @class = "bold title-label" })
                    @Html.LabelFor(m => m.UpdateInfo.insert_date, @Model.UpdateInfo.insert_date, new { @class = "col_wrap font-normal" })
                </div>
                <div class="col-sm-3">
                    @Html.Label("", "登録者", new { @class = "bold title-label" })
                    @Html.LabelFor(m => m.UpdateInfo.insert_person, @Model.UpdateInfo.insert_person, new { @class = "col_wrap  short-text text-overflow", title = @Model.UpdateInfo.insert_person })
                </div>
                <div class="col-sm-3">
                    @Html.Label("", "更新日時", new { @class = "bold title-label" })
                    @Html.LabelFor(m => m.UpdateInfo.last_update_date, @Model.UpdateInfo.last_update_date, new { @class = "col_wrap font-normal" })
                </div>
                <div class="col-sm-3">
                    @Html.Label("", "更新者", new { @class = "bold title-label" })
                    @Html.LabelFor(m => m.UpdateInfo.last_update_person, @Model.UpdateInfo.last_update_person, new { @class = "col_wrap short-text text-overflow", title = @Model.UpdateInfo.last_update_person })
                </div>
            </div>
        </div>
    </div>
</section>
@RenderPage("~/Views/Shared/ShowHideHeaderContent.cshtml")

<div class="data-list data-regist content">
    <div id="bigContainer" class="col_12">
        <div id="leftContainer">
            <div class="div-left-header">
                <table class="tbl-left-header">
                    <thead>
                        <tr>
                            <th class="projectName">プロジェクト名</th>
                            <th class="phase">フェーズ</th>
                        </tr>
                    </thead>
                </table>
            </div>

            <div class="div-left-content">
                <table class="tbl-left-content dataTable" style="overflow-y: scroll;">
                    <tbody>
                        @{
                            List<int> arrayList = new List<int>();
                            int count = 0;
                            int? tmp = Model.ActualWorkList.Count() > 0 ? Model.ActualWorkList[0].project_sys_id : 0;
                            for (var i = 0; i < @Model.ActualWorkList.Count(); i++)
                            {
                                if (tmp == Model.ActualWorkList[i].project_sys_id)
                                {
                                    count++;
                                }
                                else
                                {
                                    tmp = Model.ActualWorkList[i].project_sys_id;
                                    arrayList.Add(count);
                                    count = 1;
                                }
                            }
                            arrayList.Add(count);
                        }

                        @{
                            int index = 0;
                            int cnt = 0;
                            for (var i = 0; i < @Model.ActualWorkList.Count(); i++)
                            {
                                var trClass = i % 2 == 0 ? "odd" : "even";

                                if (i == cnt)
                                {
                                    <tr class="@trClass">
                                        <td class="projectName" rowspan="@arrayList[index]">
                                            <div class="projectNameContent" title="@Model.ActualWorkList[i].project_name">@Model.ActualWorkList[i].project_name</div>
                                        </td>
                                        <td class="phase" id="@Model.ActualWorkList[i].project_sys_id">
                                            <div class="phaseContent" title="@Model.ActualWorkList[i].phase_name">@Model.ActualWorkList[i].phase_name</div>
                                        </td>
                                    </tr>
                                    cnt += @arrayList[index];
                                    index++;
                                }
                                else
                                {
                                    <tr class="@trClass">
                                        <td class="phase" id="@Model.ActualWorkList[i].project_sys_id">
                                            <div class="phaseContent" title="@Model.ActualWorkList[i].phase_name">@Model.ActualWorkList[i].phase_name</div>
                                        </td>
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>
            <div class="div-left-contents">
                <table class="tbl-left-content dataTable">
                    <tbody>
                        @if (@Model.ActualWorkList.Count() > 0)
                        {
                            <tr>
                                <td colspan="3" class="total title_work cell_right">作業時間</td>
                            </tr>
                        }
                        <tr class="old">
                            <td colspan="3" class="title_work cell_right">勤務開始</td>
                        </tr>
                        <tr class="even">
                            <td colspan="3" class="title_work cell_right">勤務終了</td>
                        </tr>
                        <tr class="old">
                            <td colspan="3" class="title_work cell_right">休憩時間</td>
                        </tr>
                        <tr class="even">
                            <td colspan="3" class="title_work cell_right">有休時間</td>
                        </tr>
                        <tr class="old">
                            <td colspan="3" class="title_work cell_right">勤務区分</td>
                        </tr>
                        <tr>
                            <td colspan="3" class="title_work total cell_right">実働時間</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <div id="container">
            <div class="wrap-header">
                <div class="div-header">
                    <div class="div-container-header dataTable">
                        <table class="tbl-container-header">
                            <thead>
                                <tr class="dayOfMonth">
                                    @for (int i = 1; i < @Model.GetNumberOfDays() + 1; i++)
                                    {
                                        DateTime d = DateTime.Parse("" + @Model.target_month + "/" + @i + "/" + @Model.target_year);
                                        string value = string.Empty;

                                        string valueDay = string.Empty;
                                        switch (d.DayOfWeek)
                                        {
                                            case DayOfWeek.Monday:
                                                valueDay = "（月）";
                                                break;
                                            case DayOfWeek.Tuesday:
                                                valueDay = "（火）";
                                                break;
                                            case DayOfWeek.Wednesday:
                                                valueDay = "（水）";
                                                break;
                                            case DayOfWeek.Thursday:
                                                valueDay = "（木）";
                                                break;
                                            case DayOfWeek.Friday:
                                                valueDay = "（金）";
                                                break;
                                            case DayOfWeek.Saturday:
                                                valueDay = "（土）";
                                                break;
                                            case DayOfWeek.Sunday:
                                                valueDay = "（日）";
                                                break;
                                        }

                                        value = i.ToString();

                                        if ((@Model.HolidayInfo.special_holiday.Contains(d) || @Model.HolidayInfo.weekly_holiday.Contains(d.DayOfWeek))
                                            && @d.DayOfWeek == DayOfWeek.Saturday)
                                        {
                                            <th class="holiday saturday">@value @valueDay</th>
                                        }
                                        else if ((@Model.HolidayInfo.special_holiday.Contains(d) || @Model.HolidayInfo.weekly_holiday.Contains(d.DayOfWeek))
                                            && @d.DayOfWeek == DayOfWeek.Sunday)
                                        {
                                            <th class="holiday sunday">@value @valueDay</th>
                                        }
                                        else if (@Model.HolidayInfo.special_holiday.Contains(d) || @Model.HolidayInfo.weekly_holiday.Contains(d.DayOfWeek))
                                        {
                                            <th class="holiday">@value @valueDay</th>
                                        }
                                        else if (@d.DayOfWeek == DayOfWeek.Saturday)
                                        {
                                            <th class="saturday">@value @valueDay</th>
                                        }
                                        else if (@d.DayOfWeek == DayOfWeek.Sunday)
                                        {
                                            <th class="sunday">@value @valueDay</th>
                                        }
                                        else
                                        {
                                            <th>@value @valueDay</th>
                                        }
                                    }
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
            <div class="div-container-content" style="cursor: all-scroll;">
                <div class="container-content">
                    <table class="tbl-container-content dataTable tbl-first">
                        <tbody>
                            @Html.Raw(Model.HtmlContent)
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="div-container-contents">
                <div class="container-content">
                    <table class="tbl-container-content dataTable">
                        <tbody>
                            @if (@Model.ActualWorkList.Count() > 0)
                            {
                                <tr class="resultRow">
                                    @for (int i = 0; i < @Model.GetNumberOfDays(); i++)
                                    {
                                        <td class="total"></td>
                                    }
                                </tr>
                            }
                            @Html.Raw(Model.HtmlContentWorkStartTime)             
                            <tr class="resultActualRow">
                                @for (int i = 1; i < @Model.GetNumberOfDays() + 1; i++)
                                {
                                    DateTime d = DateTime.Parse("" + @Model.target_month + "/" + @i + "/" + @Model.target_year);
                                    string value = string.Empty;

                                    if ((@Model.HolidayInfo.special_holiday.Contains(d) || @Model.HolidayInfo.weekly_holiday.Contains(d.DayOfWeek))
                                        && @d.DayOfWeek == DayOfWeek.Saturday)
                                    {
                                        <td class="total holiday" id="@d.ToString("yyyy/MM/dd")"></td>
                                    }
                                    else if ((@Model.HolidayInfo.special_holiday.Contains(d) || @Model.HolidayInfo.weekly_holiday.Contains(d.DayOfWeek))
                                        && @d.DayOfWeek == DayOfWeek.Sunday)
                                    {
                                        <td class="total holiday" id="@d.ToString("yyyy/MM/dd")"></td>
                                    }
                                    else if (@Model.HolidayInfo.special_holiday.Contains(d) || @Model.HolidayInfo.weekly_holiday.Contains(d.DayOfWeek))
                                    {
                                        <td class="total holiday" id="@d.ToString("yyyy/MM/dd")"></td>
                                    }
                                    else if (@d.DayOfWeek == DayOfWeek.Saturday)
                                    {
                                        <td class="total holiday" id="@d.ToString("yyyy/MM/dd")"></td>
                                    }
                                    else if (@d.DayOfWeek == DayOfWeek.Sunday)
                                    {
                                        <td class="total holiday" id="@d.ToString("yyyy/MM/dd")"></td>
                                    }
                                    else
                                    {
                                        <td class="total" id="@d.ToString("yyyy/MM/dd")"></td>
                                    }
                                }
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="search-date register-search-date clearfix">
    <form method="POST" action="@Url.Action("CheckImportCSV", "PMS06002")" enctype="multipart/form-data" id="frmImportCSV">
        <input type="hidden" name="id" value="@Model.user_sys_id" />
        <input type="hidden" name="target_year" value="@Model.target_year" />
        <input type="hidden" name="target_month" value="@Model.target_month" />
        <input type="hidden" name="employee_no" value="@Model.UserWorkInfo.employee_no" />
        <input type="file" id="fileCSV" name="fileCSV" style="display:none" accept=".csv" />
    </form>
    <input type="hidden" id="regist_type" value="@Model.regist_type" />
    <button type="button" id="btnBack" name="btnBack" class="btn light btn-left btnNoStyleDisable"><i class="btn-icon btn-back"></i>戻る</button>
    <button type="button" id="btnUpdate" name="btnUpdate" class="btn green btn-left"><i class="btn-icon btn-regist"></i>登録</button>
    <button type="button" id="btnInputCSV" name="btnInputCSV" class="btn dark btn-left" onclick="openFileOption();return;"><i class="btn-icon btn-input-csv"></i>CSV取込</button>
    @Html.Raw(Model.HtmlCheckbox)
</div>

<script>
    var anchor = 315;

    if ($('.div-container-content').outerHeight() > 0 && $(this).scrollTop() > anchor) { // check case of have any prj in list timesheet and scroll to float header already --- 
        var getWidth = $('.div-container-content').outerWidth();
        $(".div-header").css({ "width": getWidth + "px" });
    }

    //zoom event
    $(window).resize(function () {
        if ($('.div-container-content').outerHeight() > 0 && $(this).scrollTop() > anchor) { // check case of have any prj in list timesheet and scroll to float header already--- 
            getNewWidth = $('.div-container-content').outerWidth();
            $(".div-header").css({ "width": getNewWidth + "px" });
        }
    });

    //get anchor when hide search pane
    $(".show-hide-search").on("click", function () {
        if (anchor >= 315)
            anchor -= Number($('.search-form').outerHeight());
        else
            anchor += Number($('.search-form').outerHeight());
    });

    //scroll
    $(window).scroll(function (e) {
        if ($(this).scrollTop() > anchor) {
            $(".wrap-header").addClass("wrap-header-float");
            $(".div-header").addClass("header-float");

            getLeft = $('.div-container-content').offset().left - $(this).scrollLeft();
            $(".wrap-header").css({ "left": getLeft + "px" });//recouting position left 
            var getHeightOfHeader = $('.wrap-header-float').outerHeight();
            $(".div-container-content").css({ "margin-top": getHeightOfHeader + "px" });

            getNewWidth = $('.div-container-content').outerWidth(); //recouting width of header
            $(".div-header").css({ "width": getNewWidth + "px" });
        }
        else {
            $(".wrap-header").removeClass("wrap-header-float");
            $(".div-header").removeClass("header-float");

            $(".div-container-content").css({ "margin-top": "" });
            $(".wrap-header").css({ "left": "" });

            $(".div-header").css({ "width": "" });
        }
    });

    $('.div-container-content').scroll(function () {
        $('.div-left-content').scrollTop($(this).scrollTop());
        $('.div-header').scrollLeft($(this).scrollLeft());
        $('.div-container-contents').scrollLeft($(this).scrollLeft());
    });

    $('.div-container-contents').scroll(function () {
        $('.div-container-content').scrollLeft($(this).scrollLeft());
        $('.div-header').scrollLeft($(this).scrollLeft());
    });
</script>

@Scripts.Render("~/bundles/actualWorkRegist")
