@model ProjectManagementSystem.ViewModels.PMS06002.PMS06002ListViewModel
@using ProjectManagementSystem.Resources;
@using ProjectManagementSystem.Common

@{
    ViewBag.Title = "稼働実績一覧";
    var currentUser = HttpContext.Current.Session[Constant.SESSION_LOGIN_USER] as LoginUser;
}

@if (currentUser != null && currentUser.PlanFunctionList.Contains(Constant.FunctionID.ActualWorkDetail) && currentUser.FunctionList.Contains(Constant.FunctionID.ActualWorkDetail))
{
    <input type="hidden" id="roleDetail" value="true" />
}
<div id="onloadDivSales">
</div>
<section class="content-header" id="actualWorkList">
    <h1 id="title">
        @ViewBag.Title
    </h1>
    <div class="search-form">
        <div class="search-condition clearfix">
            <div class="row row-margin-bottom">
                <span class="group-1">
                    <label style="width:80px" class="width-100">所属</label>
                    @Html.DropDownListFor(m => m.Condition.GroupId, Model.GroupList, "指定なし")
                    <label style="width:100px" class="width-120">ユーザー名</label>
                    @Html.TextBoxFor(m => m.Condition.DisplayName, new { style = "ime-mode: auto;", maxlength = 50 })
                </span>
                <span class="search-by-date">
                    <label style="width:80px" class="width-100">期間</label>
                    <span class="date datepicker-months start">
                        @Html.TextBox(m => m.Condition.StartMonth, "{0:yyyy/MM}", new { @class = "ime-mode", maxlength = 7, @placeholder = "YYYY/MM" })
                        <button class="btn light"><i class="btn-icon btn-calendar"></i></button>
                    </span>
                    <span class="date-range-space">～</span>
                    <span class="date datepicker-months end">
                        @Html.TextBox(m => m.Condition.EndMonth, "{0:yyyy/MM}", new { @class = "ime-mode", maxlength = 7, @placeholder = "YYYY/MM" })
                        <button class="btn light"><i class="btn-icon btn-calendar"></i></button>
                    </span>
                </span>
               @if (currentUser != null &&
                  (currentUser.PlanFunctionList.Contains(Constant.FunctionID.BranchList_Admin) && currentUser.FunctionList.Contains(Constant.FunctionID.BranchList_Admin)
                   || currentUser.PlanFunctionList.Contains(Constant.FunctionID.BranchList) && currentUser.FunctionList.Contains(Constant.FunctionID.BranchList)
                   || currentUser.PlanFunctionList.Contains(Constant.FunctionID.BranchRegist) && currentUser.FunctionList.Contains(Constant.FunctionID.BranchRegist)))
               {
                    <label style="width:80px" class="width-120 lbl-contract">拠点</label>
                    @Html.DropDownListFor(m => m.Condition.LOCATION_ID, Model.BranchList, new { @class = "", @multiple = "multiple", @style = "vertical-align: top !important;" })
                }

            </div>
            @if (currentUser != null && currentUser.PlanFunctionList.Contains(Constant.FunctionID.ActualWorkList_Admin) && currentUser.FunctionList.Contains(Constant.FunctionID.ActualWorkList_Admin))
            {
                <div class="row">
                    <label class="width-120 delete-include">
                        @Html.CheckBoxFor(m => m.Condition.DELETED_INCLUDE, new { @class = "condition_chkbox" })
                        削除済を含む
                    </label>

                    <label class="width-120">
                        @Html.CheckBoxFor(m => m.Condition.RETIREMENT_INCLUDE, new { @class = "condition_chkbox" })
                        退職済を含む
                    </label>
                </div>
            }
            else
            {
                @Html.CheckBoxFor(m => m.Condition.DELETED_INCLUDE, new { @class = "hide" })
                @Html.CheckBoxFor(m => m.Condition.RETIREMENT_INCLUDE, new { @class = "hide" })
            }
        </div>
        <div class="right search-action">
            <button type="button" id="btnSearch" name="btnSearch" class="btn dark btn-search-mg"><i class="btn-icon btn-search"></i>検索</button>
            <button type="button" id="btnClear" name="btnClear" class="btn light"><i class="btn-icon btn-clear"></i>クリア</button>
        </div>
    </div>
</section>
@Html.Hidden("hdnLocationID", Model.Condition.LOCATION_ID)
@RenderPage("~/Views/Shared/ShowHideHeaderContent.cshtml")

<div class="actual-work-list content data-list special-list clearfix" style="visibility:hidden">
    <div class="note">
        <div class="templ-regist">&nbsp;</div>
        <label>仮登録</label>
    </div>

    <div class="div-left">
        <table id="InfoTable" class="tbl-left" width="100%">
            <thead>
                <tr>
                    <th>UserId</th>
                    <th>No.</th>
                    <th>所属</th>
                    <th>ユーザー名</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
    <div class="div-right">
        <table class="tbl-right dataTable" width="100%">
            <thead>
                <tr></tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <div class="notification">
        <p>※一覧の月毎の内容は「実績工数／予定工数」を表示しております。</p>
        @Html.DropDownListFor(m => m.Condition.WorkTimeUnit, new SelectList(Constant.TimeUnit.Items, "Key", "Value"), new { @class = "timeUnit" }, false)
    </div>
</div>

<div class="search-date actual-work-list-search-date">
    <button id="btnExport" name="btnExport" class="btn dark btn-left"><i class="btn-icon btn-output-csv"></i>CSV出力</button>
    @if (currentUser != null && currentUser.PlanFunctionList.Contains(Constant.FunctionID.CheckInputStatus) && currentUser.FunctionList.Contains(Constant.FunctionID.CheckInputStatus))
    {
        <button id="btnChangeModeOff" name="btnChangeModeOff" class="btn dark btn-left"><i class="btn-icon btn-check btn-check"></i>稼働入力確認</button>
        <button id="btnChangeModeOn" name="btnChangeModeOn" class="btn red btn-left" style="display:none"><i class="btn-icon btn-check"></i>稼働入力確認中</button>
    }
    <button type="button" id="btnPrevMonth" name="btnPrevMonth" class="btn light btnNoStyleDisable">前月</button>
    <span class="time-duration">
        <b id="display_from_year"></b>年<b id="display_from_month"></b>月 ～
        <b id="display_to_year"></b>年<b id="display_to_month"></b>月
    </span>
    <button type="button" id="btnNextMonth" name="btnNextMonth" class="btn light btnNoStyleDisable">翌月</button>

    <form id="formList" action='@Url.Action("ExportCsvActualList", "PMS06002")' method="POST" class="frmExport">
        <input id="group_id" name="group_id" type="hidden">
        <input id="eff_type" name="eff_type" type="hidden">
        @Html.Hidden("start_date", @Model.Condition.StartMonth.ToString("yyyy/MM"))
        @Html.Hidden("end_date", @Model.Condition.EndMonth.ToString("yyyy/MM"))
        <input id="user_name" name="user_name" type="hidden">
        <input id="deleteFlag" name="deleteFlag" type="hidden" value="False">
        <input id="retirementFlag" name="retirementFlag" type="hidden" value="False">
        <input id="sort_colum" name="sort_colum" type="hidden" value="0">
        <input id="sort_type" name="sort_type" type="hidden" value="asc">
        <input id="search_locationID" name="search_locationID" type="hidden" />
        <input id="tabId" name="TAB_ID" type="hidden" />
    </form>

    @Html.Hidden("default_start_date", @Model.Condition.StartMonth.ToString("yyyy/MM"))
    @Html.Hidden("default_end_date", @Model.Condition.EndMonth.ToString("yyyy/MM"))
</div>

<form method='post' id='formDetail' action='/PMS06002/Detail'>
    <input name="user_id" id="user_id" type="hidden">
    <input name="selected_year" id="selected_year" type="hidden">
    <input name="selected_month" id="selected_month" type="hidden">
</form>

<script type="text/javascript" charset="utf-8">
    var sort_colum = 0;
    var sort_type = 'asc';
    var is_chrome = navigator.userAgent.toLowerCase().indexOf('chrome') > -1;
    $(function () {
        var uniqueId = "@Guid.NewGuid().ToString()";
        $("#tabId").val(uniqueId);
        SetEventBeforeUnload();
        LoadOldValueOfControls();
        saveCondition();
        bindTimeDuration(0);

        var hdnLocationID = $('#hdnLocationID').val();
        if (hdnLocationID.length > 0) {
            var locationIdArr = hdnLocationID.split(',');
            $('#Condition_LOCATION_ID').val(locationIdArr);
        }

        //setting value for the DataTable
        var oSorting = {
            "bSort": true
        };
        var oPaginate = {
            "bPaginate": true,
            "iDisplayLength": parseInt(@App[ConfigurationKeys.LIST_ITEMS_PER_PAGE]),
            "bStateSave": false
        };
        var oServerSide = {
            "bServerSide": true,
            "sAjaxSource": '@Url.Action("ActualWorkList", "PMS06002")',
            "fnBeforeSend": beforeSend,
            "fnServerParams": serverParams,
            "fnInitComplete": bindData,
            "fnDrawCallback": displayComplete
        };
        var aoColumnDefs = [
            { "sName": "user_sys_id", "bVisible": false, "aTargets": [0], "sWidth": "0%" },
            { "bSortable": false, "sName": "no", "aTargets": [1], "sWidth": "5%", "sClass": "cell_center " },
            { "sName": "group_name", "aTargets": [2], "sWidth": "45%", "sClass": "cell_left", "mRender": function (data, type, full) { return PMS.utility.buildColumShortText(data); } },
            { "sName": "user_name", "aTargets": [3], "sWidth": "50%", "sClass": "cell_left", "mRender": function (data, type, full) { return PMS.utility.buildColumShortText(data); } }
        ];

        var dataTable = CreateDataTable('#InfoTable', oSorting, oPaginate, oServerSide, aoColumnDefs);

        function beforeSend() {
        }

        function serverParams(aoData) {
            aoData.push(
                { "name": "DisplayName", "value": $("#user_name").val() },
                { "name": "GroupId", "value": $("#group_id").val() },
                { "name": "WorkTimeUnit", value: $("#eff_type").val() },
                { "name": "StartMonth", value: $("#start_date").val() },
                { "name": "EndMonth", value: $("#end_date").val() },
                { "name": "DELETED_INCLUDE", "value": $("#deleteFlag").val() },
                { "name": "RETIREMENT_INCLUDE", "value": $("#retirementFlag").val() },
                { "name": "LOCATION_ID", "value": $("#search_locationID").val() },
                { "name": "sortColumn", "value": $("#sort_colum").val() },
                { "name": "sortType", "value": $("#sort_type").val() },
                { "name": "TAB_ID", "value": $("#tabId").val() }
            );
        }

        function bindData(data) {
            // process status disabled  buttton exportCSV when search data
            if (data.aaData.length == 0) {
                $('#btnExport').addClass('disabled').attr('disabled', 'disabled');
                $('#btnChangeMode').addClass('disabled').attr('disabled', 'disabled');
            }
            else {
                $('#btnExport').removeClass('disabled').removeAttr('disabled');
                $('#btnChangeMode').removeClass('disabled').removeAttr('disabled');
            }

            var html = '';

            var columsArr = PMS.utility.getMonthCols($('#start_date').val(), $('#end_date').val());

            if (data.datalist.length > 0) {
                for (var i = 0; i < data.datalist.length; i++) {
                    var bgRow = i % 2 == 0 ? 'odd' : 'even';

                    html += '<tr class="' + bgRow + '">';

                    for (var j = 0; j < columsArr.length; j++) {
                        html += '<td class="center actual_work">' + buildFormCode(data.datalist[i][j], data.aaData[i][0], columsArr[j]) + '</td>';
                    }

                    html += '</tr>';
                }
            } else {
                if (is_chrome) {
                    html += '<tr role="row" class="odd">'
                   + '<td colspan="' + columsArr.length + '" class="dataTables_empty" style="border-bottom:2px solid #eaeaea;height:37px;">&nbsp;</td>'
                   + '<tr>';
                }
                else {
                    html += '<tr role="row" class="odd">'
                  + '<td colspan="' + columsArr.length + '" class="dataTables_empty">&nbsp;</td>'
                  + '<tr>';
                }
               
            }

            $('.tbl-right tbody').empty().append(html);
        }

        //variable save status of condition
        var currentConditionState = { grID: "", usrName: "", toDate: "", fromDate: "", locID: "" };
        function displayComplete() {
            $('a[type="1"]').parents('td.actual_work').css('background-color', 'rgb(224, 233, 242)');
            $('div[type="1"]').parents('td.actual_work').css('background-color', 'rgb(224, 233, 242)');

            if (sort_colum == 0) {
                $('#InfoTable tr th:not(.sorting_disabled)').removeClass('sorting_asc sorting_desc').addClass('sorting').removeAttr('aria-sort');
            }
            $('div.actual-work-list').removeAttr('style');
            PMS.utility.imeControl($("#Condition_DisplayName"), 'active');

            currentConditionState.grID = $('#Condition_GroupId').val();
            currentConditionState.usrName = $('#Condition_DisplayName').val();
            currentConditionState.fromDate = $('#Condition_StartMonth').val();
            currentConditionState.toDate = $('#Condition_EndMonth').val();
            currentConditionState.locID = $('#Condition_LOCATION_ID').val();

            $("#onloadDivSales").hide();
            $('.pace.pace-active').addClass('pace-inactive').removeClass('pace-active');
            $('#btnSearch').removeAttr('disabled');
        }

        function buildFormCode(data, userID, targetTime) {
            var arr = data.split('(');
            var dData = arr[0];
            var type = 0;
            var logged = 0;
            if (arr.length > 1) {
                type = arr[1].split(")")[0];
            }
            if (arr.length > 2) {
                logged = arr[2].split(")")[0];
            }
            var s = '';
            if ($('#roleDetail').length > 0) {
                s = '<a href="#" class="detail-link" user_id="' + userID
                + '" selected_year = "' + targetTime.substring(0, 4)
                + '" selected_month = "' + targetTime.substring(5)
                + '" type = "' + type
                + '" logged = "' + logged
                + '">' + dData + '</a>';
            }
            else {
                s = '<div type=' + type + '>' + dData + '</div>';
            }
            return s;
        }

        function saveDateCondition() {
            $('#start_date').val($('#Condition_StartMonth').val());
            $('#end_date').val($('#Condition_EndMonth').val());
        }

        function saveCondition() {
            $('#user_name').val($('#Condition_DisplayName').val());
            $('#group_id').val($('#Condition_GroupId').val());
            $('#eff_type').val($('#Condition_WorkTimeUnit').val());
            $("#deleteFlag").val($("#Condition_DELETED_INCLUDE").prop('checked'));
            $("#retirementFlag").val($("#Condition_RETIREMENT_INCLUDE").prop('checked'));
            $('#search_locationID').val($('#Condition_LOCATION_ID').val());
            saveDateCondition();
        }

        function bindTimeDuration(changeValue) {
            var startTime = $('#start_date').val();
            var endTime = $('#end_date').val();
            var startTimeArr = startTime.split('/');
            var endTimeArr = endTime.split('/');
            var fromMonth = parseInt(startTimeArr[1]) + changeValue;
            var fromYear = parseInt(startTimeArr[0]);
            var toMonth = parseInt(endTimeArr[1]) + changeValue;
            var toYear = parseInt(endTimeArr[0]);

            if (changeValue !== 0) {
                if (fromMonth == 0) {
                    fromMonth = 12;
                    fromYear -= 1;
                }

                if (fromMonth == 13) {
                    fromMonth = 1;
                    fromYear += 1;
                }

                if (toMonth == 0) {
                    toMonth = 12;
                    toYear -= 1;
                }

                if (toMonth == 13) {
                    toMonth = 1;
                    toYear += 1;
                }

                startTime = fromYear + '/' + (fromMonth.toString().length === 1 ? '0' + fromMonth : fromMonth);
                endTime = toYear + '/' + (toMonth.toString().length === 1 ? '0' + toMonth : toMonth);

                $('#start_date, #Condition_StartMonth').val(startTime);
                $('#end_date, #Condition_EndMonth').val(endTime);

                $('.date.datepicker-months.start').datepicker("update", startTime);
                $('.date.datepicker-months.end').datepicker("update", endTime);
            }

            $('#display_from_year').text(fromYear);
            $('#display_to_year').text(toYear);

            fromMonth = fromMonth.length == 1 ? '0' + fromMonth : fromMonth;
            toMonth = toMonth.length == 1 ? '0' + toMonth : toMonth;

            if (fromMonth < 10) {
                fromMonth = "0" + fromMonth;
            }

            if (toMonth < 10) {
                toMonth = "0" + toMonth;
            }

            $('#display_from_month').text(fromMonth);
            $('#display_to_month').text(toMonth);

            bindMonthColums(PMS.utility.getMonthCols(startTime, endTime));
        }

        // Bind colums by time duration on data table
        function bindMonthColums(colums) {
            var html = '';
            for (var i = 0; i < colums.length; i++) {
                html += '<th class="th-month sorting_disabled">' + colums[i] + '</th>';
            }

            $('.tbl-right thead tr').empty().append(html);
        }

        function SearchWorkList() {
            $('.validation-summary-errors').remove();

            // check valid date
            var fromDate = $('#Condition_StartMonth').val();
            var toDate = $('#Condition_EndMonth').val();
            var errFromDate = PMS.utility.validDate(fromDate, 'yyyy/mm', '期間（開始）');
            var errToDate = PMS.utility.validDate(toDate, 'yyyy/mm', '期間（終了）');
            var invalidMess = [];

            if (fromDate.length === 0) {
                invalidMess.push("@string.Format(Messages.E002, "期間（開始）")");
            } else if (errFromDate != null) {
                invalidMess.push(errFromDate);
            }

            if (toDate.length === 0) {
                invalidMess.push("@string.Format(Messages.E002, "期間（終了）")");
            } else if (errToDate != null) {
                invalidMess.push(errToDate);
            }

            if (invalidMess.length == 0 && fromDate.length > 0 && toDate.length > 0 && errFromDate == null && errToDate == null) {
                // compare date
                if (!PMS.utility.compareDate(fromDate, toDate, 'yyyy/mm')) {
                    invalidMess.push('@string.Format(Messages.E027)');
                }

                // valid max duration time
                if (!PMS.utility.compareDateRange(fromDate, toDate, 5)) {
                    invalidMess.push('期間は6ヶ月以内で設定してください。');
                }
            }

            if (invalidMess.length > 0) {
                PMS.utility.showClientError(invalidMess);
                return false;
            }
            var $location = $("#Condition_LOCATION_ID");
            if ($location.val() != null && $location.find('option').length == $location.val().length) {
                $location.val('');
            }

            saveCondition();

            sort_colum = 0;
            sort_type = 'asc';
            $('#sort_colum').val(sort_colum);
            $('#sort_type').val(sort_type);

            bindTimeDuration(0);

            $('.pace.pace-inactive').removeClass('pace-inactive').addClass('pace-active');
            $("#onloadDivSales").show(function () {
                dataTable.fnPageChange('first');
                if ($('#btnChangeModeOn').css('display') == 'none') {
                    StopFilterData();
                }
                else {
                    FilterData();
                }
            });
            $('#btnSearch').attr('disabled', 'disabled');
        }

        $(document).off('table.dataTable tr th');
        $(document).on('focus', 'table.dataTable tr th', function () {
            sort_colum = $(this).index() + 1;
            sort_type = 'asc';

            if ($(this).hasClass('sorting_asc'))
                sort_type = 'desc';

            $('#sort_colum').val(sort_colum);
            $('#sort_type').val(sort_type);
        });

        $("button#btnSearch").click(function () {
            SearchWorkList();
        });

        $(document).bind('keypress', function (e) {
            var code = e.keyCode || e.which;
            if (code == 13) { //Enter keycode
                SearchWorkList();
            }
        });

        $("button#btnClear").click(function () {
            $("#Condition_DisplayName").val("");
            $("#Condition_LOCATION_ID").val("");
            $("#Condition_GroupId").val("");
            $('#Condition_StartMonth').val($('#default_start_date').val()).attr('value', $('#default_start_date').val());
            $('#Condition_EndMonth').val($('#default_end_date').val()).attr('value', $('#default_end_date').val());
            $("#Condition_DELETED_INCLUDE").prop('checked', false);
            $("#Condition_RETIREMENT_INCLUDE").prop('checked', false);

            $('.date.datepicker-months.start').datepicker("update", $('#default_start_date').val());
            $('.date.datepicker-months.end').datepicker("update", $('#default_end_date').val());
        });

        /// Handle the onChange event of the TimeUnit dropdown list
        $("#Condition_WorkTimeUnit").change(function () {
            $('#eff_type').val($('#Condition_WorkTimeUnit').val());
            var currPage = parseInt($('.dataTables_paginate .current').text()) - 1;
            if (!isNaN(currPage)) {
                dataTable.fnPageChange(currPage);
            }
        });

        /// Handle the onClick event of the Next Month button
        $("button#btnNextMonth").click(function () {
            $('#onloadDivSales').show();
            bindTimeDuration(1);
            dataTable.fnPageChange('first');
        });

        /// Handle the onClick event of the Prev Month button
        $("button#btnPrevMonth").click(function () {
            $('#onloadDivSales').show();
            bindTimeDuration(-1);
            dataTable.fnPageChange('first');
        });

        $(document).ajaxStop(function () {
            if ($('#btnChangeModeOn').length == 0 || $('#btnChangeModeOn').css('display') == 'none') {
                StopFilterData();
            }
            else {
                FilterData();
            }
        });

        $('button#btnExport').click(function () {
            $("#formList").submit();
        });

        $(document).off('.detail-link');
        $(document).on('click', '.detail-link', function () {
            $('#user_id').val($(this).attr("user_id"));
            $('#selected_year').val($(this).attr("selected_year"));
            $('#selected_month').val($(this).attr("selected_month"));

            $('#Condition_GroupId').val(currentConditionState.grID);
            $('#Condition_DisplayName').val(currentConditionState.usrName);
            $('#Condition_StartMonth').val(currentConditionState.fromDate);
            $('#Condition_EndMonth').val(currentConditionState.toDate);
            $('#Condition_LOCATION_ID').val(currentConditionState.locID);

            $("#formDetail").submit();
        });

        $('#btnChangeModeOn').click(function () {
            $(this).hide();
            $('#btnChangeModeOff').show();
            StopFilterData();
        })

        $('#btnChangeModeOff').click(function () {
            $(this).hide();
            $('#btnChangeModeOn').show();
            FilterData();
        })

        function FilterData() {
            $('a[logged="0"]').css('color', '#f00');
        }

        function StopFilterData() {
            $('a[logged="0"]').css('color', '#337ab7');
        }
    });

    function LoadOldValueOfControls() {
        var displayName = $('#user_name').val();
        if (displayName.length > 0) {
            $('#Condition_DisplayName').val(displayName);
        }

        var fromDate = $('#start_date').val();
        if (fromDate.length > 0) {
            $('#Condition_StartMonth').val(fromDate);
        }

        var toDate = $('#end_date').val();
        if (toDate.length > 0) {
            $('#Condition_EndMonth').val(toDate);
        }
    }
</script>
