@using ProjectManagementSystem.Resources;
@using ProjectManagementSystem.Common;
@model ProjectManagementSystem.ViewModels.PMS05001.PMS05001EditViewModel
@{
    ViewBag.Title = "所属登録";
}

<section class="content-header">
    <h1>
        @ViewBag.Title
    </h1>
</section>
<section class="content group-regist clearfix">
    @using (Html.BeginForm("EditGroup", "PMS05001", FormMethod.Post, new { @class = "form-horizontal", id = "frmGroupEdit" }))
    {
        <div id="title"></div>
        @Html.ValidationSummary(false)

        <div class="form-group">
            <label class="col-sm-2 control-label bold" for="group_name">所属名<span class="RequiredField">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(m => m.GroupInfo.group_name, new { @class = "form-control", maxlength = 100, size = 99 })
            </div>
        </div>

        <div class="form-group">
            <label class="col-sm-2 control-label bold" for="group_display_name">所属(表示名)<span class="RequiredField">*</span></label>
            <div class="col-sm-4">
                @Html.TextBoxFor(m => m.GroupInfo.display_name, new { @class = "form-control", maxlength = 100, size = 99 })
            </div>
        </div>

        <div class="form-group">
            <label class="col-sm-2 control-label bold">予算対象</label>
            <div class="col-sm-4">
                @Html.CheckBoxFor(m => m.BudgetSettingFlag, new { @class = "cos-flag" })
            </div>
        </div>
        <div class="form-group">
            <label class="col-sm-2 control-label bold" style="padding-right:0px;">稼働入力チェック対象</label>
            <div class="col-sm-4">
                @Html.CheckBoxFor(m=> m.CheckActualWorkFlag)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.GroupInfo.remarks, new { @class = "col-sm-2 control-label bold" })
            <div class="col-sm-4">
                @Html.TextAreaFor(m => m.GroupInfo.remarks, new { @class = "form-control candy-textArea", maxlength = 200, rows = 5 })
                <input type="hidden" class="set-max-width" />
            </div>
        </div>
        <div id="updateTime">
            <div class="form-group">
                @Html.LabelFor(m => m.GroupInfo.ins_date, new { @class = "col-sm-2 control-label bold" })
                <label class="control-label col-sm-4 insDate">@(Model.GroupInfo.ins_date != null ? Model.GroupInfo.ins_date.Value.ToString("yyyy-MM-dd HH:mm") : "")</label>
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.GroupInfo.ins_user, new { @class = "col-sm-2 control-label bold" })
                <label class="control-label col-sm-9 insUser">@(Model.GroupInfo.ins_user)</label>
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.GroupInfo.upd_date, new { @class = "col-sm-2 control-label bold" })
                <label class="control-label col-sm-4 updDate">@(Model.GroupInfo.upd_date != null ? Model.GroupInfo.upd_date.Value.ToString("yyyy-MM-dd HH:mm") : "")</label>
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.GroupInfo.upd_user, new { @class = "col-sm-2 control-label bold" })
                <label class="control-label col-sm-9 updUser">@(Model.GroupInfo.upd_user)</label>
            </div>
        </div>
        <div class="form-group btn-group-edit col-sm-12">
            @Html.HiddenFor(m => m.GroupInfo.group_id)
            <input type="hidden" name="OLD_DEL_FLAG" value="@Model.DeleteFlag.ToString()" />
            @Html.AntiForgeryToken()

            <button type="button" id="btnBack" name="Back" class="btn light btnNoStyleDisable"><i class="btn-icon btn-back"></i>戻る</button>
            <button type="button" id="btnSubmit" class="btn green"><i class="btn-icon btn-regist"></i> 登録</button>
            <label class="bold" id="deleteFlag">
                @Html.CheckBoxFor(m => m.DeleteFlag)
                削除
            </label>
        </div>
    }
</section>

<script type="text/javascript">
    var maxWidth =$(".set-max-width").css("max-width").slice(0, $(".set-max-width").css("max-width").length - 2); // set max-width of textarea
    $(document).ready(function () {
        $(".content-wrapper").addClass("content-edit-wrapper");

        PMS.utility.imeControl($("#GroupInfo_group_name, #GroupInfo_display_name, #GroupInfo_remarks"), 'active');
        PMS.utility.focusTextbox();

        if ($('#GroupInfo_group_id').val() === '0') {
            $('#updateTime, #deleteFlag').hide();
        }

        // get max-width of textarea when resize manu bar left
        window.addEventListener('resize', function (event) {
            maxWidth = $(".set-max-width").css("max-width").slice(0, $(".set-max-width").css("max-width").length - 2);
            //handle change textare when resize menu bar left
            if ($('body').hasClass('sidebar-collapse') === true) {
                // case close when page first load
                $(".candy-textArea").css("max-width",(parseInt(maxWidth,10) + 115)+ "px");
            }
            else{
                $(".candy-textArea").css("max-width",parseInt(maxWidth,10)+ "px");
            }
        });
        //end get max-width of textarea when resize manu bar left
    });

    //handle change textare when resize menu bar left
    if ($('body').hasClass('sidebar-collapse') === true) {
        // case close when page first load
        $(".candy-textArea").css("max-width",(parseInt(maxWidth,10) + 115)+ "px");
    }
    $(document).off('a.sidebar-toggle i');
    $(document).on('click', 'a.sidebar-toggle i', function () {
        if ($('body').hasClass('sidebar-collapse') === true) {
            // close
            $(".candy-textArea").css("max-width",(parseInt(maxWidth,10) + 115)+ "px");
        } else {
            // open
            $(".candy-textArea").css("max-width",(parseInt($(".candy-textArea").css("max-width").slice(0, $(".candy-textArea").css("max-width").length - 2),10) - 115)+ "px");
        }
    });
    //end handle change textare when resize menu bar left

    function validateData() {
        var Constant = {
            GROUP_NAME: '所属名',
            GROUP_DISPLAY_NAME: '所属(表示名)',
            REMARK: '備考',
            ERR_REQUIRED: 'は必須項目です。',
            ERR_STRING_LENGTH: '{0}は{1}文字以内で入力してください。',
            MAX_NAME_LENGTH: '100',
            MAX_REMARK_LENGTH: '200'
        };
        var invalidMess = [];
        var groupName = $("#GroupInfo_group_name").val();
        var invalidGroupName = false;

        groupName = $.trim(groupName);
        $("#GroupInfo_group_name").val(groupName);

        if (groupName.length === 0) { // required group name
            invalidMess.push(Constant.GROUP_NAME + Constant.ERR_REQUIRED);
            invalidGroupName = true;
        }

        if (groupName.length > 100) { // valid string length
            invalidMess.push(Constant.ERR_STRING_LENGTH.replace('{0}', Constant.GROUP_NAME).replace('{1}', Constant.MAX_NAME_LENGTH));
            invalidGroupName = true;
        }

        if (invalidGroupName)
            $("label[for='group_name']").addClass("label-validation-error");

        var groupDisplayName = $("#GroupInfo_display_name").val();
        var invalidGroupDisplayName = false;

        groupDisplayName = $.trim(groupDisplayName);
        $("#GroupInfo_display_name").val(groupDisplayName);

        if (groupDisplayName.length === 0) { // required display name
            invalidMess.push(Constant.GROUP_DISPLAY_NAME + Constant.ERR_REQUIRED);
            invalidGroupDisplayName = true;
        }

        if (groupDisplayName.length > 100) { // valid string length
            invalidMess.push(Constant.ERR_STRING_LENGTH.replace('{0}', Constant.GROUP_DISPLAY_NAME).replace('{1}', Constant.MAX_NAME_LENGTH));
            invalidGroupDisplayName = true;
        }

        if (invalidGroupDisplayName)
            $("label[for='group_display_name']").addClass("label-validation-error");

        if ($("#GroupInfo_remarks").val().length > 200) {
            invalidMess.push(Constant.ERR_STRING_LENGTH.replace('{0}', Constant.REMARK).replace('{1}', Constant.MAX_REMARK_LENGTH));
            $("label[for='GroupInfo_remarks']").addClass("label-validation-error");
        }

        return invalidMess;
    }

    // Submit register form
    $('button#btnSubmit').click(function () {
        PMS.utility.removeValidationError();
        var invalidMess = validateData();
        if (invalidMess.length > 0) {
            PMS.utility.showClientError(invalidMess);
            return false;
        }

        PMS.utility.IsAuthenticateTimeout('@string.Format(Messages.I006)', '#frmGroupEdit');
    });

    $("#frmGroupEdit").submit(function (e) {
        var formData = new FormData(this);

        $.ajax({
            url: $(this).attr("action"),
            type: 'POST',
            data: formData,
            mimeType: "multipart/form-data",
            contentType: false,
            cache: false,
            processData: false,
            success: function (response) {
                var data = JSON.parse(response);

                BootstrapDialog.closeAll();

                if (data.statusCode == 201) { // update success
                    $("#frmGroupEdit").css('visibility', 'hidden');

                    PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.INFORMATION'), data.message, null, null, function () {
                        $('#GroupInfo_group_id').val(data.groupID);

                        if (data.groupID > 0) {
                            $('.insDate').text(data.insDate);
                            $('.insUser').text(PMS.utility.nvl(data.insUser, ''));
                        }

                        $('.updDate').text(data.updDate);
                        $('.updUser').text(data.updUser);

                        $("#DeleteFlag").prop('checked', data.deleted);
                        $('input[name="OLD_DEL_FLAG"]').val(data.deleted);

                        $('#updateTime, #deleteFlag').show();
                        $("#frmGroupEdit").css('visibility', '');
                    });
                }

                if (data.statusCode == 500) { // Exception
                    $("#frmGroupEdit").css('visibility', 'hidden');
                    PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.WARNING'), data.message, '/PMS05001');
                }

                if (typeof (data.ErrorMessages) !== 'undefined') // invalid data
                    PMS.utility.showClientError(data.ErrorMessages);
            },
            error: function (error) {
                if (error.status == 419) { //419: Authentication Timeout
                    $("#frmGroupEdit").css('visibility', 'hidden');
                    window.location.href = '/PMS01001/Login/timeout';
                }
            }
        });

        e.preventDefault(); // prevent Default action
    });

    $(document).off('#btnBack');
    $(document).on('click', '#btnBack', function () {
        $.ajax({
            type: "POST",
            url: '/Common/SetButtonBackSession',
            dataType: 'json',
            data: null,
            success: function () {
                window.location.href = "/PMS05001";
            },
            error: function (error) {
            }
        });
    });
</script>
