@model ProjectManagementSystem.ViewModels.PMS10003.PMS10003CompanyDetailViewModel

@using ProjectManagementSystem.Common;
@using ProjectManagementSystem.Resources;
@using ModelState = System.Web.WebPages.Html.ModelState

@{
    ViewBag.Title = "会社情報詳細";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<section class="content-header">
    <h1>
        @ViewBag.Title
    </h1>
</section>
<section class="content company_detail clearfix">
    @using (Html.BeginForm("EditCompanyDetail", "PMS10003", FormMethod.Post,
                            new { @class = "form-horizontal", id = "frmCompanyDetailEdit", enctype = "multipart/form-data" }))
    {
        <div id="title"></div>
        @Html.ValidationSummary(false)

        <div class="form-group">
            <label class="col-sm-2 control-label label-holiday-type bold @ViewBag.ErrorClass">規定休日</label>
            <div class="col-sm-8">
                @Html.CheckBoxFor(m => m.HOLIDAY_TYPE_LIST[0].isHoliday, new { @class = "default_holiday_chkbox" })
                <label class="label_weekday" for="HOLIDAY_TYPE_LIST_0__isHoliday">
                    日曜日
                </label>
                @Html.CheckBoxFor(m => m.HOLIDAY_TYPE_LIST[1].isHoliday, new { @class = "default_holiday_chkbox" })
            <label class="label_weekday" for="HOLIDAY_TYPE_LIST_1__isHoliday">
                月曜日
            </label>
                @Html.CheckBoxFor(m => m.HOLIDAY_TYPE_LIST[2].isHoliday, new { @class = "default_holiday_chkbox" })
                <label class="label_weekday" for="HOLIDAY_TYPE_LIST_2__isHoliday">
                    火曜日
                </label>
                @Html.CheckBoxFor(m => m.HOLIDAY_TYPE_LIST[3].isHoliday, new { @class = "default_holiday_chkbox" })
            <label class="label_weekday" for="HOLIDAY_TYPE_LIST_3__isHoliday">
                水曜日
            </label>
                @Html.CheckBoxFor(m => m.HOLIDAY_TYPE_LIST[4].isHoliday, new { @class = "default_holiday_chkbox" })
            <label class="label_weekday" for="HOLIDAY_TYPE_LIST_4__isHoliday">
                木曜日
            </label>
                @Html.CheckBoxFor(m => m.HOLIDAY_TYPE_LIST[5].isHoliday, new { @class = "default_holiday_chkbox" })
            <label class="label_weekday" for="HOLIDAY_TYPE_LIST_5__isHoliday">
                金曜日
            </label>
                @Html.CheckBoxFor(m => m.HOLIDAY_TYPE_LIST[6].isHoliday, new { @class = "default_holiday_chkbox" })
            <label class="label_weekday" for="HOLIDAY_TYPE_LIST_6__isHoliday">
                土曜日
            </label>
            </div>
        </div>

        <div class="form-group">
            <label class="col-sm-2 control-label label-holiday-type bold @ViewBag.ErrorClass">チェック起点曜日</label>
            <div class="col-sm-8">
                @Html.CheckBoxFor(m => m.CHECK_POINT_WEEK_LIST[0].isCheckPointWeek, new { @class = "check_day_chkbox" })
                <span class="label_weekday">
                    @Html.LabelTitle("CHECK_POINT_WEEK_LIST_0__isCheckPointWeek", "日曜日", 0)
                </span>

                @Html.CheckBoxFor(m => m.CHECK_POINT_WEEK_LIST[1].isCheckPointWeek, new { @class = "check_day_chkbox" })
                <span class="label_weekday">
                    @Html.LabelTitle("CHECK_POINT_WEEK_LIST_1__isCheckPointWeek", "月曜日", 0)
                </span>
                @Html.CheckBoxFor(m => m.CHECK_POINT_WEEK_LIST[2].isCheckPointWeek, new { @class = "check_day_chkbox" })
                <span class="label_weekday">
                    @Html.LabelTitle("CHECK_POINT_WEEK_LIST_2__isCheckPointWeek", "火曜日", 0)
                </span>
                @Html.CheckBoxFor(m => m.CHECK_POINT_WEEK_LIST[3].isCheckPointWeek, new { @class = "check_day_chkbox" })
                <span class="label_weekday">
                    @Html.LabelTitle("CHECK_POINT_WEEK_LIST_3__isCheckPointWeek", "水曜日", 0)
                </span>
                @Html.CheckBoxFor(m => m.CHECK_POINT_WEEK_LIST[4].isCheckPointWeek, new { @class = "check_day_chkbox" })
                <span class="label_weekday">
                    @Html.LabelTitle("CHECK_POINT_WEEK_LIST_4__isCheckPointWeek", "木曜日", 0)
                </span>
                @Html.CheckBoxFor(m => m.CHECK_POINT_WEEK_LIST[5].isCheckPointWeek, new { @class = "check_day_chkbox" })
                <span class="label_weekday">
                    @Html.LabelTitle("CHECK_POINT_WEEK_LIST_5__isCheckPointWeek", "金曜日", 0)
                </span>
                @Html.CheckBoxFor(m => m.CHECK_POINT_WEEK_LIST[6].isCheckPointWeek, new { @class = "check_day_chkbox" })
                <span class="label_weekday">
                    @Html.LabelTitle("CHECK_POINT_WEEK_LIST_6__isCheckPointWeek", "土曜日", 0)
                </span>
            </div>
        </div>
        <div class="form-group">
            <label class="col-sm-2 control-label label-work-time-days bold">規定労働時間/日<span class="RequiredField">*</span></label>
            <div class="col-sm-1 select-left">
                @Html.DropDownListFor(m => m.COMPANY_SETTING.default_work_time_days, Model.DEFAULT_WORK_TIME_LIST, new { @class = "form-control" }, false)
            </div>
        </div>

        <div class="form-group">
            <label class="col-sm-2 control-label label-password-input-limit bold">パスワード入力上限<span class="RequiredField">*</span></label>
            <div class="col-sm-1 select-left">
                @Html.DropDownListFor(m => m.COMPANY_SETTING.password_input_limit, Model.PASSWORD_INPUT_LIMIT_LIST, new { @class = "form-control" }, false)
            </div>
            <div class="col-sm-5 note-message"><span class="Notise">※パスワード入力間違いの許容回数</span></div>
        </div>

        <div class="form-group">
            <label class="col-sm-2 control-label label-password-effective-month bold">パスワード有効期限（月）<span class="RequiredField">*</span></label>
            <div class="col-sm-1 select-left">
                @Html.DropDownListFor(m => m.COMPANY_SETTING.password_effective_month, Model.PASSWORD_EFFECTIVE_TIME_LIST, new { @class = "form-control" }, false)
            </div>
            <div class="col-sm-5 note-message"><span class="Notise">※0が設定された場合は「無期限」となります</span></div>
        </div>

        <div class="form-group">
            <label class="col-sm-2 control-label label-calculation-type bold">小数計算区分<span class="RequiredField">*</span></label>
            <div class="col-sm-2 select-left">
                @Html.DropDownListFor(m => m.COMPANY_SETTING.decimal_calculation_type, Model.CACULATE_TYPE_LIST, "選択してください", new { @class = "form-control" })
            </div>
            <div class="col-sm-5 note-message"><span class="Notise">※金額計算に適用されます</span></div>
        </div>

        <div class="form-group">
            <label class="col-sm-2 control-label label-work-time-unit bold">勤務時間単位（分）<span class="RequiredField">*</span></label>
            <div class="col-sm-2 select-left">
                @Html.DropDownListFor(m => m.COMPANY_SETTING.working_time_unit_minute, Model.WORK_TIME_UNIT_LIST, "選択してください", new { @class = "form-control" })
            </div>
            <div class="col-sm-5 note-message"><span class="Notise">※CSV勤務データ取込時の時間調整</span></div>
        </div>

        <div class="form-group">
            <label class="col-sm-2 control-label label-account_closing_month bold">決算月<span class="RequiredField">*</span></label>
            <div class="col-sm-1 select-left">
                @Html.TextBox(m => m.COMPANY_SETTING.account_closing_month, new { @class = "numeric form-control right account_closing_month ", maxlength = 2 })
            </div>
            <div class="col-sm-1 closing-date-box"><span class="closing-date">月</span></div>
        </div>

        <div class="form-group">
            <label class="col-sm-2 control-label label-work-closing-date bold">勤務締め日<span class="RequiredField">*</span></label>
            <div class="col-sm-1 select-left">
                @Html.TextBox(m => m.COMPANY_SETTING.work_closing_date, new { @class = "form-control right", maxlength = 2 })
            </div>
            <div class="col-sm-1 closing-date-box"><span class="closing-date">日</span></div>
        </div>

        <div class="form-group title-holiday">
            <label class="col-sm-2 control-label">&nbsp;</label>
            <div class="col-sm-7 title-holiday-list">
                <button type="button" class="btn dark bt-space pull-left"><i class="btn-icon btn-add"></i>追加</button>

                <div class="pull-left">
                    <div class="top-title @ViewBag.ErrorClassNonWorking">日付</div>
                    <div class="top-title title-holiday-name">休日名</div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <label class="col-sm-2 control-label label-special-holiday bold">休日設定</label>
            <div class="col-sm-8">
                <button type="button" class="btnAddHoliday btn dark pull-left"><i class="btn-icon btn-add"></i>追加</button>
                <div class="div_special_holiday row_plan pull-left">
                    <div class="special-holiday">
                        @if (Model.SPECIAL_HOLIDAY_LIST.Count == 0)
                        {
                            <div class="target-content">
                                <span class="date datepicker-days">
                                    <input name="SPECIAL_HOLIDAY_LIST[0].holiday_date" class="holiday-date" type="text" maxlength="10" />
                                    <button type="button" class="btn light btn-date"><i class="btn-icon btn-calendar"></i></button>
                                </span>
                                <input class="target holiday-name" maxlength="50" name="SPECIAL_HOLIDAY_LIST[0].holiday_name" type="text">
                                <a class="btnDeleteHoliday lbl-action">削除</a>
                            </div>
                        }
                        else
                        {
                            for (int i = 0; i < Model.SPECIAL_HOLIDAY_LIST.Count; i++)
                            {
                                <div class="target-content">
                                    <span class="date datepicker-days">
                                        @Html.TextBox(m => m.SPECIAL_HOLIDAY_LIST[i].holiday_date, "{0:yyyy/MM/dd}", new { @class = "holiday-date", maxlength = 10 })
                                        <button type="button" class="btn light btn-date"><i class="btn-icon btn-calendar"></i></button>
                                    </span>
                                    @Html.TextBoxFor(m => m.SPECIAL_HOLIDAY_LIST[i].holiday_name, new { @class = "holiday-name ", maxlength = 50 })
                                    <a class="btnDeleteHoliday lbl-action">削除</a>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <label class="col-sm-2 control-label bold">登録日時</label>
            @Html.Label("", !string.IsNullOrEmpty(@Model.COMPANY_SETTING.ins_date.ToString()) ? @Model.COMPANY_SETTING.ins_date.ToString("yyyy/MM/dd HH:mm") : "", new { @class = "font-normal col-sm-4 control-label", id = "insDate" })
        </div>

        <div class="form-group">
            <label class="col-sm-2 control-label bold">登録者</label>
            @Html.Label("", @Model.COMPANY_SETTING.user_regist, new { @class = "col-sm-8 control-label", id = "insUser" })
        </div>

        <div class="form-group">
            <label class="col-sm-2 control-label bold">更新日時</label>
            @Html.Label("", !string.IsNullOrEmpty(@Model.COMPANY_SETTING.upd_date.ToString()) ? @Model.COMPANY_SETTING.upd_date.ToString("yyyy/MM/dd HH:mm") : "", new { @class = "font-normal col-sm-4 control-label", id = "updDate" })
        </div>

        <div class="form-group">
            <label class="col-sm-2 control-label bold">更新者</label>
            @Html.Label("", @Model.COMPANY_SETTING.user_update, new { @class = "col-sm-8 control-label", id = "updUser" })
        </div>

        <div class="form-group btn-group-edit">
            <div class="col-sm-4">
                @Html.AntiForgeryToken()
                <button type="button" id="Back" name="Back" class="btn light" onclick='javascript:window.location = "@Url.Action("CompanyInfo", "PMS10003")";'><i class="btn-icon btn-back"></i>戻る</button>
                <button type="button" id="btnSubmit" class="btn green"><i class="btn-icon btn-regist"></i> 登録</button>
            </div>
        </div>
    }
</section>

<script type="text/javascript">
    $(document).ready(function () {
        $(".content-wrapper").addClass("content-edit-wrapper");
    });

    $(function () {
        PMS.utility.imeControl($(".holiday-name"), 'active');
        PMS.utility.imeControl($("#COMPANY_SETTING_work_closing_date, .holiday-date"), 'disable');
        PMS.utility.focusTextbox();

        $(document).on('click', 'button#btnSubmit', function () {
            PMS.utility.removeValidationError();
            var invalidMess = validateData();
            if (invalidMess.length > 0) {
                PMS.utility.showClientError(invalidMess);
                return false;
            }
            PMS.utility.replaceAllMoney();
            PMS.utility.IsAuthenticateTimeout('@string.Format(Messages.I006)', '#frmCompanyDetailEdit');
        });

        $("#frmCompanyDetailEdit").submit(function (e) {
            var formData = new FormData(this);

            $.ajax({
                url: $(this).attr("action"),
                type: 'POST',
                data: formData,
                mimeType: "multipart/form-data",
                contentType: false,
                cache: false,
                processData: false,
                success: function (response) {
                    var data = JSON.parse(response);
                    BootstrapDialog.closeAll();

                    if (data.statusCode == 201) { // update success
                        $("#frmCompanyDetailEdit").css('visibility', 'hidden');
                        PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.INFORMATION'), data.message, null, null, function () {
                            $('#insDate').text(data.insDate);
                            $('#insUser').text(data.insUser === null ? '': data.insUser);
                            $('#updDate').text(data.updDate);
                            $('#updUser').text(data.updUser);

                            $('.target-content').each(function () {
                                if ($(this).find('input.holiday-date').val() === "" && $(this).find('input.holiday-name ').val() === "" && $('.target-content').length > 1)
                                    $(this).remove();
                            });

                            resetArrHoliday();

                            $("#frmCompanyDetailEdit").css('visibility', '');
                        });
                    }

                    if (data.statusCode == 500) { // Exception
                        $("#frmCompanyDetailEdit").css('visibility', 'hidden');
                        PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.WARNING'), data.message, '/PMS01003/CompanyDetail');
                    }

                    if (typeof (data.ErrorMessages) !== 'undefined') // invalid data
                        PMS.utility.showClientError(data.ErrorMessages);
                },
                error: function (error) {
                    if (error.status == 419) {//419: Authentication Timeout
                        $("#frmCompanyDetailEdit").css('visibility', 'hidden');
                        window.location.href = '/PMS01001/Login/timeout';
                    }
                }
            });

            e.preventDefault(); // prevent Default action
        });

        function validateData() {
            var invalidMess = [];

            if ($('#COMPANY_SETTING_decimal_calculation_type').val() === '') {
                invalidMess.push("@string.Format(Messages.E002, "小数計算区分")");
                $('.label-calculation-type').addClass('label-validation-error');
            }

            if ($('#COMPANY_SETTING_working_time_unit_minute').val() === '') {
                invalidMess.push("@string.Format(Messages.E002, "勤務時間単位（分）")");
                $('.label-work-time-unit').addClass('label-validation-error');
            }

            var work_closing_date = $('#COMPANY_SETTING_work_closing_date').val();
            // check required of work_closing_date
            if (work_closing_date.length === 0) {
                invalidMess.push("@string.Format(Messages.E002, "勤務締め日")");
                $('.label-work-closing-date').addClass('label-validation-error');
            }

            if (parseInt(work_closing_date) > 31 || parseInt(work_closing_date) < 1) {
                invalidMess.push('@string.Format(Messages.E019, "勤務締め日", "1", "31")');
                $('.label-work-closing-date').addClass('label-validation-error');
            }

            var account_closing_month = $('#COMPANY_SETTING_account_closing_month').val();
            // check required of work_closing_date
            if (account_closing_month.length === 0) {
                invalidMess.push("@string.Format(Messages.E002, "決算月")");
                $('.label-account_closing_month').addClass('label-validation-error');
            }

            if (parseInt(account_closing_month) > 12 || parseInt(work_closing_date) < 1) {
                invalidMess.push('@string.Format(Messages.E019, "決算月", "1", "12")');
                $('.label-account_closing_month').addClass('label-validation-error');
            }


            // check max length, format of holiday date
            $('input.holiday-date').each(function () {
                var holidayDate = $(this).val();
                if (holidayDate.length > 10) {
                    invalidMess.push("@string.Format(Messages.E020, "休日", "10")");
                    $('.label-holiday-date').addClass('label-validation-error');
                    $('.label-special-holiday').addClass('label-validation-error');
                    return false;
                }
                var DATE_FORMAT = 'yyyy/mm/dd';
                var errHolidayDate = PMS.utility.validDate(holidayDate, DATE_FORMAT, "休日");
                if (errHolidayDate != null) {
                    invalidMess.push(errHolidayDate);
                    //$('.label-holiday-date').addClass('label-validation-error');
                    $('.label-special-holiday').addClass('label-validation-error');
                    return false;
                }
            });

            // check max length of holiday name
            $('input.holiday-name').each(function () {
                var holidayName = $(this).val();
                if (holidayName.length > 50) {
                    invalidMess.push("@string.Format(Messages.E020, "休日名", "50")");
                    //$('.label-holiday-name').addClass('label-validation-error');
                    $('.label-special-holiday').addClass('label-validation-error');
                    return false;
                }
            });

            // check default holiday type
            if ($("input.default_holiday_chkbox:checked").length >= 7) {
                invalidMess.push("@Messages.E061");
                $('.label-holiday-type').addClass('label-validation-error');
            }
            else {
                // validate working day in months
                // create list of default holiday
                var arrDefaultHoliday = [];
                for (var i = 0; i < 7; i++) {
                    if ($("input#HOLIDAY_TYPE_LIST_" + i + "__isHoliday:checked").length > 0) {
                        arrDefaultHoliday.push(i);
                    }
                }
                // create list of special holiday year-month
                var arrSpecialHoliday = [];
                $('input.holiday-date').each(function () {
                    if ($(this).val().length != 10) {
                        return;
                    }
                    var holidayYearMonth = $(this).val().substring(0, 7);
                    if ($.inArray(holidayYearMonth, arrSpecialHoliday) == -1) {
                        arrSpecialHoliday.push(holidayYearMonth);
                    }
                });
                // check working day of each month
                $.each(arrSpecialHoliday, function (index, holidayYearMonth) {
                    if (isNonOfWorkingDay(holidayYearMonth, arrDefaultHoliday)) {
                        invalidMess.push("@Messages.E062");
                        $('.label-holiday-type').addClass('label-validation-error');
                        $('.label-holiday-date').addClass('label-validation-error');
                        return false;
                    }
                });
            }

            //check Check point week
            var checkPointWeekSelected = false;
            $('input.check_day_chkbox').each(function () {
                if ($(this).prop("checked") == true) {
                    checkPointWeekSelected = true;
                    return;
                }
            });
            if (!checkPointWeekSelected) {
                invalidMess.push("@Messages.E071");
            }

            return invalidMess;
        }
        var oldInputVal = '';
        $(document).off('#COMPANY_SETTING_account_closing_month');
        $(document).on('change', '#COMPANY_SETTING_account_closing_month', function () {
            if(isNaN($(this).val())){
                $(this).val(oldInputVal);
                return;
            }
        });
        $(document).off('#COMPANY_SETTING_account_closing_month');
        $(document).on('focusout', '#COMPANY_SETTING_account_closing_month', function () {
            if(parseInt($(this).val(),10) === 0){
                $(this).val('');
            }
        });

        $(document).on('keypress', '.account_closing_month', function () {
            var charCode = (this.which) ? this.which : event.keyCode;
            if (charCode == 59 || charCode == 46)
                return true;
            if (charCode > 31 && (charCode < 48 || charCode > 57))
                return false;
            return true;
        });

        $(document).on('change', '.account_closing_month', function () {
            if(parseInt($("#COMPANY_SETTING_account_closing_month").val(),10) > 12 || parseInt($("#COMPANY_SETTING_account_closing_month").val(),10) <= 0 ){
                $("#COMPANY_SETTING_account_closing_month").val("");
            }
        });


        function isNonOfWorkingDay(holidayYearMonth, arrDefaultHoliday) {
            var ym = new Object();
            ym.year = parseInt(holidayYearMonth.substring(0, 4));
            ym.month = parseInt(holidayYearMonth.substring(5, 7));
            var numOfdays = daysInMonth(ym.month, ym.year);
            for (var i = 1; i <= numOfdays; i++) {
                var date = new Date(ym.year, ym.month - 1, i);
                if ($.inArray(date.getDay(), arrDefaultHoliday) == -1
                    && !isInSpecialHoliday(date)) {
                    return false;
                }
            }
            return true;
        }

        function isInSpecialHoliday(date) {
            var returnValue = false;
            $('input.holiday-date').each(function () {
                var holidayDate = $(this).val();
                if (Date.parse(date) == Date.parse(holidayDate)) {
                    returnValue = true;
                }
            });
            return returnValue;
        }

        function daysInMonth(month, year) {
            return new Date(year, month, 0).getDate();
        }

        $(document).off('input.holiday-date');
        $(document).on('change', 'input.holiday-date', function () {
            var holidayDate = $(this).val();
            var isExisted = false;

            $(this).addClass('itself');
            $('input.holiday-date:not(.itself)').each(function () {
                if (holidayDate == $(this).val() && typeof ($(this).val()) == 'string' && $(this).val().length > 0) {
                    isExisted = true;
                    return;
                }
            });
            $(this).removeClass('itself');

            if (isExisted) {
                PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.WARNING'), '既に登録されている日付です。');
                $(this).val('');
                return;
            }
        });

        // Action add a risk
        $(document).off('button.btnAddHoliday');
        $(document).on('click', 'button.btnAddHoliday', function () {
            $('.target-content').last().after($('.target-content').first().prop('outerHTML'));
            var $targetLast = $('.target-content').last();
            $targetLast.find('.holiday-date').val('');
            $targetLast.children('.holiday-name').val('');
            $targetLast.children(".date.datepicker-days").datepicker({
                autoclose: true,
                language: 'ja'
            });
            $targetLast.children('.date.datepicker-days').children('input').off('focus');

            resetArrHoliday();
        });

        $(document).off('.btnDeleteHoliday');
        $(document).on('click', '.btnDeleteHoliday', function () {
            $targetDel = $(this).parent();
            if ($('.target-content').length > 1) {
                $targetDel.remove();
                resetArrHoliday();
            } else {
                $targetDel.find('.holiday-date').val('');
                $targetDel.find('.holiday-date ').empty();
                $targetDel.children('.holiday-name').val('');
                $targetDel.children('.holiday-name ').empty();
            }
        });

        // Reset name of textbox on holidays list
        function resetArrHoliday() {
            var $arrHoliday = $('.target-content');

            for (var i = 0; i < $arrHoliday.length; i++) {
                var targetHoliday = $arrHoliday[i];
                var txtDate = 'SPECIAL_HOLIDAY_LIST[' + i + '].holiday_date';
                var txtName = 'SPECIAL_HOLIDAY_LIST[' + i + '].holiday_name';
                $(targetHoliday).find('.holiday-date').attr('name', txtDate);
                $(targetHoliday).children('.holiday-name').attr('name', txtName);
            }
        }

        $('.check_day_chkbox').click(function () {
            var checked = $(this).prop("checked");
            if (checked) {
                $('.check_day_chkbox').prop("checked", false);
                $(this).prop("checked", true);
            }
            else {
                $('.check_day_chkbox').prop("checked", false);
            }
        });
    });
</script>
