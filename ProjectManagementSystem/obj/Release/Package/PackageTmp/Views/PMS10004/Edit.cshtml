@model ProjectManagementSystem.ViewModels.PMS10004.PMS10004EditViewModel
@using ModelState = System.Web.WebPages.Html.ModelState
@using ProjectManagementSystem.Common;
@using ProjectManagementSystem.Resources;

@{
    ViewBag.Title = "カテゴリ登録";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<section class="content-header">
    <h1>
        @ViewBag.Title
    </h1>
</section>

<section class="content clearfix category-regist">
    @using (Html.BeginForm("EditCategory", "PMS10004", FormMethod.Post, new { @class = "form-horizontal", id = "frmEdit" }))
    {
        <div id="title"></div>
        @Html.ValidationSummary(false)

        <div class="form-group">
            <label class="col-md-2 control-label label-category bold">カテゴリ<span class="RequiredField">*</span></label>
            <div class="col-md-4">
                @Html.TextBoxFor(m => m.CATEGORY.category, new { @class = "form-control category", maxlength = 50, size = 99 })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CATEGORY.remarks, new { @class = "col-md-2 control-label label-remarks bold " })
            <div class="col-md-4">
                @Html.TextAreaFor(m => m.CATEGORY.remarks, new { @class = "form-control candy-textArea", maxlength = 200, rows = 5 })
                <input type="hidden" class="set-max-width" />
            </div>
        </div>

        <div class="form-group title-target">
            <label class="col-md-2 control-label">&nbsp;</label>
            <div class="col-md-7">
                <button type="button" class="btn dark bt-space pull-left"><i class="btn-icon btn-add"></i>追加</button>

                <div class="pull-left">
                    <div class="top-title">サブカテゴリ</div>
                    <div class="top-title">備考</div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <label class="col-md-2 control-label label-sub-category bold">サブカテゴリ<span class="RequiredField">*</span></label>
            <div class="col-md-7">
                <button type="button" class="btn dark btnAddSubCategory pull-left"><i class="btn-icon btn-add"></i>追加</button>
                <div class="sub-category-list pull-left">
                    @if (Model.LIST_SUBCATEGORY.Count == 0)
                    {
                        <div class="target-content">
                            <input name="LIST_SUBCATEGORY[0].sub_category_id" type="hidden" class="sub_category_id" value="0">
                            <input class="sub_category" maxlength="50" name="LIST_SUBCATEGORY[0].sub_category" type="text" value="">
                            <input class="sub_category_remarks" maxlength="50" name="LIST_SUBCATEGORY[0].remarks" type="text" value="">
                            <a class="btnDeleteSub lbl-action">削除</a>
                        </div>
                    }
                    else
                    {
                        for (int i = 0; i < Model.LIST_SUBCATEGORY.Count; i++)
                        {
                            <div class="target-content old-category">
                                @Html.HiddenFor(m => m.LIST_SUBCATEGORY[i].sub_category_id, new { @class = "sub_category_id" })
                                @Html.HiddenFor(m => m.LIST_SUBCATEGORY[i].Delete, new { @class = "sub_category_delete" })
                                @Html.HiddenFor(m => m.LIST_SUBCATEGORY[i].sub_category_old)
                                @Html.HiddenFor(m => m.LIST_SUBCATEGORY[i].remarks_old)
                                @Html.TextBoxFor(m => m.LIST_SUBCATEGORY[i].sub_category, new { @class = "sub_category", maxlength = 50 })
                                @Html.TextBoxFor(m => m.LIST_SUBCATEGORY[i].remarks, new { @class = "sub_category_remarks", maxlength = 50 })
                                <a class="btnDeleteSub lbl-action">削除</a>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>

        <div id="updateTime">
            <div class="form-group">
                <label class="col-md-2 control-label bold">登録日時</label>
                @Html.Label("", !string.IsNullOrEmpty(@Model.CATEGORY.ins_date.ToString()) ? @Model.CATEGORY.ins_date.ToString("yyyy/MM/dd HH:mm") : "", new { @class = "col-md-9 control-label font-normal", id = "insDate" })
            </div>
            <div class="form-group">
                <label class="col-md-2 control-label bold">登録者</label>
                <label class="col-md-9 control-label" id="insUser">@Model.CATEGORY.user_regist</label>
            </div>
            <div class="form-group">
                <label class="col-md-2 control-label bold">更新日時</label>
                @Html.Label("", !string.IsNullOrEmpty(@Model.CATEGORY.upd_date.ToString()) ? @Model.CATEGORY.upd_date.ToString("yyyy/MM/dd HH:mm") : "", new { @class = "col-md-9 control-label font-normal", id = "updDate" })
            </div>
            <div class="form-group">
                <label class="col-md-2 control-label bold">更新者</label>
                <label class="col-md-9 control-label" id="updUser">@Model.CATEGORY.user_update</label>
            </div>
        </div>

        <div class="form-group btn-group-edit col-md-12">
            @Html.HiddenFor(m => m.CATEGORY.category_id)
            @Html.AntiForgeryToken()

            <button type="button" id="btnBack" name="Back" class="btn light btnNoStyleDisable"><i class="btn-icon btn-back"></i>戻る</button>
            <button type="button" id="btnSubmit" class="btn green"><i class="btn-icon btn-regist"></i> 登録</button>
            <label class="bold">
                @Html.CheckBoxFor(m => m.Delete)
                削除
            </label>
        </div>
    }
</section>

<script type="text/javascript">
    var maxWidth =$(".set-max-width").css("max-width").slice(0, $(".set-max-width").css("max-width").length - 2); // set max-width of textarea
    var html = '<div class="target-content">'
                +' <input type="hidden" class="sub_category_id" value="">'
                +' <input class="sub_category" maxlength="50" type="text" value="">'
                +' <input class="sub_category_remarks" maxlength="50" type="text" value="">'
                +' <a class="btnDeleteSub lbl-action">削除</a>'
                +' </div>';
    $(document).ready(function () {
        // get max-width of textarea when resize manu bar left
        window.addEventListener('resize', function (event) {
            maxWidth = $(".set-max-width").css("max-width").slice(0, $(".set-max-width").css("max-width").length - 2);
            //handle change textare when resize menu bar left
            if ($('body').hasClass('sidebar-collapse') === true) {
                // case close when page first load
                $(".candy-textArea").css("max-width",(parseInt(maxWidth,10) + 115)+ "px");
            }
            else{
                $(".candy-textArea").css("max-width",parseInt(maxWidth,10)+ "px");
            }
        });
        //end get max-width of textarea when resize manu bar left
    });

    $(function () {
        $(document).ready(function () {
            PMS.utility.focusTextbox();
            PMS.utility.imeControl($("#CATEGORY_category, #CATEGORY_remarks, .sub_category, .sub_category_remarks"), 'active');
            $(".content-wrapper").addClass("content-edit-wrapper");

            if ($('#CATEGORY_category_id').val() === '0') {
                $('#updateTime, #deleteFlag').hide();
            }
        });

        //handle change textare when resize menu bar left
        if ($('body').hasClass('sidebar-collapse') === true) {
            // case close when page first load
            $(".candy-textArea").css("max-width",(parseInt(maxWidth,10) + 115)+ "px");
        }
        $(document).off('a.sidebar-toggle i');
        $(document).on('click', 'a.sidebar-toggle i', function () {
            if ($('body').hasClass('sidebar-collapse') === true) {
                // close
                $(".candy-textArea").css("max-width",(parseInt(maxWidth,10) + 115)+ "px");
            } else {
                // open
                $(".candy-textArea").css("max-width",(parseInt($(".candy-textArea").css("max-width").slice(0, $(".candy-textArea").css("max-width").length - 2),10) - 115)+ "px");
            }
        });
        //end handle change textare when resize menu bar left


        $(document).off('button.btnAddSubCategory');
        $(document).on('click', 'button.btnAddSubCategory', function () {
            $('.target-content').last().after(html);
            resetArrSubCategory();
        });

        $(document).off('.btnDeleteSub');
        $(document).on('click', '.btnDeleteSub', function () {
            var $target = $(this).parent();
            var category_id = parseInt($('#CATEGORY_category_id').val());

            if (category_id > 0 && $target.hasClass('old-category')) {
                var param = {
                    subCategoryID: parseInt($target.children('.sub_category_id').val()),
                    categoryID: category_id
                };
                var targetPhases = PMS.utility.getDataByAjax('/PMS10004/GetTargetCategory', param);

                if (targetPhases.length > 0) {
                    PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.WARNING'), '@string.Format(Messages.E063)');
                    return;
                }

                $target.children('.sub_category_delete').val(true);
                $target.addClass('deleted').hide();
            } else {
                $target.remove();
            }

            if ($('div.target-content:not(.deleted)').length == 0) {
                $('.sub-category-list').prepend(html)
            }

            resetArrSubCategory();
        });

        //// Reset name of textbox on sub-category list
        function resetArrSubCategory() {
            $('.target-content').each(function(i, item) {
                var name_sub_category_id = 'LIST_SUBCATEGORY[' + i + '].sub_category_id';
                var name_sub_category = 'LIST_SUBCATEGORY[' + i + '].sub_category';
                var name_remarks = 'LIST_SUBCATEGORY[' + i + '].remarks';
                $(this).children('.sub_category_id').attr('name', name_sub_category_id);
                $(this).children('.sub_category').attr('name', name_sub_category);
                $(this).children('.sub_category_remarks').attr('name', name_remarks);

                if ($(this).hasClass('old-category')) {
                    var deleteItem = 'LIST_SUBCATEGORY[' + i + '].Delete';

                    $(this).children('.sub_category_delete').attr('name', deleteItem);
                } else {
                    $(this).children('.sub_category_id').val($(this).index() * -1);
                }
            });
        }

        function validateData() {
            var invalidMess = [];

            var category = $('#CATEGORY_category').val();
            var category_id = parseInt($('#CATEGORY_category_id').val());

            // check max length of category
            if (category.length > 50) {
                invalidMess.push("@string.Format(Messages.E020, "カテゴリ", "50")");
                $('.label-category').addClass('label-validation-error');
            }
            else if (category.length == 0) {
                invalidMess.push("@string.Format(Messages.E002, "カテゴリ")");
                $('.label-category').addClass('label-validation-error');
            }

            // check max length of category
            var remarks = $('#CATEGORY_remarks').val();
            if (remarks.length > 200) {
                invalidMess.push("@string.Format(Messages.E020, "備考", "200")");
                $('.label-remarks').addClass('label-validation-error');
            }

            var is_sub_category_err = false;
            var is_sub_category_remarks_err = false;
            var is_require_sub_err1 = false;
            var is_require_sub_err2 = false;
            $('.target-content:not(.deleted)').each(function () {
                var $targetSubCategory = $(this);

                if ($targetSubCategory.children('.sub_category').val().length > 50) {
                    invalidMess.push("@string.Format(Messages.E020, "サブカテゴリ", "50")");
                    is_sub_category_err = true;

                    return false;
                }

                if ($targetSubCategory.children('.sub_category_remarks').val().length > 50) {
                    invalidMess.push("@string.Format(Messages.E020, "備考", "50")");
                    $('.label-sub-category-remarks').addClass('label-validation-error');
                    is_sub_category_remarks_err = true;

                    return false;
                }

                if ($targetSubCategory.children('.sub_category').val().length == 0){
                    is_require_sub_err1 = true;

                    return false;
                }
            });
            if (is_sub_category_err || is_sub_category_remarks_err || is_require_sub_err1 || is_require_sub_err2) {
                invalidMess.push('@Messages.E058');
                $('.label-sub-category').addClass('label-validation-error');
            }

            return invalidMess;
        }

        $(document).on('click', 'button#btnSubmit', function () {
            resetArrSubCategory();
            PMS.utility.removeValidationError();
            var invalidMess = validateData();

            if (invalidMess.length > 0) {
                PMS.utility.showClientError(invalidMess);
                return false;
            }

            PMS.utility.IsAuthenticateTimeout('@string.Format(Messages.I006)', '#frmEdit');
        });

        $("#frmEdit").submit(function (e) {
            var formData = new FormData(this);

            $.ajax({
                url: $(this).attr("action"),
                type: 'POST',
                data: formData,
                mimeType: "multipart/form-data",
                contentType: false,
                cache: false,
                processData: false,
                success: function (response) {
                    var data = JSON.parse(response);

                    BootstrapDialog.closeAll();

                    if (data.statusCode == 201) { // update success
                        $("#frmEdit").css('visibility', 'hidden');

                        PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.INFORMATION'), data.message, null, null, function () {
                            $('#CATEGORY_category_id').val(data.categoryID);

                            if (data.categoryID > 0) {
                                $('#insDate').text(data.insDate);
                                $('#insUser').text(PMS.utility.nvl(data.insUser, ''));
                            }

                            $('#updDate').text(data.updDate);
                            $('#updUser').text(data.updUser);

                            $("#Delete").prop('checked', data.deleted);

                            var subCategoryHtml = '';

                            for (var i = 0; i < data.subCategoryList.length; i++) {
                                subCategoryHtml += '<div class="target-content old-category">'
                                    +' <input type="hidden" name="LIST_SUBCATEGORY[' + i +'].sub_category_id" class="sub_category_id" value="' + data.subCategoryList[i].sub_category_id + '">'
                                    +' <input type="hidden" name="LIST_SUBCATEGORY[' + i +'].sub_category_old" value="' + data.subCategoryList[i].sub_category_old + '">'
                                    +' <input type="hidden" name="LIST_SUBCATEGORY[' + i +'].remarks_old" value="' + data.subCategoryList[i].remarks_old + '">'
                                    +' <input class="sub_category_delete" name="LIST_SUBCATEGORY[' + i +'].Delete" type="hidden" value="False">'
                                    +' <input class="sub_category" name="LIST_SUBCATEGORY[' + i +'].sub_category" maxlength="50" type="text" value="' + data.subCategoryList[i].sub_category + '">'
                                    +' <input class="sub_category_remarks" name="LIST_SUBCATEGORY[' + i +'].remarks" maxlength="50" type="text" value="' + data.subCategoryList[i].remarks + '">'
                                    +' <a class="btnDeleteSub lbl-action">削除</a>'
                                    +' </div>';
                            }

                            $('.sub-category-list').empty().append(subCategoryHtml);

                            $('#updateTime, #deleteFlag').show();
                            $("#frmEdit").css('visibility', 'initial');
                        });
                    }

                    if (data.statusCode == 500) { // Exception
                        $("#frmEdit").css('visibility', 'hidden');
                        PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.WARNING'), data.message, '/PMS10004');
                    }

                    if (typeof (data.ErrorMessages) !== 'undefined') // invalid data
                        PMS.utility.showClientError(data.ErrorMessages);
                },
                error: function (error) {
                    if (error.status == 419) { //419: Authentication Timeout
                        $("#frmEdit").css('visibility', 'hidden');
                        window.location.href = '/PMS01001/Login/timeout';
                    }
                }
            });

            e.preventDefault(); // prevent Default action
        });

        $(document).off('#btnBack');
        $(document).on('click', '#btnBack', function () {
            $.ajax({
                type: "POST",
                url: '/Common/SetButtonBackSession',
                dataType: 'json',
                data: null,
                success: function () {
                    window.location.href = "/PMS10004";
                },
                error: function (error) {
                }
            });
        });
    });
</script>