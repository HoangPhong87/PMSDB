@using ProjectManagementSystem.Common;
@using ProjectManagementSystem.Resources;
@model ProjectManagementSystem.ViewModels.PMS06002.PMS06002DetailViewModel

@{
    ViewBag.Title = "個人稼働実績";
    ViewBag.FieldTitle = "メンバー情報";
    var currentUser = HttpContext.Current.Session[Constant.SESSION_LOGIN_USER] as LoginUser;
    var workTimeUnit = Constant.TimeUnit.Items.Contains(@Model.Condition.WorkTimeUnit) ? Constant.TimeUnit.Items[@Model.Condition.WorkTimeUnit] : "";
}
<div id="onloadDivSales">
</div>
@if ((currentUser.PlanFunctionList.Contains(Constant.FunctionID.ProjectPlanRegist) && currentUser.FunctionList.Contains(Constant.FunctionID.ProjectPlanRegist))
    || (currentUser.PlanFunctionList.Contains(Constant.FunctionID.ProjectPlanReadOnly) && currentUser.FunctionList.Contains(Constant.FunctionID.ProjectPlanReadOnly)))
{
    <input type="hidden" id="rolePlanDetail" value="true" />
    <form id="frmProjectPlan" method="POST" action='@Url.Action("Plan", "PMS06001")'>
        <input id="plan_projectId" name="plan_projectId" type="hidden" value="">
        <input id="read_only" name="read_only" type="hidden" value="1">
    </form>
}

<script type="text/javascript" charset="utf-8">
    $(function () {
        var uniqueId = "@Guid.NewGuid().ToString()";
        $("#tabId").val(uniqueId);
        SetEventBeforeUnload();
        $('.pace.pace-inactive').addClass('pace-active').removeClass('pace-inactive');
        $("#onloadDivSales").show();
        var allowLinkToProjectPlan = '@(currentUser.PlanFunctionList.Contains(Constant.FunctionID.ProjectPlanRegist) && currentUser.FunctionList.Contains(Constant.FunctionID.ProjectPlanRegist))' == 'True'
            || '@(currentUser.PlanFunctionList.Contains(Constant.FunctionID.ProjectPlanReadOnly) && currentUser.FunctionList.Contains(Constant.FunctionID.ProjectPlanReadOnly))' == 'True' ? true : false;
        var oSorting = {
            "bSort": true
        };
        var oPaginate = {
            "bPaginate": false,
            "iDisplayLength": parseInt(@App[ConfigurationKeys.LIST_ITEMS_PER_PAGE]),
            "bStateSave": false
        };
        var oServerSide = {
            "bServerSide": true,
            "sAjaxSource": '@Url.Action("SearchActualWorkDetail", "PMS06002")',
            "fnServerParams": serverParams,
            "fnDrawCallback": displayComplete,
            "fnInitComplete": bindData
        };
        var aoColumnDefs = [
            { "sName": "project_no", "bSortable": false, "bVisible": false, "aTargets": [0], "sWidth": "0%", "sClass": "cell_left" },
            { "sName": "project_name", "aTargets": [1], "sWidth": "25%", "sClass": "cell_left", "mRender": function (data, type, full) { return buildProjectLink(full[0], data); } },
            { "sName": "project_sys_id", "bSortable": false, "bVisible": allowLinkToProjectPlan, "aTargets": [2], "sWidth": "7%", "sClass": "cell_center", "mRender": function (data, type, full) { return buildProjecPlantLink(data, full[0]); } },
            { "sName": "rank", "aTargets": [3], "sWidth": "7%", "sClass": "cell_center" },
            { "sName": "progress", "aTargets": [4], "sWidth": "6%", "sClass": "cell_right" },
            { "sName": "plan_effort", "bSortable": false, "aTargets": [5], "sWidth": "12%", "sClass": "cell_center", "mRender": function (data, type, full) { return buildEffort(full[8], full[5]); } },
            { "sName": "personal_profit_rate", "bSortable": false, "aTargets": [6], "sWidth": "8%", "sClass": "cell_right" },
            { "sName": "project_actual_profit", "bSortable": false, "aTargets": [7], "sWidth": "7%", "sClass": "cell_right" },
        ];

        var dataTable = CreateDataTable('#InfoTable', oSorting, oPaginate, oServerSide, aoColumnDefs);

        function buildProjectLink(projectId, projectName) {
            var html = '';
            if ($("#role-project-detail").length > 0) {
                html = '<a href="#" class="project-detail-link text-overflow" title="' + projectName + '" project-id="' + projectId + '"><label class="longtext project-detail-name">' + projectName + '</label></a>';
            }
            else {
                html += '<label class="longtext">' + projectName + '</label>';
            }

            return html;
        }

        function buildProjecPlantLink(existProjectPlanInfo, projectId) {
            var html = '';

            if (existProjectPlanInfo) {
                html += '<a href="#" class="project-plan-link" data-project-sys-id="' + projectId + '">計画書</a>';
            }

            return html;
        }

        function buildEffort(plan, actual) {
            return '<span>' + parseFloat(actual).toFixed(2) + '/' + parseFloat(plan).toFixed(2) + '</span>';
        }

        function serverParams(aoData) {
            aoData.push(
                { "name": "UserId", "value": $("#Condition_UserId").val() },
                { "name": "WorkTimeUnit", "value": $("#time_unit").val() },
                { "name": "SelectedMonth", "value": $("#Condition_SelectedMonth").val() },
                { "name": "SelectedYear", "value": $("#Condition_SelectedYear").val() },
                { "name": "TAB_ID", "value": $("#tabId").val() }
            );
        }

        function displayComplete() {
            $('div.actual-work-detail').removeAttr('style');
            $("#onloadDivSales").hide();
        }

        function bindData(data) {
            // process status disabled  buttton exportCSV when search data
            if (data.aaData.length == 0) {
                $('#btnExport').addClass('disabled').attr('disabled', 'disabled');
            }
            else {
                $('#btnExport').removeClass('disabled').removeAttr('disabled');
            }
        }

        $(document).off('#InfoTable thead th');
        $(document).on('click', '#InfoTable thead th:not(.sorting_disabled)', function () {
            var sortCol = $(this).index() + 1;
            var sortDir = 'asc';

            if ($(this).hasClass('sorting_desc'))
                sortDir = 'desc';

            var $form = $('#formDetail');
            $form.children('[name="sortCol"]').val(sortCol);
            $form.children('[name="sortDir"]').val(sortDir);
        });

        $("button#buttonActualWorkregist").click(function () {
            $('#ActualWorkregistForm input[name="key3"]').val(($('input[name="CbRegistType"]').val() === 'True' || $('input[name="CbRegistType"]').val() === 'true') ? '1' : '0');
            $("#ActualWorkregistForm").submit();
        });

        $("button#btnNextMonth").click(function () {
            $("#user_id").val($("#Condition_UserId").val());
            var year = $("#Condition_SelectedYear").val();
            var month = $("#Condition_SelectedMonth").val();
            $("#time_unit").val($("#Condition_WorkTimeUnit").val());

            if (month++ == 12) {
                month = 1;
                year++;
            }
            $("#Condition_SelectedYear").val(year);
            $("#Condition_SelectedMonth").val(month);

            $("#formDetail").attr("action", "/PMS06002/Detail");
            $("#formDetail").submit();
            return true;
        });

        $("button#btnPrevMonth").click(function () {
            $("#user_id").val($("#Condition_UserId").val());
            var year = $("#Condition_SelectedYear").val();
            var month = $("#Condition_SelectedMonth").val();
            $("#time_unit").val($("#Condition_WorkTimeUnit").val());

            if (month-- == 1) {
                month = 12;
                year--;
            }
            $("#Condition_SelectedYear").val(year);
            $("#Condition_SelectedMonth").val(month);

            $("#formDetail").attr("action", "/PMS06002/Detail");
            $("#formDetail").submit();
            return true;
        });

        $(document).on('change', '#Condition_WorkTimeUnit', function () {
            $("#time_unit").val($("#Condition_WorkTimeUnit").val());
            $("#formDetail").attr("action", "/PMS06002/Detail");
            $("#formDetail").submit();
        });

        $('button#btnExport').click(function () {
            $("#formDetail").attr("action", "/PMS06002/ExportCsv");
            $("#formDetail").submit();
        });

        function setCurrentYearMonthLabel(currentYear, currentMonth) {
            $("#CurrentYearMonth").html(currentYear + '年' + currentMonth + '月');
        }

        $(document).off('.project-detail-link');
        $(document).on('click', '.project-detail-link', function () {
            $('#project-id').val($(this).attr("project-id"));
            $('#selected_year').val($('#Condition_SelectedYear').val());
            $('#selected_month').val($('#Condition_SelectedMonth').val());
            $("#formProjectDetail").submit();
        });

        $(document).off('.project-plan-link');
        $(document).on('click', '.project-plan-link', function () {
            if ('@(currentUser.PlanFunctionList.Contains(Constant.FunctionID.ProjectPlanRegist)
                    && currentUser.FunctionList.Contains(Constant.FunctionID.ProjectPlanRegist))' == 'True') {
                $('#read_only').val('');
            } else {
                $('#read_only').val('1');
            }

            var $form = $("#frmProjectPlan");

            $form.find('#plan_projectId').val($(this).data("project-sys-id"));
            $form.submit();
        });

        function MemberActualWork(company_code, user_sys_id, actual_work_year, actual_work_month, total_actual_work, regist_type) {
            this.company_code = company_code;
            this.user_sys_id = user_sys_id;
            this.actual_work_year = actual_work_year;
            this.actual_work_month = actual_work_month;
            this.total_actual_work = total_actual_work;
            this.regist_type = regist_type;
        }

        // JS class represent the AttendanceRecord entity class
        function AttendanceRecord(company_code, user_sys_id, actual_work_year, actual_work_month, actual_work_date, work_start_time, work_end_time, clock_in_start_time, clock_in_end_time, rest_time, attendance_type_id, remarks) {
            this.company_code = company_code;
            this.user_sys_id = user_sys_id;
            this.actual_work_year = actual_work_year;
            this.actual_work_month = actual_work_month;
            this.actual_work_date = actual_work_date;
            this.work_start_time = work_start_time;
            this.work_end_time = work_end_time;
            this.clock_in_start_time = clock_in_start_time;
            this.clock_in_end_time = clock_in_end_time;
            this.rest_time = rest_time;
            this.attendance_type_id = attendance_type_id;
            this.remarks = remarks;
        }

        $('button#btnImportCSV').click(function () {
            $("#fileCSV").click();
        });

        $(document).off('#fileCSV');
        $(document).on('change', '#fileCSV', function () {
            var result = PMS.utility.getDataByAjax('/Common/CheckTimeOut', null);

            if (result == null)
                return;

            var file = $('#fileCSV').val();
            if (file == '') {
                return;
            }
            var sFileExtension = file.split('.')[file.split('.').length - 1].toLowerCase();
            if (sFileExtension !== 'csv') {
                PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.WARNING'), '@string.Format(Messages.E046)');
                return;
            }
            $('#onloadDiv h2').hide();
            $('#onloadDiv, #onloadDiv img').show();
            submitFile();
        });

        function submitFile() {
            var formdata = new FormData(); //FormData object
            var fileInput = document.getElementById('fileCSV');
            if (fileInput.files.length == 0) {
                return;
            }

            //Iterating through each files selected in fileInput
            for (i = 0; i < fileInput.files.length; i++) {
                //Appending each file to FormData object
                formdata.append(fileInput.files[i].name, fileInput.files[i]);
            }

            formdata.append('employee_no', $('input[name="employee_no"]').val());
            formdata.append('month', $('input[name="target_month"]').val());
            formdata.append('year', $('input[name="target_year"]').val());
            formdata.append('user_id', $('input[name="user_id"]').val());

            //Creating an XMLHttpRequest and sending
            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/PMS06002/CheckImportCSV');
            xhr.send(formdata);
            xhr.onload = function (data) {
                $('#fileCSV').val('');
                $("#errorMsg").html("");
                $('#onloadDiv').hide();
                var res = JSON.parse(xhr.responseText);
                if (typeof (res) == 'string') // has error
                    PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.WARNING'), res);
                else { // rebind data
                    PMS.utility.showSubmitConfirmDialog("@Messages.I019", null, null, function (action) {
                        if (action) {
                            var dataList = new Array();
                            var user_sys_id = parseInt(@Model.Condition.UserId);
                            var month = parseInt(@Model.Condition.SelectedMonth);
                            var year = parseInt(@Model.Condition.SelectedYear);
                            var regist_type = ($('input[id="CbRegistType"]').val() == 'True' || $('input[id="CbRegistType"]').val() == 'true') ? '1' : '0';

                            var param = { user_sys_id: user_sys_id, year: year, month: month};
                            var actualWorkDateList = PMS.utility.getDataByAjax('/PMS06002/ActualWorkDateList', param);

                            for (var row in res) {
                                var rowData = res[row];
                                var startTime = rowData['4'].split(':');
                                var endTime = rowData['5'].split(':');
                                var start = parseInt(startTime[0]) + parseInt(startTime[1]) / 60.0;
                                var end = parseInt(endTime[0]) + parseInt(endTime[1]) / 60.0;
                                var clockInStartTime = rowData['9'].split(":");
                                var clockInEndTime = rowData['10'].split(":");
                                var ciStart = parseInt(clockInStartTime[0]) + parseInt(clockInStartTime[1]) / 60.0;
                                var ciEnd = parseInt(clockInEndTime[0]) + parseInt(clockInEndTime[1]) / 60.0;
                                var date = new Date(rowData['3']).getDate();

                                if (!($.inArray(date, actualWorkDateList) !== -1)) {
                                var attendanceRecord = new AttendanceRecord(
                                null,
                                user_sys_id,
                                year,
                                month,
                                date,
                                start,
                                end,
                                ciStart,
                                ciEnd,
                                0,
                                null,
                                null);
                                dataList.push(attendanceRecord);
                            }
                            }

                            submitData(user_sys_id, month, year, dataList, regist_type);
                            BootstrapDialog.closeAll();
                        }
                    });
                }
            }
        }

        function submitData(user_sys_id, month, year, dataListAttendanceRecord, regist_type) {
            var dataToSend = JSON.stringify({
                userId: user_sys_id,
                month: month,
                year: year,
                dataListAttendanceRecord: dataListAttendanceRecord,
                regist_type: regist_type
            });

            $.ajax({
                type: "POST",
                url: '@Url.Action("ImportCSVNew", "PMS06002")',
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: dataToSend,
                success: function (result) {
                    $('.ui-dialog *').remove();
                    $("#errorMsg").html("");
                    if (typeof (result) == 'object') {
                        $("#formDetail").attr("action", "/PMS06002/Detail");
                        PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.INFORMATION'), "@Messages.E050", null, "#formDetail");
                    }
                    else {
                        PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.WARNING'), result);
                    }
                },
                error: function (error) {
                    $('.ui-dialog *').remove();
                    if (error.status == 419) {
                        //419: Authentication Timeout
                        window.location.href = '/PMS01001/Login/timeout';
                    }
                }
            });
        }

        $('button#btnDownload').click(function () {
            $("#frmDownload").attr("action", "/PMS06002/DownloadXlsxFile");
            $("#frmDownload").submit();
        });

        function InitBtnImportCsv() {
            if ($('#CbRegistType').val() == "True" || $('#CbRegistType').val() == "true") {
                $('.regist_type').text('@Constant.RegistType.TEMP_REGIST');
                $('#btnImportCSV').removeAttr('disabled');
                $('#btnImportCSV').removeClass('disabled');
            }
            else // Real Regist
            {
                $('.regist_type').text('@Constant.RegistType.ACTUAL_REGIST');
                $('#btnImportCSV').attr('disabled', 'disabled');
            }
        }
        InitBtnImportCsv();

        $('#UpdateInfo_regist_type').on('change', function () {
            $('#btnRegistType').click();
        });

        var flag = true;
        $(document).off('#btnRegistType');
        $(document).on('click', '#btnRegistType', function () {
            if (flag) {
                flag = false;
                var hiddenRegistType = $('#CbRegistType').val() == "True" || $('#CbRegistType').val() == "true" ? false : true;
                $('#CbRegistType').val(hiddenRegistType);

                var registType = hiddenRegistType ? "1" : "0";

                var company_code = null;
                var user_sys_id = parseInt(@Model.Condition.UserId);
                var month = parseInt(@Model.Condition.SelectedMonth);
                var year = parseInt(@Model.Condition.SelectedYear);
                var memberActualWork = null;

                var memberActualWork = new MemberActualWork(
                        company_code,
                        user_sys_id,
                        year,
                        month,
                        0,
                        registType);

                var dataToSend = JSON.stringify({
                    dataMemberActualWork: memberActualWork,
                });
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("ChangeRegistType", "PMS06002")',
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    data: dataToSend,
                    success: function (result) {
                        flag = true;
                        $("#errorMsg").html("");
                        if (typeof (result) == 'object') {
                            $('label[for="UpdateInfo_last_update_date"]').text(result.last_update_date);
                            $('label[for="UpdateInfo_last_update_person"]').text(result.last_update_person);
                            $('label[for="UpdateInfo_last_update_person"]').attr('title', result.last_update_person);
                            if ($('label[for="UpdateInfo_insert_date"]').text() == ' ' && $('label[for="UpdateInfo_insert_person"]').text() == ' ') {
                                $('label[for="UpdateInfo_insert_date"]').text(result.last_update_date);
                                $('label[for="UpdateInfo_insert_person"]').text(result.last_update_person);
                                $('label[for="UpdateInfo_insert_person"]').attr('title', result.last_update_person);
                            }

                            if (hiddenRegistType) // Temp regist
                            {
                                $('#btnRegistType').html('@Constant.RegistType.TEMP_REGIST');
                                $('#btnImportCSV').removeAttr('disabled');
                                $('#btnImportCSV').removeClass('disabled');
                                $('#btnImportCSV').addClass('blue');
                            }
                            else // Real Regist
                            {
                                $('#btnRegistType').html('@Constant.RegistType.ACTUAL_REGIST');
                                $('#btnImportCSV').attr('disabled', 'disabled');
                                $('#btnImportCSV').removeClass('blue');
                                $('#btnImportCSV').addClass('disabled');
                            }
                        }
                        else if (result == 'INVALID') {
                            PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.WARNING'), '@Messages.E049');
                            $('#CbRegistType').val(!hiddenRegistType);
                            $('#UpdateInfo_regist_type').val('@Constant.RegistType.TEMP_REGIST')
                            $('input[name="registerType"]').val(hiddenRegistType ? '0' : '1');
                        } else {
                            PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.WARNING'), result);
                            $('#UpdateInfo_regist_type').val('@Constant.RegistType.TEMP_REGIST')
                        }
                    },
                    error: function (error) {
                        flag = true;

                        if (error.status == 419) { //419: Authentication Timeout
                            window.location.href = '/PMS01001/Login/timeout';
                        } else if (error.status == 420) { // out of date license
                            window.location.href = '/ErrorOutOfDate';
                        }
                        else {
                            window.location.href = '/Error';
                        }
                    }
                });
            }
        });
    });
</script>

<form action='@Url.Action("Edit","PMS06002")' method="POST" style="display:none;" id="ActualWorkregistForm">
    <input type="hidden" name="id" value="@Model.Condition.UserId" />
    <input type="hidden" name="key" value="@Model.Condition.SelectedYear" />
    <input type="hidden" name="key2" value="@Model.Condition.SelectedMonth" />
    <input type="hidden" name="key3" value="" />
    @if (currentUser != null && currentUser.PlanFunctionList.Contains(Constant.FunctionID.ProjectDetail) && currentUser.FunctionList.Contains(Constant.FunctionID.ProjectDetail))
    {
        <input type="hidden" id="role-project-detail" />
    }
</form>

<form action='@Url.Action("DownloadXlsxFile", "PMS06002")' method="POST" style="display:none;" id="frmDownload">
    <input type="hidden" name="user_id" value="@Model.Condition.UserId" />
    <input type="hidden" name="selected_year" value="@Model.Condition.SelectedYear" />
    <input type="hidden" name="selected_month" value="@Model.Condition.SelectedMonth" />
</form>

<section class="content-header">
    <h1 style="display: inline-block">@ViewBag.Title</h1>
    @Html.LabelFor(m => m.GroupName, @Model.GroupName, new { @class = "GroupName longtext1", title = @Model.GroupName })
    @Html.LabelFor(m => m.UserName, @Model.UserName, new { @class = "UserName longtext1", title = @Model.UserName })
    <div class="btn-header">
        <form id="formDetail" action='@Url.Action("Detail","PMS06002")' method="POST" class="frmExport">
            <input type="hidden" id="Condition_UserId" name="user_id" value="@Model.Condition.UserId" />
            <input type="hidden" id="Condition_SelectedYear" name="selected_year" value="@Model.Condition.SelectedYear" />
            <input type="hidden" id="Condition_SelectedMonth" name="selected_month" value="@Model.Condition.SelectedMonth" />
            <input type="hidden" id="time_unit" name="time_unit" value="@Model.Condition.WorkTimeUnit" />
            <input type="hidden" name="sortCol" value="0" />
            <input type="hidden" name="sortDir" value="asc" />
            <input type="hidden" id="tabId" name="TAB_ID"  />
        </form>
        <button type="button" id="btnPrevMonth" name="btnPrevMonth" class="btn light btnNoStyleDisable">前月</button>
        <span id="dateRange">@Model.CurrentYearMonth</span>
        <button type="button" id="btnNextMonth" name="btnNextMonth" class="btn light btnNoStyleDisable">翌月</button>
        <label id="lblRegistType">登録区分</label>
        @Html.DropDownListFor(m => m.UpdateInfo.regist_type, new SelectList(Constant.RegistType.Items, "Key", "Value"), new { @class = "" })
        <button id="btnRegistType" name="btnRegistType" class="btn dark btn-regist-type hide">@Model.UpdateInfo.regist_type</button>
    </div>
    @Html.HiddenFor(m => m.CbRegistType)

    <div class="search-form">
        <div class="search-condition row none-button-search">
            <div class="col-md-12">
                <div class="form-group">
                    @Html.Label("", "予定工数合計", new { @class = "right title-width" })
                    @Html.LabelFor(m => m.EstimatedTime, @Model.EstimatedTime + workTimeUnit, new { @class = "label-width font-normal" })

                    @Html.Label("", "実績工数合計", new { @class = "right title-width" })
                    @Html.LabelFor(m => m.ActualTime, @Model.ActualTime + workTimeUnit, new { @class = "label-width font-normal" })

                    @Html.Label("", "更新日時", new { @class = "right title-width" })
                    @Html.LabelFor(m => m.UpdateInfo.last_update_date, @Model.UpdateInfo.last_update_date, new { @class = "label-width2" })

                    @Html.Label("", "更新者", new { @class = "right title-width" })
                    @Html.LabelFor(m => m.UpdateInfo.last_update_person, @Model.UpdateInfo.last_update_person, new { @class = "update-user font-normal longtext2", title = @Model.UpdateInfo.last_update_person })
                </div>
                <div class="form-group form-group-2">
                    @Html.Label("", "予定原価合計", new { @class = "right title-width" })
                    @Html.LabelFor(m => m.EstimatedTimeTotal, @Model.EstimatedTimeTotal + "円", new { @class = "label-width font-normal" })

                    @Html.Label("", "実原価合計", new { @class = "right title-width" })
                    @Html.LabelFor(m => m.TotalCost, @Model.TotalCost + "円", new { @class = "label-width font-normal" })

                    @Html.Label("", "利益合計", new { @class = "right title-width" })
                    @Html.LabelFor(m => m.TotalIncome, @Model.TotalIncome + "円", new { @class = "label-width font-normal" })
                </div>
            </div>
        </div>
    </div>
</section>

@RenderPage("~/Views/Shared/ShowHideHeaderContent.cshtml")

@if (currentUser != null && currentUser.PlanFunctionList.Contains(Constant.FunctionID.ActualWorkRegist) && currentUser.FunctionList.Contains(Constant.FunctionID.ActualWorkRegist))
{
    <button id="buttonActualWorkregist" class="btn dark btn-input-actual"><i class="btn-icon btn-running"></i>稼働入力</button>
}
<div class="data-list actual-work-detail content">
    <table id="InfoTable" class="dataTable" width="100%">
        <thead>
            <tr>
                <th class="project-id">プロジェクトID</th>
                <th class="project-name cell_left">プロジェクト名</th>
                <th class="link-project-plan">計画書</th>
                <th class="rank">ランク</th>
                <th class="progress">進捗</th>
                <th class="plan_effort">実績工数/予定工数</th>
                <th class="personal_profit_rate">個人利益率</th>
                <th class="project-no">PJ利益率</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
    <br />
    <div class="notification">
        @Html.DropDownListFor(m => m.Condition.WorkTimeUnit, new SelectList(Constant.TimeUnit.Items, "Key", "Value"), new { @class = "timeUnit" }, false)
        @Html.ValidationMessageFor(m => m.Condition.WorkTimeUnit)
    </div>
</div>
<div class="search-date search-date-actual-detal-old">
    <button id="btnExport" name="btnExport" class="btn dark btn-left"><i class="btn-icon btn-output-csv"></i>CSV出力</button>
    <button id="btnImportCSV" name="btnImportCSV" class="btn dark btn-left"><i class="btn-icon btn-input-csv"></i>CSV取込</button>
    @if (currentUser != null && currentUser.PlanFunctionList.Contains(Constant.FunctionID.OutputExcel) && currentUser.FunctionList.Contains(Constant.FunctionID.OutputExcel))
    {
        <button id="btnDownload" name="btnDownload" class="btn dark btn-left"><i class="btn-icon btn-output-csv"></i>ダウンロード</button>
    }
</div>

<form id="formProjectDetail" action="/PMS06001/Detail/" method="POST">
    <input id="project-id" type="hidden" name="id">
    <input id="selected_year" type="hidden" name="selected_year">
    <input id="selected_month" type="hidden" name="selected_month">
</form>

<form method="POST" action="@Url.Action("ImportCSVNew", "PMS06002")" enctype="multipart/form-data" id="frmImportCSV">
    <input type="hidden" name="user_id" value="@Model.Condition.UserId" />
    <input type="hidden" name="target_year" value="@Model.Condition.SelectedYear" />
    <input type="hidden" name="target_month" value="@Model.Condition.SelectedMonth" />
    <input type="hidden" name="employee_no" value="@Model.EmployeeNo" />
    <input type="file" id="fileCSV" name="fileCSV" style="display:none" accept=".csv" />
</form>
