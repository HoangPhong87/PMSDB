@using ProjectManagementSystem.Common
@using ProjectManagementSystem.Resources
@model ProjectManagementSystem.ViewModels.PMS06002.PMS06002ActualWorkRegistModelNew
@{
    ViewBag.Title = "稼働実績入力";
}
@Scripts.Render("~/bundles/actualRegistNew")
@Styles.Render("~/Content/themes/base/minified/jquery-ui.min")

<script type="text/javascript" charset="utf-8">
    $(function () {
        $('body').css('overflow', 'auto');

        $(document).ready(function () {
            resizeVgrid();
        });

        function resizeVgrid() {
            $(".actual-work-regist-new .div-right").vgrid({
                easing: "easeOutQuint",
                time: 400,
                delay: 20,
                wait: 500
            });
        }

        //Message definition
        var confirmMsg = '@Messages.E005';
        var okMsg = '@string.Format(Messages.I004, "稼働実績", "の更新に成功")';

        // JS class represent the MemberActualWorkDetail entity class
        function MemberActualWorkDetail(user_sys_id, actual_work_year, actual_work_month, actual_work_date, detail_no, project_sys_id, phase_id, actual_work_time) {
            this.user_sys_id = user_sys_id;
            this.actual_work_year = actual_work_year;
            this.actual_work_month = actual_work_month;
            this.actual_work_date = actual_work_date;
            this.detail_no = detail_no;
            this.project_sys_id = project_sys_id;
            this.phase_id = phase_id;
            this.actual_work_time = actual_work_time;
        }

        // JS class represent the MemberActualWork entity class
        function MemberActualWork(user_sys_id, actual_work_year, actual_work_month, total_actual_work, regist_type) {
            this.user_sys_id = user_sys_id;
            this.actual_work_year = actual_work_year;
            this.actual_work_month = actual_work_month;
        }

        // JS class represent the AttendanceRecord entity class
        function AttendanceRecord(user_sys_id, actual_work_year, actual_work_month, actual_work_date, work_start_time, work_end_time, rest_time, allowed_cost_time, attendance_type_id, remarks) {
            this.user_sys_id = user_sys_id;
            this.actual_work_year = actual_work_year;
            this.actual_work_month = actual_work_month;
            this.actual_work_date = actual_work_date;
            this.work_start_time = work_start_time;
            this.work_end_time = work_end_time;
            this.rest_time = rest_time;
            this.allowed_cost_time = allowed_cost_time;
            this.attendance_type_id = attendance_type_id;
            this.remarks = remarks;
        }

        // construct the list of data(MemberActualWorkDetail) object to be sent to server
        function buildDataListMemberActualWorkDetail() {
            var user_sys_id = parseInt(@Model.user_sys_id);
            var month = parseInt(@Model.target_month);
            var year = parseInt(@Model.target_year);
            var actual_work_date = parseInt(@Model.target_date);

            var dataList = new Array();

            $(".tbl-actual-work-regist-new.actual-work tr td.actual-time").each(function (row) {
                var project_sys_id = $("input.project_sys_id", $(this)).val();
                var phase_id = $("input.phase_id", $(this)).val();
                var actual_work_time = $("input.timeValue", $(this)).val();
                var isChanged = $("input.isChanged", $(this)).val() == '1' ? true : false;

                if (isChanged) {
                    var workDetail = new MemberActualWorkDetail(
                        user_sys_id,
                        year,
                        month,
                        actual_work_date,
                        0,  //detail_no,
                        project_sys_id,
                        phase_id,
                        actual_work_time);
                    dataList.push(workDetail);
                }
            });

            return dataList;
        }

        // construct the list of data(MemberActualWork) object to be sent to server
        function buildDataMemberActualWork() {
            var user_sys_id = parseInt(@Model.user_sys_id);
            var month = parseInt(@Model.target_month);
            var year = parseInt(@Model.target_year);

            var memberActualWork = null;

            if (buildDataListMemberActualWorkDetail().length > 0 || buildDataAttendanceRecord != null) {
                memberActualWork = new MemberActualWork(
                    user_sys_id,
                    year,
                    month);
            }
            return memberActualWork;
        }

        // construct the list of data(AttendanceRecord) object to be sent to server
        function buildDataAttendanceRecord() {
            var user_sys_id = parseInt(@Model.user_sys_id);
            var month = parseInt(@Model.target_month);
            var year = parseInt(@Model.target_year);
            var date = parseInt(@Model.target_date);

            var attendanceRecord = null;

            var work_start_time = $(".start_time").val();
            var isChangeWordkStartTime = $(".start_time").parent('td').children('input.isChanged').val() == '1' ? true : false;
            var work_end_time = $(".end_time").val();
            var isChangeWorkEndTime = $(".end_time").parent('td').children('input.isChanged').val() == '1' ? true : false;
            var rest_time = $(".rest_time").val();
            var isChangRestTime = $(".rest_time").parent('td').children('input.isChanged').val() == '1' ? true : false;
            var allowed_cost_time = $(".allowed_cost_time").val();
            var isAllowedCostTime = $(".allowed_cost_time").parent('td').children('input.isChanged').val() == '1' ? true : false;
            var attendance_type_id = $('.attendance_type_cb option:selected').val();
            var isChangeAttendance_type = $(".attendance_type_cb").parent('td').children('input.isChanged').val() == '1' ? true : false;
            var remarks = $(".remark-content").val() == "" ? null : $(".remark-content").val();
            var isChangeRemarks = $(".remark-content").parent('td').children('input.isChanged').val() == '1' ? true : false;

            if (isChangeWordkStartTime || isChangeWorkEndTime || isChangRestTime || isAllowedCostTime || isChangeAttendance_type || isChangeRemarks) {
                attendanceRecord = new AttendanceRecord(
                    user_sys_id,
                    year,
                    month,
                    date,
                    work_start_time,
                    work_end_time,
                    rest_time,
                    allowed_cost_time,
                    attendance_type_id,
                    remarks);
            }

            return attendanceRecord;
        }

        function submitData(dataListMemberActualWorkDetail, dataMemberActualWork, dataAttendanceRecord, regist_type) {
            var dataToSend = JSON.stringify({
                dataListMemberActualWorkDetail: dataListMemberActualWorkDetail,
                dataMemberActualWork: dataMemberActualWork,
                dataAttendanceRecord: dataAttendanceRecord,
                regist_type: regist_type
            });

            $.ajax({
                type: "POST",
                url: '@Url.Action("UpdateActualWorkDetailNew", "PMS06002")',
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: dataToSend,
                success: function (result) {
                    $('.ui-dialog *').remove();
                    $("#errorMsg").html("");
                    if (typeof (result) == 'object') {
                        PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.INFORMATION'), "@string.Format(Messages.I004, "稼働実績", "登録")");
                        $('input.isChanged').val('0');
                    }
                    else if (result == 'E015') {
                        PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.WARNING'), '@string.Format(Messages.E015, "稼働実績", "登録")');
                    }
                    else if (result == 'E010') {
                        var invalidMess = [];
                        PMS.utility.removeValidationError();
                        invalidMess.push("@string.Format(Messages.E065)");
                        PMS.utility.showClientError(invalidMess);
                    }
                    else if (result == 'E041') {
                        PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.WARNING'), '@Messages.E041');
                    }
                    else {
                        PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.WARNING'), '@string.Format(Messages.E045, "稼働実績情報")', '/PMS06002/Detail');
                    }

                },
                error: function (error) {
                    $('.ui-dialog *').remove();
                    if (error.status == 419) {
                        //419: Authentication Timeout
                        window.location.href = '/PMS01001/Login/timeout';
                    }
                }
            });
        }

        //Validate user data before send it to server
        function validateData() {
            //Check for invalid values
            var errorColumn = new Array();

            if ($("input.start_time_hour").length > 0 && $("input.start_time_minute").length > 0) {
                var hour = $("input.start_time_hour").val() == '' ? "00" : $("input.start_time_hour").val();
                var minute = $("input.start_time_minute").val() == '' ? "00" : $("input.start_time_minute").val();
                if (hour == "" || minute == "" || isNaN(hour) || isNaN(minute) || parseInt(minute) >= 60) {
                    errorColumn.push("勤務開始");
                }
            }

            if ($("input.end_time_hour").length > 0 && $("input.end_time_minute").length > 0) {
                var hour = $("input.end_time_hour").val() == '' ? "00" : $("input.end_time_hour").val();
                var minute = $("input.end_time_minute").val() == '' ? "00" : $("input.end_time_minute").val();
                if (hour == "" || minute == "" || isNaN(hour) || isNaN(minute) || parseInt(minute) >= 60) {
                    errorColumn.push("勤務終了");
                }
            }

            if ($("input.rest_time_hour").length > 0 && $("input.end_time_minute").length > 0) {
                var hour = $("input.rest_time_hour").val() == '' ? "00" : $("input.rest_time_hour").val();
                var minute = $("input.rest_time_minute").val() == '' ? "00" : $("input.rest_time_minute").val();
                if (hour == "" || minute == "" || isNaN(hour) || isNaN(minute) || parseInt(minute) >= 60) {
                    errorColumn.push("休憩");
                }
            }

            $(".tbl-actual-work-regist-new.actual-work tr td.actual-time").each(function (row) {
                var hour = $("input.hour", $(this)).val() == '' ? "00" : $("input.hour", $(this)).val();
                var minute = $("input.minute", $(this)).val() == '' ? "00" : $("input.minute", $(this)).val();
                var project = $("input.project_name", $(this)).val();
                var phase = $("input.display_name", $(this)).val();
                if (hour == "" || minute == "" || isNaN(hour) || isNaN(minute) || parseInt(minute) >= 60) {
                    errorColumn.push(project + "の" + phase);
                }
            });

            if (errorColumn.length > 0) {
                //Display error message
                var msgBody = "の稼働時間に誤りがあります";

                var messages = "<ul>";
                for (var i = 0; i < errorColumn.length; i++) {
                    messages += "<li>" + errorColumn[i] + msgBody + "</li>";
                }
                messages += "</ul>";

                $("#errorMsg").html(messages);
                return false;
            }
            return true;
        }

        //Send data to server to update
        $("button#btnUpdate").click(function () {
            if ($('input[name="registerType"]').val() == '0') {
                return false;
            }

            var invalidMess = [];
            if ($("input.allowed_cost_time").val() > 0 && $("textarea.remark-content").val() === '') {
                invalidMess.push("@string.Format(Messages.E065)");
            }

            PMS.utility.removeValidationError();
            if (invalidMess.length > 0) {
                PMS.utility.showClientError(invalidMess);
                return false;
            }

            if (!validateData()) {
                return false;
            }

            $('.validation-summary-errors').remove();

            if (PMS.utility.IsAuthenticateTimeout('@string.Format(Messages.I006)', '') == 0) {
                return;
            }

            var dataListMemberActualWorkDetail = buildDataListMemberActualWorkDetail();
            var dataAttendanceRecord = buildDataAttendanceRecord();
            var dataMemberActualWork = buildDataMemberActualWork();

            if (dataListMemberActualWorkDetail.length == 0 && dataAttendanceRecord == null) {
                PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.WARNING'), '@Messages.E043');
                return;
            }

            PMS.utility.showSubmitConfirmDialog(confirmMsg, null, null, function (action) {
                if (action) {
                    //reset the flag
                    $("input.isChanged", $(this)).val('0');
                    $('input[class="isChangedRegist"]').val('0');
                    submitData(dataListMemberActualWorkDetail, dataMemberActualWork, dataAttendanceRecord, $('#registerType').val());
                    BootstrapDialog.closeAll();
                }
            });
        });

        $('button#btnPreDay').click(function () {
            var dataListMemberActualWorkDetail = buildDataListMemberActualWorkDetail();
            var dataAttendanceRecord = buildDataAttendanceRecord();
            var timePeriod = getTimePeriod();
            var daysInMonths;
            if (timePeriod.d - 1 == 0) {
                if (timePeriod.m - 1 == 0) {
                    timePeriod.m = 12;
                    timePeriod.y--;
                    daysInMonths = daysInMonth(timePeriod.m, timePeriod.y);
                } else {
                    daysInMonths = daysInMonth(timePeriod.m - 1, timePeriod.y);
                    timePeriod.m--;
                }
                timePeriod.d = daysInMonths;

            } else {
                timePeriod.d--;
            }

            if (dataListMemberActualWorkDetail.length == 0 && dataAttendanceRecord == null) {
                setValueDate(timePeriod.d, timePeriod.m, timePeriod.y);
                $("#frmRegisterNew").submit();
            } else {
                PMS.utility.showSubmitConfirmDialog("@Messages.I010", null, null, function (action) {
                    if (action) {
                        setValueDate(timePeriod.d, timePeriod.m, timePeriod.y);
                        $("#frmRegisterNew").submit();
                        BootstrapDialog.closeAll();
                    }
                });
            }
        });

        $('button#btnNextDay').click(function () {
            var dataListMemberActualWorkDetail = buildDataListMemberActualWorkDetail();
            var dataAttendanceRecord = buildDataAttendanceRecord();
            var timePeriod = getTimePeriod();
            var daysInMonths;
            if (timePeriod.d + 1 > daysInMonth(timePeriod.m, timePeriod.y)) {
                if (timePeriod.m == 12) {
                    timePeriod.d = 1;
                    timePeriod.m = 1;
                    timePeriod.y++;
                } else {
                    timePeriod.d = 1;
                    timePeriod.m++;
                }
            } else {
                timePeriod.d++;
            }

            if (dataListMemberActualWorkDetail.length == 0 && dataAttendanceRecord == null) {
                setValueDate(timePeriod.d, timePeriod.m, timePeriod.y);
                $("#frmRegisterNew").submit();
            } else {
                PMS.utility.showSubmitConfirmDialog("@Messages.I010", null, null, function (action) {
                    if (action) {
                        setValueDate(timePeriod.d, timePeriod.m, timePeriod.y);
                        $("#frmRegisterNew").submit();
                        BootstrapDialog.closeAll();
                    }
                });
            }
        });

        //Month is 1 based
        function daysInMonth(month, year) {
            return new Date(year, month, 0).getDate();
        }

        $('button#btnBack').click(function () {
            var prevPage = '@HttpContext.Current.Session[Constant.SESSION_TRANSITION_DESTINATION]';
            if (prevPage.indexOf('AssignmentByUser') >= 0)
                window.location.href = prevPage;
            else {
                $('#frmBackToDetail').submit();
            }
        });

        $('button#btnClear').click(function () {
            PMS.utility.showSubmitConfirmDialog("入力内容をクリアします。よろしいですか？", null, null, function (action) {
                if (action) {
                    clearValue();
                    BootstrapDialog.closeAll();
                }
            });
        });

        function clearValue() {
            var totalHour = '00';
            var totalMinute = '00';
            // version old
                //var hour = '00';
                //var minute = '00';
            // end version old

            // version update
            var hour = '';
            var minute = '';
            // end version update

            $('.hour').val(hour);
            $('.minute').val(hour);
            $('.start_time').attr('value', '');
            $('.end_time').attr('value', '');
            $('.rest_time').attr('value', '');
            $('.allowed_cost_time').attr('value', '');
            $('.hour').attr('value', '');
            $('.minute').attr('value', '');
            $('.time_phase').attr('value', '00<span> : </span>00');
            $('input.timeValue').attr('value', '');
            $("input.isChanged").attr('value', '1');
            $('textarea.remark-content').val('');
            $("#AttendanceRecordInfor_attendance_type_id").val("1");
            // version old
                //$('.total').html(hour + '<span> : </span>' + minute);
                //$('.total').append("<input type='hidden' class='actualTime' value='" + hour + ':' + minute + "' />");
                //$('.total-actual-time').html(hour + '<span> : </span>' + minute);
                //$('.total-actual-time').append("<input type='hidden' class='tempTimeTotal'  value='" + hour + ':' + minute + "' />");
                //$('.total-actual').html(hour + '<span> : </span>' + minute);
            // end version old

            // version update
            $('.total').html(totalHour + '<span> : </span>' + totalMinute);
            $('.total').append("<input type='hidden' class='actualTime' value='" + totalHour + ':' + totalMinute + "' />");
            $('.total-actual-time').html(totalHour + '<span> : </span>' + totalMinute);
            $('.total-actual-time').append("<input type='hidden' class='tempTimeTotal'  value='" + totalHour + ':' + totalMinute + "' />");
            $('.total-actual').html(totalHour + '<span> : </span>' + totalMinute);
            // end version update
        }

        function setValueDate(day, month, year) {
            $("#day").val(day);
            $("#month").val(month);
            $("#year").val(year);
        }

        function getTimePeriod() {
            var day = $("#day").val();
            var month = $("#month").val();
            var year = $("#year").val();

            return {
                d: parseInt(day),
                m: parseInt(month),
                y: parseInt(year)
            }
        }

        $(document).off('.tbl-actual-work-regist-new.actual-work tr td.title_work');
        $(document).on('click', '.tbl-actual-work-regist-new.actual-work tr td.title_work', function () {
            if ($(this).parent().parent().children('tr.time').attr('style').indexOf('display: none;') != -1){
                $(this).parent().parent().children('tr.time').show();
                $(this).css("background-image", "url('../images/sort_asc.png')");
                $(this).css("background-position", "bottom right");
            } else {
                $(this).parent().parent().children('tr.time').hide();
                $(this).css("background-image", "url('../images/sort_desc.png')");
                $(this).css("background-position", "top right");
            }
            resizeVgrid();
        });

        $(document).off('select.attendance_type_cb');
        $(document).on('change', 'select.attendance_type_cb', function () {
            var dataToSend = JSON.stringify({
                attendance_type_id: $(this).val()
            });
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetAdjustmentTime", "PMS06002")',
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: dataToSend,
                success: function (result) {
                    $('.ui-dialog *').remove();
                    $("#errorMsg").html("");
                    if (typeof (result) == 'object') {
                        $('input.allowed_cost_time_hour').attr('value', result['hour']);
                        $('input.allowed_cost_time_minute').attr('value', result['minute']);
                        $('input.allowed_cost_time_hour').val(result['hour']);
                        $('input.allowed_cost_time_minute').val(result['minute']);
                        $('input.allowed_cost_time').attr('value', result['time']);
                    }
                },
                error: function (error) {
                    $('.ui-dialog *').remove();
                    if (error.status == 419) { //419: Authentication Timeout
                        window.location.href = '/PMS01001/Login/timeout';
                    } else if (error.status == 420) { // out of date license
                        window.location.href = '/ErrorOutOfDate';
                    }
                    else {
                        window.location.href = '/Error';
                    }
                }
            });
        });

        var titleWorkElement = $('.tbl-actual-work-regist-new.actual-work tr td.title_work');
        titleWorkElement.parent().parent().children('tr.time').hide();
        titleWorkElement.css("background-image", "url('../images/sort_desc.png')");
        titleWorkElement.css("background-position", "top right");
    });
</script>

<form id="frmRegisterNew" method="POST" action="@Url.Action("RegisterNew", "PMS06002")">
    <input id="day" name="day" type="hidden" value="@Model.target_date">
    <input id="month" name="month" type="hidden" value="@Model.target_month">
    <input id="year" name="year" type="hidden" value="@Model.target_year">
    <input id="userId" name="userId" type="hidden" value="@Model.user_sys_id">
    <input id="registerType" name="registerType" type="hidden" value="@Model.registerType">
</form>

<form id="frmBackToDetail" method="POST" action="@Url.Action("Detail","PMS06002")">
    <input type="hidden" name="user_id" value="@Model.user_sys_id" />
    <input type="hidden" name="selected_year" value="@Model.target_year" />
    <input type="hidden" name="selected_month" value="@Model.target_month" />
</form>

<div class="actual-work-regist-new clearfix">
    <div class="div-left">
        <section class="content-header">
            <h1 id="title">
                @ViewBag.Title
            </h1>
        </section>
        <div class="content-left">
            <div class="date_display">
                <button type="button" id="btnPreDay" name="btnPreDay" class="btn light">前日</button>
                <span class="range-date"><span>@Model.target_year</span>年<span>@{ string month = Model.target_month.ToString(); if (Model.target_month < 10) { month = "0" + Model.target_month.ToString(); } }@month</span>月<span>@{ string date = Model.target_date.ToString(); if (Model.target_date < 10) { date = "0" + Model.target_date.ToString(); } }@date</span>日</span>
                <button type="button" id="btnNextDay" name="btnNextDay" class="btn light">翌日</button>
            </div>

            <div id="bigContainer">
                <table class="tbl-actual-work-regist-new">
                    <tbody>
                        <tr>
                            <td class="title_work_regist cell_left">勤務開始</td>
                            <td class="content_work_regist cell_center">
                                @Html.TextBoxFor(m => m.work_start_time_hour, new { @class = "start_time_hour hour", tabindex = 1, maxlength = 2 }):@Html.TextBoxFor(m => m.work_start_time_minute, new { @class = "start_time_minute minute", tabindex = 1, maxlength = 2 })
                                @Html.HiddenFor(m => m.AttendanceRecordInfor.work_start_time, new { @class = "start_time" })
                                <input type='hidden' class='isChanged' value='0' />
                            </td>
                        </tr>
                        <tr>
                            <td class="title_work_regist cell_left">勤務終了</td>
                            <td class="content_work_regist cell_center">
                                @Html.TextBoxFor(m => m.work_end_time_hour, new { @class = "end_time_hour hour", tabindex = 2, maxlength = 2 }):@Html.TextBoxFor(m => m.work_end_time_minute, new { @class = "end_time_minute minute", tabindex = 2, maxlength = 2 })
                                @Html.HiddenFor(m => m.AttendanceRecordInfor.work_end_time, new { @class = "end_time" })
                                <input type='hidden' class='isChanged' value='0' />
                            </td>
                        </tr>
                        <tr>
                            <td class="title_work_regist cell_left">休憩</td>
                            <td class="content_work_regist cell_center">
                                @Html.TextBoxFor(m => m.rest_time_hour, new { @class = "rest_time_hour hour", tabindex = 3, maxlength = 2 }):@Html.TextBoxFor(m => m.rest_time_minute, new { @class = "rest_time_minute minute", tabindex = 3, maxlength = 2 })
                                @Html.HiddenFor(m => m.AttendanceRecordInfor.rest_time, new { @class = "rest_time" })
                                <input type='hidden' class='isChanged' value='0' />
                            </td>
                        </tr>
                        <tr>
                            <td class="title_work_regist cell_left">有休</td>
                            <td class="content_work_regist cell_center">
                                @Html.TextBoxFor(m => m.allowed_cost_time_hour, new { @class = "allowed_cost_time_hour hour", tabindex = 3, maxlength = 2 }):@Html.TextBoxFor(m => m.allowed_cost_time_minute, new { @class = "allowed_cost_time_minute minute", tabindex = 3, maxlength = 2 })
                                @Html.HiddenFor(m => m.AttendanceRecordInfor.allowed_cost_time, new { @class = "allowed_cost_time" })
                                <input type='hidden' class='isChanged' value='0' />
                            </td>
                        </tr>
                        <tr>
                            <td class="title_work_regist cell_left">実働</td>
                            <td class="content_work_regist cell_center time total"></td>
                        </tr>
                        <tr>
                            <td class="title_work_regist cell_left">勤務区分</td>
                            <td colspan="3" class="content_work_regist cell_center">
                                <select tabIndex='4' class='attendance_type_cb' id="AttendanceRecordInfor_attendance_type_id" name='AttendanceRecordInfor.attendance_type_id'>

                                    @foreach (var attendanceType in Model.AttendanceTypeList)
                                    {
                                        if (attendanceType.Value == Model.AttendanceRecordInfor.attendance_type_id.ToString())
                                        {
                                            <option value='@attendanceType.Value' selected>@attendanceType.Text</option>
                                        }
                                        else
                                        {
                                            <option value='@attendanceType.Value'>@attendanceType.Text</option>
                                        }
                                    }


                                    @if (Model.AttendanceRecordInfor.attendance_type_id != 0 && !Model.AttendanceTypeList.Any(x => x.Value == Model.AttendanceRecordInfor.attendance_type_id.ToString()))
                                    {
                                        <option value=@Model.AttendanceRecordInfor.attendance_type_id selected disabled hidden>@Model.AttendanceRecordInfor.display_name</option>
                                    }
                                </select>
                                <input type='hidden' class='isChanged' value='0' />
                                @Html.HiddenFor(m => m.AttendanceRecordInfor.attendance_type_id, new { @class = "attendance_type" })
                            </td>
                        </tr>
                        <tr>
                            <td colspan="3" class="content_work_regist cell_center">
                                @Html.TextAreaFor(m => m.AttendanceRecordInfor.remarks, new { @class = "remark-content", maxlength = 200, rows = 2, cols = 50, tabindex = 5 })
                                <input type='hidden' class='isChanged' value='0' />
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="group-btn">
                <button type="button" id="btnBack" name="btnBack" class="btn light btnNoStyleDisable" tabindex="7"><i class="btn-icon btn-back"></i>戻る</button>
                <button type="button" id="btnClear" name="btnClear" class="btn light"><i class="btn-icon btn-clear"></i>クリア</button>
                <button type="button" id="btnUpdate" name="btnUpdate" class="btn green" tabindex="8"><i class="btn-icon btn-regist"></i>登録</button>
            </div>
        </div>
    </div><!-- End div-left-->

    <div class="div-right">

        @for (var i = 0; i < @Model.MemberActualWorkList.Count(); i++)
        {
            if (i == 0 || !@Model.MemberActualWorkList[i].project_sys_id.Equals(@Model.MemberActualWorkList[i - 1].project_sys_id))
            {
                <div id="bigContainer" class="content-right scroll-content">
                    <table class="tbl-actual-work-regist-new actual-work">
                        <tbody>
                            <tr>
                                <td colspan="4" class="title_work cell_left">
                                    @if (@Model.MemberActualWorkList[i].sales_type == "2")
                                    {
                                        <div class="status">【@Model.MemberActualWorkList[i].status】</div>
                                        <div class="text-overflow proj-name-short" style="white-space:normal" title="@Model.MemberActualWorkList[i].project_name">@Model.MemberActualWorkList[i].project_name</div>
                                    }
                                    else
                                    {
                                        <div class="text-overflow proj-name-long" style="white-space:normal" title="@Model.MemberActualWorkList[i].project_name">@Model.MemberActualWorkList[i].project_name</div>
                                    }
                                </td>
                            </tr>
                            @for (var j = 0; j < @Model.MemberActualWorkList.Count(); j++)
                            {
                                if (@Model.MemberActualWorkList[i].project_sys_id == @Model.MemberActualWorkList[j].project_sys_id)
                                {
                                    <tr class="time">
                                        <td class="title_work2 cell_left text-overflow" title="@Model.MemberActualWorkList[j].display_name">@Model.MemberActualWorkList[j].display_name</td>
                                        <td class="cell_center actual-time @Model.MemberActualWorkList[j].project_sys_id">
                                            @Html.TextBoxFor(m => m.MemberActualWorkList[j].work_hour, new { @class = "hourInput hour", tabindex = 6, maxlength = 2 }):@Html.TextBoxFor(m => m.MemberActualWorkList[j].work_minute, new { @class = "minuteInput minute", tabindex = 6, maxlength = 2 })
                                            @Html.HiddenFor(m => m.MemberActualWorkList[j].actual_work_time, new { @class = "timeValue" })
                                            @Html.HiddenFor(m => m.MemberActualWorkList[j].project_sys_id, new { @class = "project_sys_id" })
                                            @Html.HiddenFor(m => m.MemberActualWorkList[j].phase_id, new { @class = "phase_id" })
                                            @Html.HiddenFor(m => m.MemberActualWorkList[j].project_name, new { @class = "project_name" })
                                            @Html.HiddenFor(m => m.MemberActualWorkList[j].display_name, new { @class = "display_name" })
                                            <input type='hidden' class='isChanged' value='0' />
                                        </td>
                                    </tr>
                                    if (j != @Model.MemberActualWorkList.Count() - 1)
                                    {
                                        if (Model.MemberActualWorkList[j].project_sys_id != Model.MemberActualWorkList[j + 1].project_sys_id)
                                        {
                                            <tr class="total-actual-time-regist">
                                                <td class="title_work2 cell_left">小計</td>
                                                <td class="cell_center time total-actual @Model.MemberActualWorkList[j].project_sys_id">00 : 00</td>
                                                <input type="hidden" value="@Model.MemberActualWorkList[j].project_sys_id" id="ProjectId" />
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr class="total-actual-time-regist">
                                            <td class="title_work2 cell_left">小計</td>
                                            <td class="cell_center time total-actual @Model.MemberActualWorkList[j].project_sys_id">00 : 00</td>
                                            <input type="hidden" value="@Model.MemberActualWorkList[j].project_sys_id" id="ProjectId" />
                                        </tr>
                                    }
                                }
                            }
                        </tbody>
                    </table>
                </div>
            }
        }
    </div>
    @if (@Model.MemberActualWorkList.Count() > 0)
    {
        <div id="total-time">
            <div class="total-time-right">
                <span style="margin-left:30px">&nbsp;</span>
                <span class="title_work2 cell_left">入力合計</span>
                <span class="cell_center time total-actual-time">00:00</span>
            </div>
        </div>
    }
</div>

@Scripts.Render("~/bundles/actualWorkRegistNew")

<script>

    if($('.hour').attr("readonly") != "readonly")
    {
        $('.hour').spinner({
            max: 99
            ,min: 00
            ,step: 1
            ,numberFormat: "nn"
            ,create: function( event, ui ){
                //add "0" to front of single num
                for(i=0; i<10;i++){
                    if($(this).val() == i+''){
                        $(this).val("0"+i);
                    }
                }
            }
        });
    }

    if($('.minute').attr("readonly") != "readonly")
    {
        var unit_minutes = @ViewBag.Minutes;
        $('.minute').spinner({
            max: 59
            ,min: 00
            ,step: unit_minutes
            ,spin: function( event, ui ) {
                var step = $(this).spinner( "option", "step" );
                var max = $(this).spinner( "option", "max" );
                var min = $(this).spinner( "option", "min" );
                var thisVal = $(this).val();

                //for use click button up in screen by mouse
                var checkButtonAction = event.currentTarget.className + "";
                checkButtonAction = checkButtonAction.split(' ')[1].split('-');
                checkButtonAction = checkButtonAction[checkButtonAction.length-1]
                var checkKey = event.key+"";//for use arrow button on keyboard


                //check Event Up
                if(checkButtonAction == "up" || checkKey=="ArrowUp" || checkKey=="Up"){
                    if(Number(thisVal) + Number(step) > Number(max)) return false;

                    //custom step
                    var newVal = Number($(this).val()) - (Number($(this).val()) % 10);
                    //if(newVal % step != 0)
                    newVal += step;
                    $(this).val(newVal);

                    //if(thisVal % step != 0) return false;
                    return false;
                }

                //check event down
                if(checkButtonAction == "down" || checkKey=="ArrowDown" || checkKey=="Down"){
                    //if(Number(thisVal) - Number(step) < Number(min)) return false;

                    //check out of max when input by keyboard
                    if(thisVal>Number(max)){
                        var countMaxStep=0;
                        for(i=0;i<=Number(max);i+=Number(step)){
                            countMaxStep = i;
                        }
                        $(this).val(countMaxStep);
                        return false;
                    }

                    //custom step
                    var newVal = Number($(this).val()) - (Number($(this).val()) % 10);
                    if(newVal % step != 0)
                        newVal -= step;
                    $(this).val(newVal);

                    if(thisVal % step != 0) return false;
                }
            }
            ,create: function( event, ui ){
                for(i=0; i<9;i++){
                    if($(this).val() == i+''){
                        $(this).val("0"+i)
                    }
                }
            }
        });
    }
    //

    $(window, ".wrapper").resize(function () {
        setTimeout(function () {
            $('.content-wrapper').removeAttr('style');
            $('.wrapper').css('min-width', '1000px');
            $('.div-left').css('min-width', '400px');
        }, 400);
    });
    $('.content-wrapper').addClass('no-padding-bottom');
</script>