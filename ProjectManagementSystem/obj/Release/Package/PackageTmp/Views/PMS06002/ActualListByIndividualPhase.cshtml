@model ProjectManagementSystem.ViewModels.PMS06002.PMS06002ListViewModel
@using ProjectManagementSystem.Resources;
@using ProjectManagementSystem.Common

@{
    ViewBag.Title = "個人別フェーズ別稼働実績一覧";
    var currentUser = HttpContext.Current.Session[Constant.SESSION_LOGIN_USER] as LoginUser;
}

@Scripts.Render("~/bundles/dragOn")

@if (currentUser != null && currentUser.PlanFunctionList.Contains(Constant.FunctionID.ActualWorkDetail) && currentUser.FunctionList.Contains(Constant.FunctionID.ActualWorkDetail))
{
    <input type="hidden" id="roleDetail" value="true" />
}
<div id="onloadDivSales">
</div>
<section class="content-header" id="actualWorkList">
    <h1 id="title">
        @ViewBag.Title
    </h1>
    <div class="search-form">
        <div class="search-condition individual-condition-header clearfix">
            <div class="row row-margin-bottom">
                <div class="group-1">
                    <div class="condition-margin">
                        <label class="width-120">所属</label>
                        @Html.DropDownListFor(m => m.Condition.GroupId, Model.GroupList, "指定なし")
                        <label class="width-100">ユーザー名</label>
                        @Html.TextBoxFor(m => m.Condition.DisplayName, new { style = "ime-mode: auto;", maxlength = 50 })

                        <label class="width-120">期間</label>
                        <span class="date datepicker-months start">
                            @Html.TextBox(m => m.Condition.StartMonth, "{0:yyyy/MM}", new { @class = "ime-mode", maxlength = 7, @placeholder = "YYYY/MM" })
                            <button class="btn light"><i class="btn-icon btn-calendar"></i></button>
                        </span>
                        <span class="date-range-space">～</span>
                        <span class="date datepicker-months end">
                            @Html.TextBox(m => m.Condition.EndMonth, "{0:yyyy/MM}", new { @class = "ime-mode", maxlength = 7, @placeholder = "YYYY/MM" })
                            <button class="btn light"><i class="btn-icon btn-calendar"></i></button>
                        </span>

                    </div>

                    <div class="">
                        <label class="width-120">プロジェクト名</label>
                        @Html.TextBoxFor(m => m.Condition.PROJECT_NAME, new { style = "ime-mode: auto;", @class = "search_project_name", maxlength = 50, @placeholder = "プロジェクト名" })
                    </div>


                </div>
                <div class="group-1">
                    @if (currentUser != null &&
            (currentUser.PlanFunctionList.Contains(Constant.FunctionID.BranchList_Admin) && currentUser.FunctionList.Contains(Constant.FunctionID.BranchList_Admin)
            || currentUser.PlanFunctionList.Contains(Constant.FunctionID.BranchList) && currentUser.FunctionList.Contains(Constant.FunctionID.BranchList)
            || currentUser.PlanFunctionList.Contains(Constant.FunctionID.BranchRegist) && currentUser.FunctionList.Contains(Constant.FunctionID.BranchRegist)))
                    {
                        @*<div class="group-1">*@
                        <label class="width-120 lbl-contract">拠点</label>
                        @Html.DropDownListFor(m => m.Condition.LOCATION_ID, Model.BranchList, new { @class = "", @multiple = "multiple", @style = "vertical-align: top !important;" })
                        @*</div>*@
                    }

                    @*<div class="group-1">*@
                    <label style="width:80px" class="width-120 lbl-contract">契約種別</label>
                    @Html.DropDownListFor(m => m.Condition.CONTRACT_TYPE_ID, Model.ContractTypeList, new { @class = "", @multiple = "multiple", @style = "vertical-align: top !important;" })
                    @*</div>*@

                    @*<div class="group-1">*@
                    <label style="width:80px" class="width-120 lbl-contract">フェーズ</label>
                    <select id="Condition_PHASE_ID" class="Condition_PHASE_ID" name="Condition.PHASE_ID" style="vertical-align: top !important;" multiple="multiple">
                    </select>
                </div>
            </div>

            <div class="row">
                <div class="group-1">
                    @if (currentUser != null && currentUser.PlanFunctionList.Contains(Constant.FunctionID.ActualWorkList_Admin) && currentUser.FunctionList.Contains(Constant.FunctionID.ActualWorkList_Admin))
                    {
                        <label class="width-120 delete-include" style="width:150px;">
                            @Html.CheckBoxFor(m => m.Condition.DELETED_INCLUDE, new { @class = "condition_chkbox" })
                            削除済を含む
                        </label>

                        <label class="width-120">
                            @Html.CheckBoxFor(m => m.Condition.RETIREMENT_INCLUDE, new { @class = "condition_chkbox" })
                            退職済を含む
                        </label>
                    }
                    else
                    {
                        @Html.CheckBoxFor(m => m.Condition.DELETED_INCLUDE, new { @class = "hide" })
                        @Html.CheckBoxFor(m => m.Condition.RETIREMENT_INCLUDE, new { @class = "hide" })
                    }


                </div>



            </div>
        </div>
        <div class="right search-action">
            <button type="button" id="btnSearch" name="btnSearch" class="btn dark btn-search-mg"><i class="btn-icon btn-search"></i>検索</button>
            <button type="button" id="btnClear" name="btnClear" class="btn light"><i class="btn-icon btn-clear"></i>クリア</button>
        </div>
    </div>
</section>
@Html.Hidden("hdnLocationID", Model.Condition.LOCATION_ID)
@Html.Hidden("hdnContractTypeID", Model.Condition.CONTRACT_TYPE_ID)
@Html.Hidden("hdnPhaseID", Model.Condition.PHASE_ID)
@RenderPage("~/Views/Shared/ShowHideHeaderContent.cshtml")

<div class="actual-work-list content data-list special-list clearfix" style="visibility:hidden">
    <div class="note">
        <div class="templ-regist">&nbsp;</div>
        <label>仮登録</label>
    </div>

    <div class="individual-left div-left">
        <table id="InfoTable" class="tbl-left" width="100%">
            <thead>
                <tr>
                    <th>UserId</th>
                    <th>ProjectSysId</th>
                    <th>No.</th>
                    <th>所属</th>
                    <th>ユーザー名</th>
                    <th>拠点</th>
                    <th>プロジェクト名</th>
                    <th>契約種別</th>
                    <th>フェーズ</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
    <div class="individual-right div-right" style="cursor: all-scroll;">
        <table class="tbl-right dataTable" width="100%">
            <thead>
                <tr></tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <div class="notification">
        @Html.DropDownListFor(m => m.Condition.WorkTimeUnit, new SelectList(Constant.TimeUnit.Items, "Key", "Value"), new { @class = "timeUnit" }, false)
    </div>
</div>

<div class="search-date actual-work-list-search-date">
    <button id="btnExport" name="btnExport" class="btn dark btn-left"><i class="btn-icon btn-output-csv"></i>CSV出力</button>
    <button type="button" id="btnPrevMonth" name="btnPrevMonth" class="btn light btnNoStyleDisable">前月</button>
    <span class="time-duration">
        <b id="display_from_year"></b>年<b id="display_from_month"></b>月 ～
        <b id="display_to_year"></b>年<b id="display_to_month"></b>月
    </span>
    <button type="button" id="btnNextMonth" name="btnNextMonth" class="btn light btnNoStyleDisable">翌月</button>

    <form id="formList" action='@Url.Action("ExportCsvActualListByIndividualPhase", "PMS06002")' method="POST" class="frmExport">
        <input id="group_id" name="group_id" type="hidden">
        <input id="eff_type" name="eff_type" type="hidden">
        <input id="start_date" name="start_date" type="hidden">
        <input id="end_date" name="end_date" type="hidden">
        <input id="user_name" name="user_name" type="hidden">
        <input id="deleteFlag" name="deleteFlag" type="hidden" value="False">
        <input id="retirementFlag" name="retirementFlag" type="hidden" value="False">
        <input id="sort_colum" name="sort_colum" type="hidden" value="0">
        <input id="sort_type" name="sort_type" type="hidden" value="asc">
        <input id="search_locationID" name="search_locationID" type="hidden" />
        <input id="tabId" name="TAB_ID" type="hidden" />
        <input id="project_name" name="project_name" type="hidden">
        <input id="search_contractTypeID" name="search_contractTypeID" type="hidden" />
        <input id="search_phaseID" name="search_phaseID" type="hidden" />
        <input id="phase_by_contract" name="phase_by_contract" type="hidden" />

    </form>

    @Html.Hidden("default_start_date", @Model.Condition.StartMonth.ToString("yyyy/MM"))
    @Html.Hidden("default_end_date", @Model.Condition.EndMonth.ToString("yyyy/MM"))
</div>

<form method='post' id='formDetail' action='/PMS06001/ActualWork'>
    <input name="userId" id="userId" type="hidden">
    <input name="projectId" id="projectId" type="hidden">
</form>

<script type="text/javascript" charset="utf-8">
    var sort_colum = 0;
    var sort_type = 'asc';
    var is_chrome = navigator.userAgent.toLowerCase().indexOf('chrome') > -1;
    $(function () {
        window.onload = function () {
            var uniqueId = "@Guid.NewGuid().ToString()";
            $("#tabId").val(uniqueId);
            SetEventBeforeUnload();
            LoadOldValueOfControls();
            saveCondition();
            bindTimeDuration(0);

            // Set selected phase after bind data
            SetValueForPhase('#Condition_CONTRACT_TYPE_ID', '#Condition_PHASE_ID');
            $('.div-right').dragOn({ easing: false, exclusion: { th: '', id: '.dataTables_length, .dataTables_info, .dataTables_paginate' } });


            var hdnLocationID = $('#hdnLocationID').val();
            if (hdnLocationID.length > 0) {
                var locationIdArr = hdnLocationID.split(',');
                $('#Condition_LOCATION_ID').val(locationIdArr);
            }

            var hdnContractTypeID = $('#hdnContractTypeID').val();
            if (hdnContractTypeID.length > 0) {
                var contractTypeIdArr = hdnContractTypeID.split(',');
                $('#Condition_CONTRACT_TYPE_ID').val(contractTypeIdArr);
            }

            var hdnPhaseID = $('#hdnPhaseID').val();
            if (hdnPhaseID.length > 0) {
                var phaseIdArr = hdnPhaseID.split(',');
                $('#Condition_PHASE_ID').val(phaseIdArr);
                $('#search_phaseID').val($('#Condition_PHASE_ID').val());
            }

            //setting value for the DataTable
            var oSorting = {
                "bSort": true
            };
            var oPaginate = {
                "bPaginate": true,
                "iDisplayLength": parseInt(@App[ConfigurationKeys.LIST_ITEMS_PER_PAGE]),
                "bStateSave": false
            };
            var oServerSide = {
                "bServerSide": true,
                "sAjaxSource": '@Url.Action("SearchActualWorkListByIndividualPhase", "PMS06002")',
                "fnBeforeSend": beforeSend,
                "fnServerParams": serverParams,
                "fnInitComplete": bindData,
                "fnDrawCallback": displayComplete
            };
            var aoColumnDefs = [
                { "sName": "user_sys_id", "bVisible": false, "aTargets": [0], "sWidth": "0%" },
                { "sName": "project_sys_id", "bVisible": false, "aTargets": [1], "sWidth": "0%" },
                { "bSortable": false, "sName": "no", "aTargets": [2], "sWidth": "5%", "sClass": "cell_center" },
                { "sName": "group_name", "aTargets": [3], "sWidth": "10%", "sClass": "cell_left", "mRender": function (data, type, full) { return PMS.utility.buildColumShortText(data); } },
                { "sName": "user_name", "aTargets": [4], "sWidth": "13%", "sClass": "cell_left", "mRender": function (data, type, full) { return PMS.utility.buildColumShortText(data); } },
                { "sName": "location_name", "aTargets": [5], "sWidth": "10%", "sClass": "cell_left", "mRender": function (data, type, full) { return PMS.utility.buildColumShortText(data); } },
                { "sName": "project_name", "aTargets": [6], "sWidth": "37%", "sClass": "cell_left", "mRender": function (data, type, full) { return PMS.utility.buildColumShortText(data); } },
                { "sName": "contract_type", "aTargets": [7], "sWidth": "15%", "sClass": "cell_left", "mRender": function (data, type, full) { return PMS.utility.buildColumShortText(data); } },
                { "sName": "phase_name", "aTargets": [8], "sWidth": "10%", "sClass": "cell_left", "mRender": function (data, type, full) { return PMS.utility.buildColumShortText(data); } }
            ];

            var dataTable = CreateDataTable('#InfoTable', oSorting, oPaginate, oServerSide, aoColumnDefs);

            function beforeSend() {
            }

            function serverParams(aoData) {

                aoData.push(
                    { "name": "DisplayName", "value": $("#user_name").val() },
                    { "name": "GroupId", "value": $("#group_id").val() },
                    { "name": "WorkTimeUnit", value: $("#eff_type").val() },
                    { "name": "StartMonth", value: $("#start_date").val() },
                    { "name": "EndMonth", value: $("#end_date").val() },
                    { "name": "DELETED_INCLUDE", "value": $("#deleteFlag").val() },
                    { "name": "RETIREMENT_INCLUDE", "value": $("#retirementFlag").val() },
                    { "name": "LOCATION_ID", "value": $("#search_locationID").val() },
                    { "name": "sortColumn", "value": $("#sort_colum").val() },
                    { "name": "sortType", "value": $("#sort_type").val() },
                    { "name": "TAB_ID", "value": $("#tabId").val() },
                    { "name": "PROJECT_NAME", "value": $("#project_name").val() },
                    { "name": "CONTRACT_TYPE_ID", "value": $("#search_contractTypeID").val() },
                    { "name": "PHASE_ID", "value": $("#search_phaseID").val() },
                    { "name": "PHASE_BY_CONTRACT", "value": SetPhaseParams() }
                );
            }

            function bindData(data) {
                // process status disabled  buttton exportCSV when search data
                if (data.aaData.length == 0) {
                    $('#btnExport').addClass('disabled').attr('disabled', 'disabled');
                    $('#btnChangeMode').addClass('disabled').attr('disabled', 'disabled');
                }
                else {
                    $('#btnExport').removeClass('disabled').removeAttr('disabled');
                    $('#btnChangeMode').removeClass('disabled').removeAttr('disabled');
                }

                var html = '';

                var columsArr = PMS.utility.getMonthCols($('#start_date').val(), $('#end_date').val());

                if (data.datalist.length > 0) {
                    for (var i = 0; i < data.datalist.length; i++) {
                        var bgRow = i % 2 == 0 ? 'odd' : 'even';

                        html += '<tr class="' + bgRow + '">';

                        for (var j = 0; j < columsArr.length; j++) {
                            html += '<td class="center actual_work">' + buildFormCode(data.datalist[i][j], data.aaData[i][0], data.aaData[i][1], columsArr[j]) + '</td>';
                        }

                        html += '</tr>';
                    }
                } else {
                    if (is_chrome) {
                        html += '<tr role="row" class="odd">'
                       + '<td colspan="' + columsArr.length + '" class="dataTables_empty" style="border-bottom:2px solid #eaeaea;height:37px;">&nbsp;</td>'
                       + '<tr>';
                    }
                    else {
                        html += '<tr role="row" class="odd">'
                      + '<td colspan="' + columsArr.length + '" class="dataTables_empty">&nbsp;</td>'
                      + '<tr>';
                    }

                }

                $('.tbl-right tbody').empty().append(html);
            }

            //variable save status of condition
            var currentConditionState = { grID: "", usrName: "", toDate: "", fromDate: "", locID: "", prjName: "", contractTypeId: "", phaseId: "" };
            function displayComplete() {
                $('a[type="1"]').parents('td.actual_work').css('background-color', 'rgb(224, 233, 242)');
                $('div[type="1"]').parents('td.actual_work').css('background-color', 'rgb(224, 233, 242)');

                if (sort_colum == 0) {
                    $('#InfoTable tr th:not(.sorting_disabled)').removeClass('sorting_asc sorting_desc').addClass('sorting').removeAttr('aria-sort');
                }
                $('div.actual-work-list').removeAttr('style');
                PMS.utility.imeControl($("#Condition_DisplayName"), 'active');

                currentConditionState.grID = $('#Condition_GroupId').val();
                currentConditionState.usrName = $('#Condition_DisplayName').val();
                currentConditionState.fromDate = $('#Condition_StartMonth').val();
                currentConditionState.toDate = $('#Condition_EndMonth').val();
                currentConditionState.locID = $('#Condition_LOCATION_ID').val();
                currentConditionState.prjName = $('#Condition_PROJECT_NAME').val();
                currentConditionState.contractTypeId = $('#Condition_CONTRACT_TYPE_ID').val();
                currentConditionState.phaseId = $('#Condition_PHASE_ID').val();
                $("#onloadDiv").hide();
                $("#onloadDivSales").hide();
                $('.pace.pace-active').addClass('pace-inactive').removeClass('pace-active');
                $('#btnSearch').removeAttr('disabled');
            }

            function buildFormCode(data, userID, prjId, targetTime) {
                var arr = data.split('(');
                var dData = arr[0];
                var type = 0;
                var logged = 0;
                if (arr.length > 1) {
                    type = arr[1].split(")")[0];
                }
                if (arr.length > 2) {
                    logged = arr[2].split(")")[0];
                }
                var s = '';
                if ($('#roleDetail').length > 0) {
                    s = '<a href="#" class="detail-link" project_sys_id = "' + prjId
                    + '" user_id="' + userID
                    + '" type = "' + type
                    + '">' + dData + '</a>';
                }
                else {
                    s = '<div type=' + type + '>' + dData + '</div>';
                }
                return s;
            }

            function saveDateCondition() {
                $('#start_date').val($('#Condition_StartMonth').val());
                $('#end_date').val($('#Condition_EndMonth').val());
            }

            function saveCondition() {
                $('#user_name').val($('#Condition_DisplayName').val());
                $('#group_id').val($('#Condition_GroupId').val());
                $('#eff_type').val($('#Condition_WorkTimeUnit').val());
                $("#deleteFlag").val($("#Condition_DELETED_INCLUDE").prop('checked'));
                $("#retirementFlag").val($("#Condition_RETIREMENT_INCLUDE").prop('checked'));
                $('#search_locationID').val($('#Condition_LOCATION_ID').val());
                $('#project_name').val($('#Condition_PROJECT_NAME').val());
                $('#search_contractTypeID').val($('#Condition_CONTRACT_TYPE_ID').val());
                $('#search_phaseID').val($('#Condition_PHASE_ID').val());
                saveDateCondition();
            }

            function bindTimeDuration(changeValue) {
                var startTime = $('#start_date').val();
                var endTime = $('#end_date').val();
                var startTimeArr = startTime.split('/');
                var endTimeArr = endTime.split('/');
                var fromMonth = parseInt(startTimeArr[1]) + changeValue;
                var fromYear = parseInt(startTimeArr[0]);
                var toMonth = parseInt(endTimeArr[1]) + changeValue;
                var toYear = parseInt(endTimeArr[0]);

                if (changeValue !== 0) {
                    if (fromMonth == 0) {
                        fromMonth = 12;
                        fromYear -= 1;
                    }

                    if (fromMonth == 13) {
                        fromMonth = 1;
                        fromYear += 1;
                    }

                    if (toMonth == 0) {
                        toMonth = 12;
                        toYear -= 1;
                    }

                    if (toMonth == 13) {
                        toMonth = 1;
                        toYear += 1;
                    }

                    startTime = fromYear + '/' + (fromMonth.toString().length === 1 ? '0' + fromMonth : fromMonth);
                    endTime = toYear + '/' + (toMonth.toString().length === 1 ? '0' + toMonth : toMonth);

                    $('#start_date, #Condition_StartMonth').val(startTime);
                    $('#end_date, #Condition_EndMonth').val(endTime);

                    $('.date.datepicker-months.start').datepicker("update", startTime);
                    $('.date.datepicker-months.end').datepicker("update", endTime);
                }

                $('#display_from_year').text(fromYear);
                $('#display_to_year').text(toYear);

                fromMonth = fromMonth.length == 1 ? '0' + fromMonth : fromMonth;
                toMonth = toMonth.length == 1 ? '0' + toMonth : toMonth;

                if (fromMonth < 10) {
                    fromMonth = "0" + fromMonth;
                }

                if (toMonth < 10) {
                    toMonth = "0" + toMonth;
                }

                $('#display_from_month').text(fromMonth);
                $('#display_to_month').text(toMonth);

                bindMonthColums(PMS.utility.getMonthCols(startTime, endTime));
            }

            // Bind colums by time duration on data table
            function bindMonthColums(colums) {
                var html = '';
                for (var i = 0; i < colums.length; i++) {
                    html += '<th class="th-month sorting_disabled">' + colums[i] + '</th>';
                }

                $('.tbl-right thead tr').empty().append(html);
            }

            function SearchWorkList() {
                $('.validation-summary-errors').remove();

                // check valid date
                var fromDate = $('#Condition_StartMonth').val();
                var toDate = $('#Condition_EndMonth').val();
                var errFromDate = PMS.utility.validDate(fromDate, 'yyyy/mm', '期間（開始）');
                var errToDate = PMS.utility.validDate(toDate, 'yyyy/mm', '期間（終了）');
                var invalidMess = [];

                if (fromDate.length === 0) {
                    invalidMess.push("@string.Format(Messages.E002, "期間（開始）")");
                } else if (errFromDate != null) {
                    invalidMess.push(errFromDate);
                }

                if (toDate.length === 0) {
                    invalidMess.push("@string.Format(Messages.E002, "期間（終了）")");
                } else if (errToDate != null) {
                    invalidMess.push(errToDate);
                }

                if (invalidMess.length == 0 && fromDate.length > 0 && toDate.length > 0 && errFromDate == null && errToDate == null) {
                    // compare date
                    if (!PMS.utility.compareDate(fromDate, toDate, 'yyyy/mm')) {
                        invalidMess.push('@string.Format(Messages.E027)');
                    }

                    // valid max duration time
                    if (!PMS.utility.compareDateRange(fromDate, toDate, 5)) {
                        invalidMess.push('期間は6ヶ月以内で設定してください。');
                    }
                }

                if (invalidMess.length > 0) {
                    PMS.utility.showClientError(invalidMess);
                    return false;
                }
                var $location = $("#Condition_LOCATION_ID");
                if ($location.val() != null && $location.find('option').length == $location.val().length) {
                    $location.val('');
                }

                var contractTypeId = $("#Condition_CONTRACT_TYPE_ID");
                if (contractTypeId.val() != null && contractTypeId.find('option').length == contractTypeId.val().length) {
                    contractTypeId.val('');
                }

                var phaseId = $("#Condition_PHASE_ID");
                if (phaseId.val() != null && phaseId.find('option').length == phaseId.val().length) {
                    phaseId.val('');
                }


                saveCondition();

                sort_colum = 0;
                sort_type = 'asc';
                $('#sort_colum').val(sort_colum);
                $('#sort_type').val(sort_type);

                bindTimeDuration(0);

                $('.pace.pace-inactive').removeClass('pace-inactive').addClass('pace-active');
                $("#onloadDivSales").show(function () {
                    dataTable.fnPageChange('first');
                });
                $('#btnSearch').attr('disabled', 'disabled');
            }

            $(document).off('table.dataTable tr th');
            $(document).on('focus', 'table.dataTable tr th', function () {
                sort_colum = $(this).index() + 2;
                sort_type = 'asc';

                if ($(this).hasClass('sorting_asc'))
                    sort_type = 'desc';

                $('#sort_colum').val(sort_colum);
                $('#sort_type').val(sort_type);
            });

            $("button#btnSearch").click(function () {
                SearchWorkList();
            });

            $(document).bind('keypress', function (e) {
                var code = e.keyCode || e.which;
                if (code == 13) { //Enter keycode
                    SearchWorkList();
                }
            });

            $("button#btnClear").click(function () {
                $("#Condition_DisplayName").val("");
                $("#Condition_LOCATION_ID").val("");
                $("#Condition_GroupId").val("");
                $('#Condition_StartMonth').val($('#default_start_date').val()).attr('value', $('#default_start_date').val());
                $('#Condition_EndMonth').val($('#default_end_date').val()).attr('value', $('#default_end_date').val());
                $("#Condition_DELETED_INCLUDE").prop('checked', false);
                $("#Condition_RETIREMENT_INCLUDE").prop('checked', false);
                $("#Condition_PROJECT_NAME").val("");
                $("#Condition_CONTRACT_TYPE_ID").val("");
                $("#Condition_PHASE_ID").val("");

                $('.date.datepicker-months.start').datepicker("update", $('#default_start_date').val());
                $('.date.datepicker-months.end').datepicker("update", $('#default_end_date').val());

                SetValueForPhase('#Condition_CONTRACT_TYPE_ID', '#Condition_PHASE_ID');
            });

            $("#Condition_CONTRACT_TYPE_ID").change(function () {
                SetValueForPhase('#Condition_CONTRACT_TYPE_ID','#Condition_PHASE_ID');
            });

            /// Handle the onChange event of the TimeUnit dropdown list
            $("#Condition_WorkTimeUnit").change(function () {
                $('#eff_type').val($('#Condition_WorkTimeUnit').val());
                var currPage = parseInt($('.dataTables_paginate .current').text()) - 1;
                if (!isNaN(currPage)) {
                    dataTable.fnPageChange(currPage);
                }
            });

            /// Handle the onClick event of the Next Month button
            $("button#btnNextMonth").click(function () {
                $('#onloadDivSales').show();
                bindTimeDuration(1);
                dataTable.fnPageChange('first');
            });

            /// Handle the onClick event of the Prev Month button
            $("button#btnPrevMonth").click(function () {
                $('#onloadDivSales').show();
                bindTimeDuration(-1);
                dataTable.fnPageChange('first');
            });

            $('button#btnExport').click(function () {
                $('#phase_by_contract').val(SetPhaseParams());
                $("#formList").submit();
            });

            $(document).off('.detail-link');
            $(document).on('click', '.detail-link', function () {
                $('#userId').val($(this).attr("user_id"));
                $('#projectId').val($(this).attr("project_sys_id"));

                $('#Condition_GroupId').val(currentConditionState.grID);
                $('#Condition_DisplayName').val(currentConditionState.usrName);
                $('#Condition_StartMonth').val(currentConditionState.fromDate);
                $('#Condition_EndMonth').val(currentConditionState.toDate);
                $('#Condition_LOCATION_ID').val(currentConditionState.locID);
                $('#Condition_PROJECT_NAME').val(currentConditionState.prjName);
                $('#Condition_CONTRACT_TYPE_ID').val(currentConditionState.contractTypeId);
                $('#Condition_PHASE_ID').val(currentConditionState.phaseId);

                $("#formDetail").submit();
            });
        }
    });

    function SetValueForPhase(contractType, phase) {
        var $ddlPhase = $(phase);

        $ddlPhase.empty();

        var param = {
            contractTypeId: ($(contractType).val() !==  null) ? $(contractType).val().join(","):null
        };
        var data = PMS.utility.getDataByAjax('/PMS06002/GetListPhaseByContractType', param);
        var html='';

        var contractTypeId = null;
        if (data.length > 0) {
            for (var i = 0; i < data.length; i++) {
                if (contractTypeId !== data[i]["contract_type_id"]) {
                    contractTypeId = data[i]["contract_type_id"];
                    html += '<optgroup label="' + data[i]["contract_type"] + '">';
                }
                html += '<option value="' + data[i]["phase_id"] + '" contractTypeId = "' + contractTypeId + '">' + PMS.utility.htmlEncode(data[i]["phase_name"]) + '</option>';
            }
        }

        $ddlPhase.append(html);

    }
    function LoadOldValueOfControls() {
        var displayName = $('#user_name').val();
        if (displayName.length > 0) {
            $('#Condition_DisplayName').val(displayName);
        }

        var fromDate = $('#start_date').val();
        if (fromDate.length > 0) {
            $('#Condition_StartMonth').val(fromDate);
        }

        var toDate = $('#end_date').val();
        if (toDate.length > 0) {
            $('#Condition_EndMonth').val(toDate);
        }

        var projectName = $('#project_name').val();
        if (displayName.length > 0) {
            $('#Condition_PROJECT_NAME').val(displayName);
        }
    }

    $('#Condition_PHASE_ID').on('change', function () {
    });

    function SetPhaseParams() {
        var arr = [];
        var i = 0;
        $('#Condition_PHASE_ID :selected').each(function () {
            //var hdnContractId = '<input type="hidden" name = "Condition.PHASE_BY_CONTRACT[' + i + '].ContractTypeId" value = "' + $(this).attr('contracttypeid') + '">';
            //var hdnPhaseId = '<input type="hidden" name = "Condition.PHASE_BY_CONTRACT[' + i + '].PhaseId" value = "' + $(this).val() + '">';
            //$('#phase-by-contract').append(hdnContractId);
            //$('#phase-by-contract').append(hdnPhaseId);
            var item = { ContractTypeId: $(this).attr('contracttypeid'), PhaseId: $(this).val() };
            arr.push(item);
            i++;
        });
        return JSON.stringify(arr);
    }
</script>
