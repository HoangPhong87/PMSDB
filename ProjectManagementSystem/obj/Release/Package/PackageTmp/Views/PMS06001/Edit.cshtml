@using ProjectManagementSystem.Resources;
@using ProjectManagementSystem.Common;
@model ProjectManagementSystem.ViewModels.PMS06001.PMS06001EditViewModel
@{
    ViewBag.Title = "プロジェクト登録";
    var currentUser = HttpContext.Current.Session[Constant.SESSION_LOGIN_USER] as LoginUser;
}

<div class="clearfix project-regist-content">
    <div class="project-regist project-input center-side">
        @using (Html.BeginForm("EditProject", "PMS06001", FormMethod.Post, new { id = "frmProjectEdit", enctype = "multipart/form-data", @class = "form-horizontal" }))
        {
            <div class="form-group no-bottom col-sm-12">
                <h1 class="title">
                    @ViewBag.Title
                </h1>
                <div class="clearfix">
                    <h1 class="col-sm-1">概要</h1>
                    @if (currentUser != null && currentUser.PlanFunctionList.Contains(Constant.FunctionID.ProjectPlanRegist) && currentUser.FunctionList.Contains(Constant.FunctionID.ProjectPlanRegist))
                    {
                        <label class="col-sm-1 project-plan">計画書</label>
                    }
                    <div id="updateTime" class="col-sm-10 right">
                        <label class="lable-content text-overflow user-name insUser" title="@Model.PROJECT_INFO.ins_user">@(Model.PROJECT_INFO.ins_user)</label>
                        <label class="font-normal lable-content insDate">@(Model.PROJECT_INFO.ins_date != null ? Model.PROJECT_INFO.ins_date.Value.ToString("yyyy-MM-dd HH:mm") : "")</label>
                        <label class="bold lable-content">初回登録</label>
                    </div>
                </div>
            </div>
            <hr class="form-group col-sm-12" />

            <div class="form-group display-error col-sm-12">
                @Html.ValidationSummary(false)
                <span id="title"></span>
            </div>

            // project no
            <div class="form-group col-sm-12" id="projectNo">
                <label class="col-sm-2 bold">プロジェクトNo.</label>
                <div class="col-sm-9 col-input">
                    <label id="displayProjectNo" class="form-control">@Model.PROJECT_INFO.project_no</label>
                </div>
            </div>

            // project name
            <div class="form-group col-sm-12">
                <label class="col-sm-2 bold" for="project_name">プロジェクト名<span class="RequiredField">*</span></label>
                <div class="col-sm-10 col-input">
                    @Html.TextBoxFor(m => m.PROJECT_INFO.project_name, new { @class = "form-control", maxlength = 50, size = 99 })
                </div>
            </div>

            // orderer
            <div class="form-group col-sm-12 out-sourcer-content">
                <label class="col-sm-2 bold" for="customer_name">発注元名<span class="RequiredField">*</span></label>
                <div class="col-sm-5 col-input out-sourcer">
                    @Html.Hidden("oldOsID", Model.OUTSOURCER.customer_id, new { @class = "old-os-id" })
                    @Html.HiddenFor(m => m.OUTSOURCER.customer_id, new { @class = "os-id" })
                    @Html.TextBoxFor(m => m.OUTSOURCER.customer_name, new { @readonly = "readonly", @class = "os-name value-selected", title = Model.OUTSOURCER.customer_name })
                    <button type="button" class="btn light btnSearchOutsourcer"><i class="btn-icon btn-search-dialog"></i></button>
                </div>
                <div class="col-sm-5 col-input">
                    <label class="bold">タグ</label>
                    @Html.DropDownListFor(m => m.OUTSOURCER.tag_id, Model.TAG_LIST, "指定なし", new { @class = "ddlTagLink" })
                    <label class="btnDeleteOutsourcer lbl-action">クリア</label>
                </div>
            </div>

            //End user
            <div class="form-group col-sm-12 end-user-content">
                <label class="col-sm-2 bold" for="end_user_name">エンドユーザー名</label>
                <div class="col-sm-5 col-input end-user">
                    @Html.Hidden("oldEuID", Model.OUTSOURCER.end_user_id, new { @class = "old-eu-id" })
                    @Html.HiddenFor(m => m.OUTSOURCER.end_user_id, new { @class = "eu-id" })
                    @Html.TextBoxFor(m => m.OUTSOURCER.end_user_name, new { @readonly = "readonly", @class = "eu-name value-selected", title = Model.OUTSOURCER.end_user_name })
                    <button type="button" class="btn light btnSearchEndUser"><i class="btn-icon btn-search-dialog"></i></button>
                </div>
                <div class="col-sm-5 col-input">
                    <label class="btnDeleteEndUser lbl-action">クリア</label>
                </div>
            </div>

            // contract type
            <div class="form-group col-sm-12">
                <label class="col-sm-2 bold">契約種別<span class="RequiredField">*</span></label>
                <div class="col-sm-4 col-input">
                    <select id="PROJECT_INFO_contract_type_id" name="PROJECT_INFO.contract_type_id" class="form-control contract-type">
                        @foreach (var contractType in Model.CONTRACT_TYPE_LIST)
                        {
                            string selected = contractType.contract_type_id == Model.PROJECT_INFO.contract_type_id ? "selected" : string.Empty;
                            <option @selected value="@contractType.contract_type_id" data-type="@contractType.charge_of_sales_flg" data-exception="@contractType.exceptional_calculate_flg">@contractType.contract_type</option>
                        }
                    </select>
                </div>
            </div>

            // duration time
            <div class="form-group col-sm-12">
                <label class="col-sm-2 bold" for="duration_time">期間<span class="RequiredField">*</span></label>
                <div class="col-sm-6 col-input">
                    @Html.TextBox(m => m.PROJECT_INFO.start_date, "{0:yyyy/MM/dd}", new { @class = "ime-mode display-date", maxlength = 10 })
                    <span class="date datepicker-days">
                        @{
                            string startDate = Model.PROJECT_INFO.start_date.HasValue ? Model.PROJECT_INFO.start_date.Value.ToString("yyyy/MM/dd") : Utility.GetCurrentDateTime().ToString("yyyy/MM/dd");
                        }
                        <input class="ime-mode start_date" maxlength="10" type="text" value="@startDate" style="display:none">
                        <button type="button" class="btn light"><i class="btn-icon btn-calendar"></i></button>
                    </span>
                    <label class="date-range-space">～</label>

                    @Html.TextBox(m => m.PROJECT_INFO.end_date, "{0:yyyy/MM/dd}", new { @class = "ime-mode display-date", maxlength = 10 })
                    <span class="date datepicker-days end-date">
                        @{
                            string endDate = Model.PROJECT_INFO.end_date.HasValue ? Model.PROJECT_INFO.end_date.Value.ToString("yyyy/MM/dd") : Utility.GetCurrentDateTime().ToString("yyyy/MM/dd");
                        }
                        <input class="ime-mode end_date" maxlength="10" type="text" value="@endDate" style="display:none">
                        <button type="button" class="btn light"><i class="btn-icon btn-calendar"></i></button>
                    </span>
                </div>

                <div class="col-sm-4 col-input">
                    @Html.LabelFor(m => m.PROJECT_INFO.acceptance_date, new { @class = "bold" })
                    @Html.TextBox(m => m.PROJECT_INFO.acceptance_date, "{0:yyyy/MM/dd}", new { @class = "ime-mode display-date", maxlength = 10 })
                    <span class="date datepicker-days">
                        @{
                            string acceptanceDate = Model.PROJECT_INFO.acceptance_date.HasValue ? Model.PROJECT_INFO.acceptance_date.Value.ToString("yyyy/MM/dd") : Utility.GetCurrentDateTime().ToString("yyyy/MM/dd");
                        }
                        <input class="ime-mode acceptance_date" maxlength="10" type="text" value="@acceptanceDate" style="display:none">
                        <button type="button" class="btn light"><i class="btn-icon btn-calendar"></i></button>
                    </span>
                </div>
            </div>

            // target phase
            <div class="form-group col-sm-12">
                <label class="col-sm-2 bold lblPhaseList">対象フェーズ<span class="RequiredField">*</span></label>
                <div class="col-sm-10 col-input">
                    <div class="col-left">
                        <table id="phase-list" class="tb-ma-sales-left">
                            <tbody>
                                <tr class="tb-header">
                                    <th class="th-select-phase">
                                        @Html.CheckBoxFor(m => m.SELECT_ALL_PHASES, new { id = "check-all-phase" })
                                    </th>
                                    <th class="th-phase-name">フェーズ</th>
                                    <th class="th-est-effort">予定工数</th>
                                </tr>
                                @for (int i = 0; i < Model.PHASE_LIST.Count; i++)
                                {
                                    <tr>
                                        <td>
                                            @Html.CheckBoxFor(m => m.PHASE_LIST[i].check, new { alt = @Model.PHASE_LIST[i].phase_id, @class = "target-phase" })
                                            @Html.HiddenFor(m => m.PHASE_LIST[i].phase_id)
                                        </td>
                                        <td>
                                            <div class="text-overflow" title="@Model.PHASE_LIST[i].display_name">@Model.PHASE_LIST[i].display_name</div>
                                        </td>
                                        @if (Model.PHASE_LIST[i].check && Model.PHASE_LIST[i].estimate_target_flg == "1")
                                        {
                                            <td>
                                                @Html.TextBoxFor(m => m.PHASE_LIST[i].estimate_man_days, new { @class = "right decimal est-effort", @maxlength = 6, @Value = Model.PHASE_LIST[i].estimate_man_days.ToString("0.0"), @oldValue = Model.PHASE_LIST[i].estimate_man_days.ToString("0.0") }) 人日
                                            </td>
                                        }
                                        @if (!Model.PHASE_LIST[i].check && Model.PHASE_LIST[i].estimate_target_flg == "1")
                                        {
                                            <td>
                                                @Html.TextBoxFor(m => m.PHASE_LIST[i].estimate_man_days, new { @class = "right decimal est-effort", @maxlength = 6, @Value = "", @disabled = "disabled", @oldValue = "0.0" }) 人日
                                            </td>
                                        }
                                        @if (Model.PHASE_LIST[i].estimate_target_flg == "0")
                                        {
                                            <td></td>
                                        }
                                    </tr>
                                }
                                <tr class="tr-total-phase">
                                    <td class="empty-td"></td>
                                    <td>合計</td>
                                    <td class="total-effort right">0.0 人日</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                </div>
            </div>

            // category
            <div class="form-group no-bottom col-sm-12">
                @if (Model.TARGET_CATEGORY_LIST.Any(x => x.is_default == true))
                {
                    <label class="col-sm-2 bold category_label" for="category_info">カテゴリ<span class="RequiredField">*</span></label>
                }
                else
                {
                    <label class="col-sm-2 bold category_label" for="category_info">カテゴリ</label>
                }

                <button type="button" class="btn dark btnAddCategory pull-left"><i class="btn-icon btn-add"></i>追加</button>
                <div class="col-sm-9 col-input category-div">
                    <div class="col-sm-12 col-input category-header">
                            <label class="label-category bold">カテゴリ</label>
                            <label class="label-category bold">サブカテゴリ</label>
                    </div>
                    <div class="category-list resizable">
                        @for (int i = 0; i < Model.TARGET_CATEGORY_LIST.Count; i++)
                        {
                            <div class="category-content">
                                <label class="label-category @(Model.TARGET_CATEGORY_LIST[i].is_default ? " " : "hidden ")">@Model.TARGET_CATEGORY_LIST[i].category_name</label>
                                @Html.DropDownListFor(m => m.TARGET_CATEGORY_LIST[i].category_id, Model.CATEGORY_LIST, "指定なし", new { @class = " ddlCategory " + (Model.TARGET_CATEGORY_LIST[i].is_default ? "hidden " : " ") })
                                @Html.DropDownListFor(m => m.TARGET_CATEGORY_LIST[i].sub_category_id, new List<SelectListItem>(), new { @class = "ddlSubCategory" })
                                @Html.Hidden("hdnCategory", Model.TARGET_CATEGORY_LIST[i].category_id)
                                @Html.Hidden("hdnSubCategory", Model.TARGET_CATEGORY_LIST[i].sub_category_id)
                                <label class="btnDeleteCategory lbl-action @(!Model.TARGET_CATEGORY_LIST[i].is_default ? " " : "hidden ")">削除</label>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="col-sm-12 break-space"></div>
            <input type="hidden" id="hdnAutoUpdateHistory" value="false" />
            // member assignment
            <div class="form-group no-bottom col-sm-12">
                <h1 class="col-sm-2">メンバー</h1>
                @Html.HiddenFor(m => m.old_definite_assign_date)
                @Html.HiddenFor(m => m.PROJECT_INFO.assign_fix_date)

                @Html.CheckBoxFor(m => m.definite_assign_date)
                <label>確定</label>

                @if (Model.PROJECT_INFO.assign_fix_date.HasValue)
                {
                    <label class="font-normal">@Model.PROJECT_INFO.assign_fix_date.Value.ToString("yyyy/MM/dd HH:mm")</label>
                }
            </div>
            <hr class="form-group col-sm-12" />

            // person in charge
            <div class="form-group no-bottom col-sm-12 pic-content">
                <label class="col-sm-2 bold" for="charge_person">プロジェクト責任者<span class="RequiredField">*</span></label>
                <div class="col-sm-9 col-input selected-value mar-left">
                    @Html.TextBoxFor(m => m.PROJECT_INFO.group_name, new { @readonly = "readonly", @class = "value-selected", placeholder = "所属", title = Model.PROJECT_INFO.group_name })
                    @Html.TextBoxFor(m => m.PROJECT_INFO.charge_person, new { @readonly = "readonly", @class = "value-selected", placeholder = "名前", title = Model.PROJECT_INFO.charge_person })
                    @Html.HiddenFor(m => m.PROJECT_INFO.group_id)
                    @Html.HiddenFor(m => m.PROJECT_INFO.charge_person_id)
                    @Html.HiddenFor(m => m.PROJECT_INFO.base_unit_cost, new { @class = "money" })
                    <button type="button" id="btnSelectChargePerson" class="btn light"><i class="btn-icon btn-search-dialog"></i></button>
                </div>
            </div>

            // sales person in charge
            <div class="form-group no-bottom col-sm-12 sales-pic-content">
                <label class="col-sm-2 bold">営業担当者</label>
                <div class="col-sm-9 col-input selected-value mar-left">
                    @Html.TextBoxFor(m => m.PROJECT_INFO.group_sales_pic, new { @readonly = "readonly", @class = "value-selected", placeholder = "所属", title = Model.PROJECT_INFO.group_sales_pic })
                    @Html.TextBoxFor(m => m.PROJECT_INFO.charge_of_sales, new { @readonly = "readonly", @class = "value-selected", placeholder = "名前", title = Model.PROJECT_INFO.charge_of_sales })
                    @Html.HiddenFor(m => m.PROJECT_INFO.group_sales_pic_id)
                    @Html.HiddenFor(m => m.PROJECT_INFO.charge_of_sales_id)
                    <button type="button" id="btnSelectSalesPic" class="btn light"><i class="btn-icon btn-search-dialog"></i></button>
                    <label class="lbl-action lblClearValue">クリア</label>
                </div>
            </div>

            <div class="form-group col-sm-12">
                <label class="col-sm-2"></label>
                <button type="button" id="addMember" class="btn dark"><i class="btn-icon btn-add"></i>メンバーを追加</button>
            </div>
            <div class="col-sm-12 break-space"></div>

            // member assignment detail
            <div class="form-group no-bottom col-sm-12">
                <h1 class="col-sm-2" for="assign_member_list">見積もり</h1>
                <label>予定工数</label>
                <label class="font-normal total-estimate-man-days">@Model.PROJECT_INFO.estimate_man_days</label>
                @Html.HiddenFor(m => m.PROJECT_INFO.estimate_man_days)
                <label>人日</label>
            </div>
            <hr class="form-group col-sm-12" />

            // member assignment list
            <div class="form-group col-sm-12 display-list">
                <div class="col-left col-ma-left">
                    <table class="tb-ma-left tb-detail">
                        <tr class="tb-header">
                            <th>メンバー</th>
                        </tr>
                        <tr class="tr-total">
                            <td colspan="2">合計</td>
                        </tr>
                    </table>
                </div>
                <div class="col-center col-ma-center">
                    <table class="tb-ma-center tb-detail">
                        <tr class="tb-header month-colum"></tr>
                        <tr class="tr-total"></tr>
                    </table>
                </div>
                <div class="col-right col-ma-right">
                    <table class="tb-ma-right tb-detail">
                        <tr class="tb-header">
                            <th class="center">合計</th>
                        </tr>
                        <tr class="tr-total tr-sum">
                            <td class="right">
                                @Html.Label("", Constant.DEFAULT_VALUE, new { @class = "font-normal" })
                                @Html.Label("", "人日", new { @class = "" })
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
            <div class="col-sm-12 break-space"></div>

            // total sales
            <div class="form-group no-bottom col-sm-12">
                <h1 for="total_sales">受注金額<span class="RequiredField">*</span></h1>
            </div>
            <hr class="form-group col-sm-12" />
            <div class="form-group col-sm-12">
                <div class="col-sm-6 col-input">
                    @Html.TextBoxFor(m => m.PROJECT_INFO.total_sales, new { @class = "money total-sales right numeric", maxlength = 9 })
                    @Html.Label("", "円", new { @class = "total-sales-unit" })

                    @if (Model.PROJECT_INFO.project_sys_id != 0)
                    {
                        @Html.Label("", "履歴", new { @class = "display-history" })
                    }
                </div>
                <div class="col-sm-6 col-input tax-rate-content">
                    <label class="bold" for="tax_rate">消費税<span class="RequiredField">*</span></label>
                    @Html.TextBoxFor(m => m.PROJECT_INFO.tax_rate, new { @class = "right numeric percent", maxlength = 3, @size = 7 })
                    @Html.Label("", "%", new { @class = "unit" })
                </div>
            </div>
            <div class="col-sm-12 break-space"></div>

            // individual sales
            <div class="form-group no-bottom col-sm-12 total-individual-sales">
                <label class="bold padding-right" for="total_sales">売上金額</label>
                <label class="font-normal bold" id="total_individual_sales">0</label>
                <label>円</label>
            </div>
            <hr class="form-group col-sm-12" />

            // individual sales list
            <div class="form-group col-sm-12 display-list">
                <div class="div-ma-sales col-left">
                    <table class="tb-ma-sales-left tb-detail">
                        <tr class="tb-header">
                            <th>メンバー</th>
                        </tr>
                        <tr class="tr-total">
                            <td>合計</td>
                        </tr>
                    </table>
                </div>
                <div class="col-center">
                    <table class="tb-ma-sales-center tb-detail tb-center">
                        <tr class="tb-header month-colum"></tr>
                        <tr class="tr-total"></tr>
                    </table>
                </div>
                <div class="col-right">
                    <table class="tb-ma-sales-right tb-detail">
                        <tr class="tb-header">
                            <th class="center">
                                合計<br />売上 / 予定原価
                            </th>
                        </tr>
                        <tr class="tr-total tr-sum">
                            <td class="right">
                                <div class="div-sales">
                                    <div>
                                        @Html.Label("", Constant.DEFAULT_VALUE, new { @class = "font-normal total-ma-sales" })
                                        @Html.Label("", "円 /", new { style = "margin-right: 4px;", @class = "" })

                                    </div>
                                    <div>
                                        @Html.Label("", Constant.DEFAULT_VALUE, new { @class = "font-normal total-plan-cost" })
                                        @Html.Label("", "円", new { @class = "" })

                                    </div>
                                </div>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
            <div class="col-sm-12 break-space"></div>

            // total payment
            <div class="form-group no-bottom col-sm-12 total-payment">
                @Html.HiddenFor(m => m.PROJECT_INFO.total_payment)
                <label class="bold padding-right" for="total_sales">支払金額</label>
                <label class="font-normal bold money" id="total_payment">@Model.PROJECT_INFO.total_payment</label>
                <label class="padding-right">円</label>
                <label class="field-validation-error">※ 支払金額は発注費、諸経費の合計です。</label>
            </div>
            <hr class="form-group col-sm-12" />

            // payment list
            <div class="form-group col-sm-12 payment-highlight">
                <label>発注先</label>
                <button type="button" id="btnAddSubcontractor" class="btn dark"><i class="btn-icon btn-add"></i>追加</button>
            </div>

            if (Model.SUBCONTRACTOR_LIST.Count > 0 && Model.SUBCONTRACTOR_LIST[0].customer_id != null)
            {
                for (int i = 0; i < Model.SUBCONTRACTOR_LIST.Count; i++)
                {
                    <div class="subcontractor-content form-group col-sm-12 has-payment">
                        @Html.HiddenFor(m => m.SUBCONTRACTOR_LIST[i].customer_id, new { @class = "sc-id", oldValue = Model.SUBCONTRACTOR_LIST[i].customer_id })
                        @Html.HiddenFor(m => m.SUBCONTRACTOR_LIST[i].charge_person_id, new { @class = "sc-pic-id", oldValue = Model.SUBCONTRACTOR_LIST[i].charge_person_id })
                        @Html.TextBoxFor(m => m.SUBCONTRACTOR_LIST[i].customer_name, new { @readonly = "readonly", @class = "sc-name value-selected", placeholder = "発注先", title = Model.SUBCONTRACTOR_LIST[i].customer_name })
                        <button type="button" class="btn light btnChangeSubcontractor"><i class="btn-icon btn-search-dialog"></i></button>

                        @Html.TextBoxFor(m => m.SUBCONTRACTOR_LIST[i].charge_person_name, new { @readonly = "readonly", @class = "sc-pic-name value-selected", placeholder = "発注先担当者窓口", title = Model.SUBCONTRACTOR_LIST[i].charge_person_name })
                        <button type="button" class="btn light btnSearchSubcontractorPic"><i class="btn-icon btn-search-dialog"></i></button>

                        @Html.TextBoxFor(m => m.SUBCONTRACTOR_LIST[i].total_amount, new { @readonly = "readonly", @class = "money sc-payment right numeric valid w80", maxlength = 9, size = 10 })
                        @Html.Label("", "円", new { @class = "unit" })
                        <label class="btnDeleteSubcontractor lbl-action">削除</label>
                    </div>
                }
            }
            else
            {
                <div class="subcontractor-content form-group col-sm-12">
                    <input class="sc-id" type="hidden">
                    <input class="sc-pic-id" type="hidden">
                    <input class="sc-name value-selected" readonly="readonly" type="text" placeholder="発注先">
                    <button type="button" class="btn light btnChangeSubcontractor"><i class="btn-icon btn-search-dialog"></i></button>

                    <input class="sc-pic-name value-selected" readonly="readonly" type="text" placeholder="発注先担当者窓口">
                    <button type="button" class="btn light btnSearchSubcontractorPic" disabled="disabled"><i class="btn-icon btn-search-dialog"></i></button>

                    <input class="sc-payment money right numeric valid w80" readonly="readonly" type="text" maxlength="9" size="10">
                    @Html.Label("", "円", new { @class = "unit" })
                    <label class="btnDeleteSubcontractor lbl-action">削除</label>
                </div>
            }

            <div class="form-group col-sm-12">
                <button type="button" id="autoAllocationPayment" class="btn light"><i class="btn-icon btn-allocation-gray"></i>自動割当</button>
            </div>

            <div class="form-group col-sm-12 no-bottom display-list">
                <div class="col-left">
                    <table class="tb-sc-left tb-detail">
                        <tr class="tb-header">
                            <th>発注先名</th>
                        </tr>
                        @if (Model.SUBCONTRACTOR_LIST.Count > 0)
                        {
                            for (int i = 0; i < Model.SUBCONTRACTOR_LIST.Count; i++)
                            {
                                if (Model.SUBCONTRACTOR_LIST[i].customer_id != null)
                                {
                                    <tr id="@Model.SUBCONTRACTOR_LIST[i].customer_id">
                                        <td class="td-payment-name">
                                            <div class="text-overflow" title="@Model.SUBCONTRACTOR_LIST[i].customer_name">
                                                @Model.SUBCONTRACTOR_LIST[i].customer_name
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        }
                        <tr class="tr-total">
                            <td>合計</td>
                        </tr>
                    </table>
                </div>
                <div class="col-center">
                    <table class="tb-sc-center tb-detail tb-center">
                        <tr class="tb-header month-colum"></tr>
                        <tr class="tr-total"></tr>
                    </table>
                </div>
                <div class="col-right">
                    <table class="tb-sc-right tb-detail">
                        <tr class="tb-header">
                            <th class="center">合計</th>
                        </tr>
                        <tr class="tr-total tr-sum">
                            <td class="right">
                                @Html.Label("", Constant.DEFAULT_VALUE, new { @class = "font-normal label-tr-total" })
                                @Html.Label("", "円", new { @class = "" })
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
            <hr class="form-group col-sm-12" style="visibility:hidden" />

            // overhead cost list
            <div class="form-group col-sm-12 payment-highlight add-overhead-cost">
                <label>諸経費</label>
                <button type="button" id="btnAddOverheadCost" class="btn dark"><i class="btn-icon btn-add"></i>追加</button>
            </div>

            if (Model.OVERHEAD_COST_LIST.Count > 0 && Model.OVERHEAD_COST_LIST[0].detail_no != null)
            {
                for (int i = 0; i < Model.OVERHEAD_COST_LIST.Count; i++)
                {
                    <div class="overheadcost-content form-group col-sm-12 has-payment old-data">
                        @Html.HiddenFor(m => m.OVERHEAD_COST_LIST[i].is_change, new { @class = "ovc-change" })
                        @Html.HiddenFor(m => m.OVERHEAD_COST_LIST[i].is_delete, new { @class = "ovc-delete" })
                        @Html.HiddenFor(m => m.OVERHEAD_COST_LIST[i].detail_no, new { @class = "ovc-id" })
                        @Html.HiddenFor(m => m.OVERHEAD_COST_LIST[i].charge_person_id, new { @class = "ovc-pic-id", oldValue = Model.OVERHEAD_COST_LIST[i].charge_person_id })
                        @{ string ddlName = "OVERHEAD_COST_LIST[" + i + "].overhead_cost_id"; }
                        <select class="ovc-type-id" name="@ddlName" oldvalue="@Model.OVERHEAD_COST_LIST[i].overhead_cost_id">
                            @foreach (var type in Model.OVERHEAD_COST_TYPE_LIST)
                            {
                                string selected = type.Value.Equals(Model.OVERHEAD_COST_LIST[i].overhead_cost_id.Value.ToString()) ? "selected" : string.Empty;
                                <option @selected value="@type.Value">@type.Text</option>
                            }
                        </select>
                        @Html.TextBoxFor(m => m.OVERHEAD_COST_LIST[i].overhead_cost_detail, new { @class = "ovc-detail", placeholder = "購入品目", title = Model.OVERHEAD_COST_LIST[i].overhead_cost_detail, maxlength = 100, oldValue = Model.OVERHEAD_COST_LIST[i].overhead_cost_detail })
                        @Html.TextBoxFor(m => m.OVERHEAD_COST_LIST[i].charge_person_name, new { @readonly = "readonly", @class = "ovc-pic-name value-selected", placeholder = "購入担当者", title = Model.OVERHEAD_COST_LIST[i].charge_person_name })
                        <button type="button" class="btn light btnSearchOvcPic"><i class="btn-icon btn-search-dialog"></i></button>

                        @Html.TextBoxFor(m => m.OVERHEAD_COST_LIST[i].total_amount, new { @readonly = "readonly", @class = "ovc-total-amount money right numeric valid w80", maxlength = 9, size = 10 })
                        @Html.Label("", "円", new { @class = "unit" })
                        <label class="btnDeleteOverheadCost lbl-action">削除</label>
                    </div>
                }
            }
            else
            {
                <div class="overheadcost-content form-group col-sm-12">
                    <input name="OVERHEAD_COST_LIST[0].detail_no" class="ovc-id" type="hidden">
                    <input name="OVERHEAD_COST_LIST[0].charge_person_id" class="ovc-pic-id" type="hidden" oldvalue="">
                    @Html.DropDownListFor(m => m.OVERHEAD_COST_LIST[0].overhead_cost_id, Model.OVERHEAD_COST_TYPE_LIST, "指定なし", new { @class = "ovc-type-id", oldvalue = "" })
                    <input name="OVERHEAD_COST_LIST[0].overhead_cost_detail" class="ovc-detail" type="text" placeholder="購入品目" readonly="readonly" maxlength="100" oldvalue="">
                    <input class="ovc-pic-name value-selected" readonly="readonly" type="text" placeholder="購入担当者">
                    <button type="button" class="btn light btnSearchOvcPic" disabled="disabled"><i class="btn-icon btn-search-dialog"></i></button>

                    <input name="OVERHEAD_COST_LIST[0].total_amount" class="ovc-total-amount money right numeric valid w80" readonly="readonly" type="text" maxlength="9" size="10">
                    @Html.Label("", "円", new { @class = "unit" })
                    <label class="btnDeleteOverheadCost lbl-action">削除</label>
                </div>
            }

            <div class="form-group col-sm-12">
                <button type="button" id="autoAllocationOverheadCost" class="btn light"><i class="btn-icon btn-allocation-gray"></i>自動割当</button>
            </div>

            <div class="form-group col-sm-12 display-list">
                <div class="col-left">
                    <table class="tb-ovc-left tb-detail">
                        <tr class="tb-header">
                            <th>購入品</th>
                        </tr>
                        @if (Model.OVERHEAD_COST_LIST.Count > 0)
                        {
                            for (int i = 0; i < Model.OVERHEAD_COST_LIST.Count; i++)
                            {
                                if (Model.OVERHEAD_COST_LIST[i].detail_no != null)
                                {
                                    <tr id="@Model.OVERHEAD_COST_LIST[i].detail_no">
                                        <td class="td-ovc-type">
                                            <div class="text-overflow" title="@Model.OVERHEAD_COST_LIST[i].type_name : @Model.OVERHEAD_COST_LIST[i].overhead_cost_detail">
                                                @Model.OVERHEAD_COST_LIST[i].type_name : @Model.OVERHEAD_COST_LIST[i].overhead_cost_detail
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        }
                        <tr class="tr-total">
                            <td>合計</td>
                        </tr>
                    </table>
                </div>
                <div class="col-center">
                    <table class="tb-ovc-center tb-detail tb-center">
                        <tr class="tb-header month-colum"></tr>
                        <tr class="tr-total"></tr>
                    </table>
                </div>
                <div class="col-right">
                    <table class="tb-ovc-right tb-detail">
                        <tr class="tb-header">
                            <th class="center">合計</th>
                        </tr>
                        <tr class="tr-total tr-sum">
                            <td class="right">
                                @Html.Label("", Constant.DEFAULT_VALUE, new { @class = "font-normal label-tr-total" })
                                @Html.Label("", "円", new { @class = "" })
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
            <div class="col-sm-12 break-space"></div>

            // info
            <div class="form-group no-bottom col-sm-12">
                <h1>進捗・状況</h1>
            </div>
            <hr class="form-group col-sm-12" />

            // status
            <div class="form-group col-sm-12">
                <label class="col-sm-2 bold">ステータス<span class="RequiredField">*</span></label>
                <div class="col-sm-10 col-input">
                    <select id="PROJECT_INFO_status_id" name="PROJECT_INFO.status_id">
                        @foreach (var status in Model.STATUS_LIST)
                        {
                            string selected = status.status_id == Model.PROJECT_INFO.status_id ? "selected" : string.Empty;
                            <option @selected value="@status.status_id" data-type="@status.sales_type">@status.status</option>
                        }
                    </select>
                </div>
            </div>

            // rank
            <div class="form-group col-sm-12">
                <label class="col-sm-2 bold" for="PROJECT_INFO_rank_id">ランク</label>
                <div class="col-sm-2 col-input">
                    @Html.DropDownListFor(m => m.PROJECT_INFO.rank_id, Model.RANK_LIST, "指定なし")
                </div>
                <div class="col-sm-8 col-input des-rank">
                    <table class="tbl-rank">
                        @foreach (var rank in Model.RANK_TABLE)
                        {
                            <tr>
                                <td>@rank.rank</td>
                                <td>@rank.remarks</td>
                            </tr>
                        }
                    </table>
                </div>
            </div>

            // progress
            <div class="form-group no-bottom col-sm-12">
                @Html.LabelFor(m => m.PROJECT_INFO.progress, new { @class = "col-sm-2 bold" })
                <div class="col-sm-10 col-input progress-latest">
                    @if (Model.PROGRESS_LIST.Count > 0 && Model.PROGRESS_LIST[0].regist_date != null)
                    {
                        <label class="font-normal h1 padding-right">@Model.PROGRESS_LIST[0].regist_date.Value.ToString("yyyy/MM/dd")</label>
                        <label class="font-normal h1">@Model.PROGRESS_LIST[0].progress%</label>
                    }
                    else
                    {
                        <label class="font-normal h1 padding-right"></label>
                        <label class="font-normal h1"></label>
                    }
                </div>
            </div>

            <div class="form-group no-bottom col-sm-12 div-add-progress">
                <span class="col-sm-2">&nbsp;</span>
                <div class="col-sm-10 col-input">
                    <span class="date datepicker-days padding-right">
                        <input class="ime-mode progress-regist-date" maxlength="10" type="text">
                        <button type="button" class="btn light"><i class="btn-icon btn-calendar"></i></button>
                    </span>
                    <input class="right numeric percent progress-percent" maxlength="3" type="text">
                    <label class="unit padding-right">%</label>
                    <input class="progress-remarks" type="text" maxlength="200">
                    <button type="button" class="btn dark btnAddProgress"><i class="btn-icon btn-add"></i></button>
                </div>
            </div>

            <div class="form-group col-sm-12 no-bottom">
                <span class="col-sm-2">&nbsp;</span>
                <div class="col-sm-10 col-input progress-list resizable">
                    <table class="tb-detail">
                        <tbody>
                            @if (Model.PROGRESS_LIST.Count > 0 && Model.PROGRESS_LIST[0].regist_date != null)
                            {
                                for (int i = 0; i < Model.PROGRESS_LIST.Count; i++)
                                {
                                    <tr>
                                        <td>
                                            @Model.PROGRESS_LIST[i].regist_date.Value.ToString("yyyy/MM/dd")
                                            <input class="hdnProgressRegistDate" type="hidden" value='@Model.PROGRESS_LIST[i].regist_date.Value.ToString("yyyy/MM/dd")'>
                                        </td>
                                        <td>
                                            <input class="hdnProgressPercent" type="hidden" value="@Model.PROGRESS_LIST[i].progress">
                                            @Model.PROGRESS_LIST[i].progress.Value.ToString()%
                                        </td>
                                        <td>
                                            <input class="hdnProgressRemarks" type="hidden" value="@Model.PROGRESS_LIST[i].remarks">
                                            <div class="text-overflow short-progress-remarks" title="@Model.PROGRESS_LIST[i].remarks">@Model.PROGRESS_LIST[i].remarks</div>
                                        </td>
                                        <td class="td-remove">
                                            @Html.HiddenFor(m => m.PROGRESS_LIST[i].isDelete, new { @class = "hdnIsDelete" })
                                            @if (currentUser.UserId == Model.PROGRESS_LIST[i].ins_id
                                                && (Model.PROJECT_INFO.data_editable_time == 0
                                                || Model.PROGRESS_LIST[i].ins_date.Value.AddHours(Model.PROJECT_INFO.data_editable_time) > Utility.GetCurrentDateTime()))
                                            {
                                                <label class="lbl-action btnDeleteProgress">削除</label>
                                            }
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            if (Model.PROJECT_INFO.data_editable_time != 0)
            {
                <div class="form-group col-sm-12">
                    <span class="col-sm-2"> </span>
                    <label class="col-sm-10 col-input error">
                        登録後 @Model.PROJECT_INFO.data_editable_time 時間まで削除可能です（登録者に限る）
                    </label>
                </div>
            }

            // status note
            <div class="form-group col-sm-12">
                @Html.LabelFor(m => m.PROJECT_INFO.status_note, new { @class = "col-sm-2 bold" })
                <div class="col-sm-10 col-input">
                    @Html.TextAreaFor(m => m.PROJECT_INFO.status_note, new { @class = "sWidth_3", maxlength = 2000 })
                </div>
            </div>

            // remarks
            <div class="form-group col-sm-12">
                @Html.LabelFor(m => m.PROJECT_INFO.remarks, new { @class = "col-sm-2 bold" })
                <div class="col-sm-10 col-input">
                    @Html.TextAreaFor(m => m.PROJECT_INFO.remarks, new { @class = "sWidth_3", maxlength = 2000 })
                </div>
            </div>

            <div class="form-group col-sm-12">
                @Html.Hidden("hdnTempStart")
                @Html.Hidden("hdnTempTo")
                @Html.Hidden("hdnOldStart")
                @Html.Hidden("hdnOldTo")
                @Html.Hidden("hdnUserChangeValue", false)
                @Html.HiddenFor(m => m.PROJECT_INFO.project_sys_id)
                @Html.HiddenFor(m => m.PROJECT_INFO.contract_type_id, new { id = "hdnOldContractType" })
                @Html.HiddenFor(m => m.PROJECT_INFO.sales_type, new { alt = @Model.PROJECT_INFO.sales_type })
                @Html.HiddenFor(m => m.PROJECT_INFO.gross_profit)
                @Html.HiddenFor(m => m.IS_CREATE_COPY)
                @Html.HiddenFor(m => m.COPY_TYPE)
                @Html.HiddenFor(m => m.PRJ_SYS_ID_TO_COPY)
                @Html.HiddenFor(m => m.IS_CHANGE_HISTORY)
                @Html.HiddenFor(m => m.IS_UPDATE_ASSIGN_DATE)
                @Html.HiddenFor(m => m.PROJECT_INFO.row_version)
                @Html.HiddenFor(m => m.PROJECT_INFO.temp_start_date)
                @Html.HiddenFor(m => m.PROJECT_INFO.temp_end_date)

                @if (currentUser != null)
                {
                    @Html.Hidden("hdnDecimalCalType", currentUser.DecimalCalculationType)
                }
                @if (Model.PROJECT_INFO.project_sys_id > 0)
                {
                    @Html.Hidden("hdnOldDuration", @Model.PROJECT_INFO.start_date.Value.ToString("yyyy/MM/dd"), new { alt = @Model.PROJECT_INFO.end_date.Value.ToString("yyyy/MM/dd") })
                }
                @if (Model.isNotBack == "EditByGet")
                {
                    @Html.HiddenFor(m => m.isNotBack)
                }

                @Html.AntiForgeryToken()

                @if (Model.isNotBack != "EditByGet" && Model.isNotBack != "EditFromTop")
                {
                    <button type="button" id="btnBack" class="btn light btnNoStyleDisable"><i class="btn-icon btn-back"></i>戻る</button>
                }

                @if (Model.isNotBack == "EditFromTop")
                {
                    <button type="button" id="btnBack" class="btn light btnNoStyleDisable" onclick='RedirectPMS08001()'><i class="btn-icon btn-back"></i>戻る</button>
                }

                <button type="button" id="btnSubmit" name="btnSubmit" class="btn green"><i class="btn-icon btn-regist"></i>登録</button>

                <label class="bold" id="deleteFlag">
                    @Html.CheckBoxFor(m => m.delete_flag, new { @class = "delete-flag" })
                    削除
                </label>
            </div>
        }
    </div>

    <div class="project-summary right-side">
        <div class="project-summary-title">登録内容 <i class="btn-close pull-right"></i></div>
        <div class="project-summary-content">
            <p>
                @Html.LabelFor(m => m.PROJECT_INFO.estimate_man_days, new { @class = "bold" })
                @Html.Label(string.Empty, @Model.PROJECT_INFO.estimate_man_days.ToString(), new { @class = "lable-content font-normal lbl-money", id = "lblEstimate" })
            </p>
            <p>
                @Html.Label(string.Empty, "受注金額", new { @class = "bold" })
                <label class="lable-content font-normal lbl-money" id="lblTotalSales"></label>
            </p>
            <p>
                @Html.Label(string.Empty, "受注金額(税込)", new { @class = "bold" })
                <label class="lable-content font-normal lbl-money" id="lblTotalSalesIncTax"></label>
            </p>
            <p>
                @Html.Label(string.Empty, "売上金額", new { @class = "bold" })
                <label class="lable-content font-normal lbl-money" id="lblTotalOrder"></label>
                <input type="hidden" id="hdnTotalOrder" />
            </p>
            <p>
                @Html.Label(string.Empty, "売上金額(税込)", new { @class = "bold" })
                <label class="lable-content font-normal lbl-money" id="lblTotalOrderIncTax"></label>
            </p>
            <p>
                @Html.LabelFor(m => m.PROJECT_INFO.total_payment, new { @class = "bold" })
                <label class="lable-content font-normal lbl-money" id="lblTotalPayment"></label>
            </p>
            <p>
                @Html.Label(string.Empty, "支払金額(税込)", new { @class = "bold" })
                <label class="lable-content font-normal lbl-money" id="lblTotalPaymentIncTax"></label>
            </p>
            <p>
                @Html.Label(string.Empty, "原価合計", new { @class = "bold" })
                <label class="lable-content font-normal lbl-money" id="lblTotalCost"></label>
            </p>
            <p>
                @Html.Label(string.Empty, "予定粗利", new { @class = "bold" })
                <label class="lable-content font-normal lbl-money" id="lblExpectedGrossProfit"></label>
            </p>
            <p>
                @Html.Label(string.Empty, "予定粗利率", new { @class = "bold" })
                <label class="lable-content font-normal lbl-money" id="lblExpectedGrossMargin"></label>
            </p>

            <p>
                @Html.Label(string.Empty, "実績粗利", new { @class = "bold" })
                <label class="lable-content font-normal lbl-money" id="lblActualProfit">0</label>
            </p>
            <p>
                @Html.Label(string.Empty, "実績粗利率", new { @class = "bold" })
                <label class="lable-content font-normal lbl-money" id="lblActualProfitRate">0</label>
            </p>

            <p>
                @Html.Label(string.Empty, "ステータス", new { @class = "bold" })
                <label class="lable-content" id="lblStatusInfo">1</label>
            </p>
            <p>
                @Html.Label(string.Empty, "進捗", new { @class = "bold" })
                @if (Model.PROGRESS_LIST.Count > 0 && Model.PROGRESS_LIST[0].regist_date != null)
                {
                    <label class="lable-content font-normal" id="lblProgressInfo">@Model.PROGRESS_LIST[0].progress%</label>
                }
                else
                {
                    <label class="lable-content font-normal" id="lblProgressInfo">0%</label>
                }
            </p>

            <div id="updateTime">
                <p>
                    @Html.LabelFor(m => m.PROJECT_INFO.upd_date, new { @class = "bold" })
                    <label class="font-normal lable-content updDate">@(Model.PROJECT_INFO.upd_date != null ? Model.PROJECT_INFO.upd_date.Value.ToString("yyyy-MM-dd HH:mm") : "")</label>
                </p>
                <p>
                    @Html.LabelFor(m => m.PROJECT_INFO.upd_user, new { @class = "bold" })
                    <label class="lable-content text-overflow user-name updUser" title="@Model.PROJECT_INFO.upd_user">@(Model.PROJECT_INFO.upd_user)</label>
                </p>
            </div>
        </div>
    </div>
    <div class="project-summary-small right-side">
        <div class="project-summary-title-small">
            <i class="btn-open"></i>
        </div>
    </div>
</div>

<form id="frmProjectPlan" method="POST" action='@Url.Action("Plan", "PMS06001")'>
    <input id="plan_projectId" name="plan_projectId" type="hidden" value="@Model.PROJECT_INFO.project_sys_id">
</form>

<form id="frmEditByPostBack" method="POST" action='@Url.Action("Edit", "PMS06001")'>
    <input id="plan_projectId" name="id" type="hidden" value="0">
    <input id="isNotBack" name="isNotBack" type="hidden" value="">
</form>

@Scripts.Render("~/bundles/projectRegist")

<script type="text/javascript">
    // Event click select charge person
    $('button#btnSelectChargePerson').click(function () {
        var result = PMS.utility.getDataByAjax('/Common/CheckTimeOut', null);

        if (result == null)
            return;

        $(this).blur();

        var url = '@Url.Action("Select", "PMS01002", new { callback = "setChargePerson" })';
        var projectId = parseInt($('#PROJECT_INFO_project_sys_id').val());

        if (projectId > 0)
            url += '&projectId=' + projectId;

        url += '&pStart=' + $('#hdnOldStart').val()
            + '&pTo=' + $('#hdnOldTo').val()
            + '&TB_iframe=true&modal=true&height=600&width=1100';
        $('body').css('overflow', 'hidden');
        tb_show(null, url, false);
    });

    // Event click select sales pic
    $('button#btnSelectSalesPic').click(function () {
        var result = PMS.utility.getDataByAjax('/Common/CheckTimeOut', null);

        if (result == null)
            return;

        $(this).blur();

        var url = '@Url.Action("Select", "PMS01002", new { callback = "setSalesPic" })';
        var projectId = parseInt($('#PROJECT_INFO_project_sys_id').val());

        if (projectId > 0)
            url += '&projectId=' + projectId;

        url += '&pStart=' + $('#hdnOldStart').val()
            + '&pTo=' + $('#hdnOldTo').val()
            + '&TB_iframe=true&modal=true&height=600&width=1100';
        $('body').css('overflow', 'hidden');
        tb_show(null, url, false);
    });

    // Event click search outsourcer
    $('button.btnSearchOutsourcer').click(function () {
        var result = PMS.utility.getDataByAjax('/Common/CheckTimeOut', null);

        if (result == null)
            return;

        $(this).blur();

        var url = '@Url.Action("Select", "PMS02001", new { callback = "setOutsourcer" })';
        var projectId = parseInt($('#PROJECT_INFO_project_sys_id').val());

        if (projectId > 0)
            url += '&projectId=' + projectId;

        url += '&TB_iframe=true&modal=true&height=600&width=1100';

        $('body').css('overflow', 'hidden');
        tb_show(null, url, false);
    });

    // Event click search end user
    $('button.btnSearchEndUser').click(function () {
        var result = PMS.utility.getDataByAjax('/Common/CheckTimeOut', null);

        if (result == null)
            return;

        $(this).blur();

        var url = '@Url.Action("Select", "PMS02001", new { callback = "setEndUser" })';
        var projectId = parseInt($('#PROJECT_INFO_project_sys_id').val());

        if (projectId > 0)
            url += '&projectId=' + projectId;

        url += '&TB_iframe=true&modal=true&height=600&width=1100';

        $('body').css('overflow', 'hidden');
        tb_show(null, url, false);
    });

    $('button#btnAddSubcontractor').click(function () {
        var result = PMS.utility.getDataByAjax('/Common/CheckTimeOut', null);

        if (result == null)
            return;

        @*var errMess = validPeriod();
        if (errMess !== '') {
            PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.WARNING'), errMess);
            return;
        }*@

        $(this).blur();

        var url = '@Url.Action("Select", "PMS02001", new { callback = "setSubcontractor" })';
        var projectId = parseInt($('#PROJECT_INFO_project_sys_id').val());

        url += '&isMultiSelect=true';

        if (projectId > 0)
            url += '&projectId=' + projectId;

        url += '&TB_iframe=true&modal=true&height=600&width=1100';

        $('body').css('overflow', 'hidden');
        tb_show(null, url, false);
    });

    $(document).off('button.btnChangeSubcontractor');
    $(document).on('click', 'button.btnChangeSubcontractor', function () {
        var result = PMS.utility.getDataByAjax('/Common/CheckTimeOut', null);

        if (result == null)
            return;

        $(this).blur();

        var url = '@Url.Action("Select", "PMS02001", new { callback = "changeSubcontractor" })';
        var projectId = parseInt($('#PROJECT_INFO_project_sys_id').val());

        if (projectId > 0)
            url += '&projectId=' + projectId;

        url += '&TB_iframe=true&modal=true&height=600&width=1100';

        $('.btnChangeSubcontractor').removeClass('clicked');
        $(this).addClass('clicked');
        $('body').css('overflow', 'hidden');
        tb_show(null, url, false);
    });

    // Event click add member
    $('button#addMember').click(function () {
        var result = PMS.utility.getDataByAjax('/Common/CheckTimeOut', null);

        if (result == null)
            return;

        @*var errMess = validPeriod();
        if (errMess !== '') {
            PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.WARNING'), errMess);
            return;
        }*@

        $(this).blur();

        var url = '@Url.Action("Select", "PMS01002", new { callback = "addAssignMember" })';
        var groupId = $('#PROJECT_INFO_group_id').val();
        var projectId = parseInt($('#PROJECT_INFO_project_sys_id').val());

        if (projectId > 0)
            url += '&projectId=' + projectId;

        if (groupId.length > 0) {
            url += '&groupId=' + groupId;
        }

        url += '&pStart=' + $('#hdnOldStart').val()
            + '&pTo=' + $('#hdnOldTo').val()
            + '&isMultiSelect=true&TB_iframe=true&modal=true&height=600&width=1100';

        $('body').css('overflow', 'hidden');
        tb_show(null, url, false);
    });

    // Event click change member
    $(document).off('button.btnChangeMember');
    $(document).on('click', 'button.btnChangeMember', function () {
        var result = PMS.utility.getDataByAjax('/Common/CheckTimeOut', null);

        if (result == null)
            return;

        var projectId = $('#PROJECT_INFO_project_sys_id').val();

        if (projectId != '0') {
            var param = {
                projectId: projectId,
                userId: $(this).parent().attr('data-id')
            }
            var data = PMS.utility.getDataByAjax('/PMS06001/CheckDeleteMember', param);

            if (data.actual_work_time > 0
                || data.work_start_time > 0
                || data.rest_time > 0
                || data.work_end_time > 0) {
                PMS.utility.showMessageDialog("<i class='fa fa-warning'></i>", '対象のユーザーは稼動実績が入力さているため、変更できません。');
                return;
            }
        }

        @*var errMess = validPeriod();
        if (errMess !== '') {
            PMS.utility.showMessageDialog(PMS.utility.htmlDecode('@Constant.DialogType.WARNING'), errMess);
            return;
        }*@

        $(this).blur();

        var url = '@Url.Action("Select", "PMS01002", new { callback = "changeMember" })';
        var groupId = $('#PROJECT_INFO_group_id').val();

        if (projectId != '0')
            url += '&projectId=' + projectId;

        if (groupId.length > 0) {
            url += '&groupId=' + groupId;
        }

        url += '&pStart=' + $('#hdnOldStart').val()
            + '&pTo=' + $('#hdnOldTo').val()
            + '&TB_iframe=true&modal=true&height=600&width=1100';

        $('.btnChangeMember').removeClass('clicked');
        $(this).addClass('clicked');
        $('body').css('overflow', 'hidden');
        tb_show(null, url, false);
    });

    // Event click select charge person for supplier
    $(document).off('button.btnSearchSubcontractorPic');
    $(document).on('click', 'button.btnSearchSubcontractorPic', function () {
        var result = PMS.utility.getDataByAjax('/Common/CheckTimeOut', null);

        if (result == null)
            return;

        $(this).blur();

        var url = '@Url.Action("Select", "PMS01002", new { callback = "setSubcontractorPic" })';
        var projectId = parseInt($('#PROJECT_INFO_project_sys_id').val());

        if (projectId > 0)
            url += '&projectId=' + projectId;

        url += '&pStart=' + $('#hdnOldStart').val()
            + '&pTo=' + $('#hdnOldTo').val()
            + '&TB_iframe=true&modal=true&height=600&width=1100';

        $('.btnSearchSubcontractorPic').removeClass('clicked');
        $(this).addClass('clicked');
        $('body').css('overflow', 'hidden');
        tb_show(null, url, false);
    });

    // Event click select charge person for overhead cost
    $(document).off('button.btnSearchOvcPic');
    $(document).on('click', 'button.btnSearchOvcPic', function () {
        var result = PMS.utility.getDataByAjax('/Common/CheckTimeOut', null);

        if (result == null)
            return;

        $(this).blur();

        var url = '@Url.Action("Select", "PMS01002", new { callback = "setOverheadCostPic" })';
        var projectId = parseInt($('#PROJECT_INFO_project_sys_id').val());

        if (projectId > 0)
            url += '&projectId=' + projectId;

        url += '&pStart=' + $('#hdnOldStart').val()
            + '&pTo=' + $('#hdnOldTo').val()
            + '&TB_iframe=true&modal=true&height=600&width=1100';

        $('.btnSearchOvcPic').removeClass('clicked');
        $(this).addClass('clicked');
        $('body').css('overflow', 'hidden');
        tb_show(null, url, false);
    });

    // Submit register form
    $('button#btnSubmit').click(function () {
        PMS.utility.removeValidationError();

        var invalidMess = validateData();

        if (invalidMess.length > 0) {
            PMS.utility.showClientError(invalidMess);
            return false;
        }

        var projectId = $('#PROJECT_INFO_project_sys_id').val();
        var statusId = $('#PROJECT_INFO_status_id').val();
        if (projectId != '0') {
            var param = {
                projectId: projectId,
                statusId: statusId
            }
            var data = PMS.utility.getDataByAjax('/PMS06001/CheckChangeStatus', param);

            if (data != "Accepted")
            {
                PMS.utility.showMessageDialog("<i class='fa fa-warning'></i>", "@Messages.E069");
                return;
            }
        }
        PMS.utility.IsAuthenticateTimeout('@string.Format(Messages.I006)', '#frmProjectEdit');
    });

    $(document).off('.project-plan');
    $(document).on('click', '.project-plan', function () {
        if ($('#hdnUserChangeValue').val() == 'true') {
            PMS.utility.IsAuthenticateTimeout('@string.Format(Messages.I010)', '#frmProjectPlan');
        } else {
            $("#frmProjectPlan").submit();
        }
    });

    $(document).off('#btnBack');
    $(document).on('click', '#btnBack', function () {
        $.ajax({
            type: "POST",
            url: '/Common/SetButtonBackSession',
            dataType: 'json',
            data: null,
            success: function () {
                window.location.href = "/PMS06001";
            },
            error: function (error) {
            }
        });
    });

    function RedirectPMS08001() {
        PMS.utility.SetButtonBackSession();
        window.location = "@Url.Action("", "PMS08001")";
    }
</script>
